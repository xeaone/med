var hd=Object.create;var Mi=Object.defineProperty;var od=Object.getOwnPropertyDescriptor;var md=Object.getOwnPropertyNames;var Sd=Object.getPrototypeOf,gd=Object.prototype.hasOwnProperty;var At=(l,t)=>()=>(t||l((t={exports:{}}).exports,t),t.exports);var bd=(l,t,u,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of md(t))!gd.call(l,n)&&n!==u&&Mi(l,n,{get:()=>t[n],enumerable:!(a=od(t,n))||a.enumerable});return l};var mu=(l,t,u)=>(u=l!=null?hd(Sd(l)):{},bd(t||!l||!l.__esModule?Mi(u,"default",{value:l,enumerable:!0}):u,l));var Xi=At(M=>{"use strict";var Le=Symbol.for("react.transitional.element"),Td=Symbol.for("react.portal"),Ed=Symbol.for("react.fragment"),Ad=Symbol.for("react.strict_mode"),zd=Symbol.for("react.profiler"),Od=Symbol.for("react.consumer"),rd=Symbol.for("react.context"),Md=Symbol.for("react.forward_ref"),_d=Symbol.for("react.suspense"),Dd=Symbol.for("react.memo"),qi=Symbol.for("react.lazy"),_i=Symbol.iterator;function Ud(l){return l===null||typeof l!="object"?null:(l=_i&&l[_i]||l["@@iterator"],typeof l=="function"?l:null)}var pi={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Yi=Object.assign,Ri={};function gu(l,t,u){this.props=l,this.context=t,this.refs=Ri,this.updater=u||pi}gu.prototype.isReactComponent={};gu.prototype.setState=function(l,t){if(typeof l!="object"&&typeof l!="function"&&l!=null)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,l,t,"setState")};gu.prototype.forceUpdate=function(l){this.updater.enqueueForceUpdate(this,l,"forceUpdate")};function Bi(){}Bi.prototype=gu.prototype;function Je(l,t,u){this.props=l,this.context=t,this.refs=Ri,this.updater=u||pi}var we=Je.prototype=new Bi;we.constructor=Je;Yi(we,gu.prototype);we.isPureReactComponent=!0;var Di=Array.isArray,C={H:null,A:null,T:null,S:null,V:null},Gi=Object.prototype.hasOwnProperty;function We(l,t,u,a,n,e){return u=e.ref,{$$typeof:Le,type:l,key:t,ref:u!==void 0?u:null,props:e}}function Nd(l,t){return We(l.type,t,void 0,void 0,void 0,l.props)}function $e(l){return typeof l=="object"&&l!==null&&l.$$typeof===Le}function Hd(l){var t={"=":"=0",":":"=2"};return"$"+l.replace(/[=:]/g,function(u){return t[u]})}var Ui=/\/+/g;function Ke(l,t){return typeof l=="object"&&l!==null&&l.key!=null?Hd(""+l.key):t.toString(36)}function Ni(){}function qd(l){switch(l.status){case"fulfilled":return l.value;case"rejected":throw l.reason;default:switch(typeof l.status=="string"?l.then(Ni,Ni):(l.status="pending",l.then(function(t){l.status==="pending"&&(l.status="fulfilled",l.value=t)},function(t){l.status==="pending"&&(l.status="rejected",l.reason=t)})),l.status){case"fulfilled":return l.value;case"rejected":throw l.reason}}throw l}function Su(l,t,u,a,n){var e=typeof l;(e==="undefined"||e==="boolean")&&(l=null);var f=!1;if(l===null)f=!0;else switch(e){case"bigint":case"string":case"number":f=!0;break;case"object":switch(l.$$typeof){case Le:case Td:f=!0;break;case qi:return f=l._init,Su(f(l._payload),t,u,a,n)}}if(f)return n=n(l),f=a===""?"."+Ke(l,0):a,Di(n)?(u="",f!=null&&(u=f.replace(Ui,"$&/")+"/"),Su(n,t,u,"",function(d){return d})):n!=null&&($e(n)&&(n=Nd(n,u+(n.key==null||l&&l.key===n.key?"":(""+n.key).replace(Ui,"$&/")+"/")+f)),t.push(n)),1;f=0;var c=a===""?".":a+":";if(Di(l))for(var i=0;i<l.length;i++)a=l[i],e=c+Ke(a,i),f+=Su(a,t,u,e,n);else if(i=Ud(l),typeof i=="function")for(l=i.call(l),i=0;!(a=l.next()).done;)a=a.value,e=c+Ke(a,i++),f+=Su(a,t,u,e,n);else if(e==="object"){if(typeof l.then=="function")return Su(qd(l),t,u,a,n);throw t=String(l),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(l).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return f}function Sn(l,t,u){if(l==null)return l;var a=[],n=0;return Su(l,a,"","",function(e){return t.call(u,e,n++)}),a}function pd(l){if(l._status===-1){var t=l._result;t=t(),t.then(function(u){(l._status===0||l._status===-1)&&(l._status=1,l._result=u)},function(u){(l._status===0||l._status===-1)&&(l._status=2,l._result=u)}),l._status===-1&&(l._status=0,l._result=t)}if(l._status===1)return l._result.default;throw l._result}var Hi=typeof reportError=="function"?reportError:function(l){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof l=="object"&&l!==null&&typeof l.message=="string"?String(l.message):String(l),error:l});if(!window.dispatchEvent(t))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",l);return}console.error(l)};function Yd(){}M.Children={map:Sn,forEach:function(l,t,u){Sn(l,function(){t.apply(this,arguments)},u)},count:function(l){var t=0;return Sn(l,function(){t++}),t},toArray:function(l){return Sn(l,function(t){return t})||[]},only:function(l){if(!$e(l))throw Error("React.Children.only expected to receive a single React element child.");return l}};M.Component=gu;M.Fragment=Ed;M.Profiler=zd;M.PureComponent=Je;M.StrictMode=Ad;M.Suspense=_d;M.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=C;M.__COMPILER_RUNTIME={__proto__:null,c:function(l){return C.H.useMemoCache(l)}};M.cache=function(l){return function(){return l.apply(null,arguments)}};M.cloneElement=function(l,t,u){if(l==null)throw Error("The argument must be a React element, but you passed "+l+".");var a=Yi({},l.props),n=l.key,e=void 0;if(t!=null)for(f in t.ref!==void 0&&(e=void 0),t.key!==void 0&&(n=""+t.key),t)!Gi.call(t,f)||f==="key"||f==="__self"||f==="__source"||f==="ref"&&t.ref===void 0||(a[f]=t[f]);var f=arguments.length-2;if(f===1)a.children=u;else if(1<f){for(var c=Array(f),i=0;i<f;i++)c[i]=arguments[i+2];a.children=c}return We(l.type,n,void 0,void 0,e,a)};M.createContext=function(l){return l={$$typeof:rd,_currentValue:l,_currentValue2:l,_threadCount:0,Provider:null,Consumer:null},l.Provider=l,l.Consumer={$$typeof:Od,_context:l},l};M.createElement=function(l,t,u){var a,n={},e=null;if(t!=null)for(a in t.key!==void 0&&(e=""+t.key),t)Gi.call(t,a)&&a!=="key"&&a!=="__self"&&a!=="__source"&&(n[a]=t[a]);var f=arguments.length-2;if(f===1)n.children=u;else if(1<f){for(var c=Array(f),i=0;i<f;i++)c[i]=arguments[i+2];n.children=c}if(l&&l.defaultProps)for(a in f=l.defaultProps,f)n[a]===void 0&&(n[a]=f[a]);return We(l,e,void 0,void 0,null,n)};M.createRef=function(){return{current:null}};M.forwardRef=function(l){return{$$typeof:Md,render:l}};M.isValidElement=$e;M.lazy=function(l){return{$$typeof:qi,_payload:{_status:-1,_result:l},_init:pd}};M.memo=function(l,t){return{$$typeof:Dd,type:l,compare:t===void 0?null:t}};M.startTransition=function(l){var t=C.T,u={};C.T=u;try{var a=l(),n=C.S;n!==null&&n(u,a),typeof a=="object"&&a!==null&&typeof a.then=="function"&&a.then(Yd,Hi)}catch(e){Hi(e)}finally{C.T=t}};M.unstable_useCacheRefresh=function(){return C.H.useCacheRefresh()};M.use=function(l){return C.H.use(l)};M.useActionState=function(l,t,u){return C.H.useActionState(l,t,u)};M.useCallback=function(l,t){return C.H.useCallback(l,t)};M.useContext=function(l){return C.H.useContext(l)};M.useDebugValue=function(){};M.useDeferredValue=function(l,t){return C.H.useDeferredValue(l,t)};M.useEffect=function(l,t,u){var a=C.H;if(typeof u=="function")throw Error("useEffect CRUD overload is not enabled in this build of React.");return a.useEffect(l,t)};M.useId=function(){return C.H.useId()};M.useImperativeHandle=function(l,t,u){return C.H.useImperativeHandle(l,t,u)};M.useInsertionEffect=function(l,t){return C.H.useInsertionEffect(l,t)};M.useLayoutEffect=function(l,t){return C.H.useLayoutEffect(l,t)};M.useMemo=function(l,t){return C.H.useMemo(l,t)};M.useOptimistic=function(l,t){return C.H.useOptimistic(l,t)};M.useReducer=function(l,t,u){return C.H.useReducer(l,t,u)};M.useRef=function(l){return C.H.useRef(l)};M.useState=function(l){return C.H.useState(l)};M.useSyncExternalStore=function(l,t,u){return C.H.useSyncExternalStore(l,t,u)};M.useTransition=function(){return C.H.useTransition()};M.version="19.1.1"});var zt=At((mo,Qi)=>{"use strict";Qi.exports=Xi()});var Wi=At(V=>{"use strict";function Pe(l,t){var u=l.length;l.push(t);l:for(;0<u;){var a=u-1>>>1,n=l[a];if(0<gn(n,t))l[a]=t,l[u]=n,u=a;else break l}}function Wl(l){return l.length===0?null:l[0]}function Tn(l){if(l.length===0)return null;var t=l[0],u=l.pop();if(u!==t){l[0]=u;l:for(var a=0,n=l.length,e=n>>>1;a<e;){var f=2*(a+1)-1,c=l[f],i=f+1,d=l[i];if(0>gn(c,u))i<n&&0>gn(d,c)?(l[a]=d,l[i]=u,a=i):(l[a]=c,l[f]=u,a=f);else if(i<n&&0>gn(d,u))l[a]=d,l[i]=u,a=i;else break l}}return t}function gn(l,t){var u=l.sortIndex-t.sortIndex;return u!==0?u:l.id-t.id}V.unstable_now=void 0;typeof performance=="object"&&typeof performance.now=="function"?(Zi=performance,V.unstable_now=function(){return Zi.now()}):(ke=Date,xi=ke.now(),V.unstable_now=function(){return ke.now()-xi});var Zi,ke,xi,at=[],Ot=[],Rd=1,Bl=null,sl=3,lf=!1,ya=!1,va=!1,tf=!1,Vi=typeof setTimeout=="function"?setTimeout:null,Ki=typeof clearTimeout=="function"?clearTimeout:null,ji=typeof setImmediate<"u"?setImmediate:null;function bn(l){for(var t=Wl(Ot);t!==null;){if(t.callback===null)Tn(Ot);else if(t.startTime<=l)Tn(Ot),t.sortIndex=t.expirationTime,Pe(at,t);else break;t=Wl(Ot)}}function uf(l){if(va=!1,bn(l),!ya)if(Wl(at)!==null)ya=!0,Tu||(Tu=!0,bu());else{var t=Wl(Ot);t!==null&&af(uf,t.startTime-l)}}var Tu=!1,da=-1,Li=5,Ji=-1;function wi(){return tf?!0:!(V.unstable_now()-Ji<Li)}function Fe(){if(tf=!1,Tu){var l=V.unstable_now();Ji=l;var t=!0;try{l:{ya=!1,va&&(va=!1,Ki(da),da=-1),lf=!0;var u=sl;try{t:{for(bn(l),Bl=Wl(at);Bl!==null&&!(Bl.expirationTime>l&&wi());){var a=Bl.callback;if(typeof a=="function"){Bl.callback=null,sl=Bl.priorityLevel;var n=a(Bl.expirationTime<=l);if(l=V.unstable_now(),typeof n=="function"){Bl.callback=n,bn(l),t=!0;break t}Bl===Wl(at)&&Tn(at),bn(l)}else Tn(at);Bl=Wl(at)}if(Bl!==null)t=!0;else{var e=Wl(Ot);e!==null&&af(uf,e.startTime-l),t=!1}}break l}finally{Bl=null,sl=u,lf=!1}t=void 0}}finally{t?bu():Tu=!1}}}var bu;typeof ji=="function"?bu=function(){ji(Fe)}:typeof MessageChannel<"u"?(Ie=new MessageChannel,Ci=Ie.port2,Ie.port1.onmessage=Fe,bu=function(){Ci.postMessage(null)}):bu=function(){Vi(Fe,0)};var Ie,Ci;function af(l,t){da=Vi(function(){l(V.unstable_now())},t)}V.unstable_IdlePriority=5;V.unstable_ImmediatePriority=1;V.unstable_LowPriority=4;V.unstable_NormalPriority=3;V.unstable_Profiling=null;V.unstable_UserBlockingPriority=2;V.unstable_cancelCallback=function(l){l.callback=null};V.unstable_forceFrameRate=function(l){0>l||125<l?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Li=0<l?Math.floor(1e3/l):5};V.unstable_getCurrentPriorityLevel=function(){return sl};V.unstable_next=function(l){switch(sl){case 1:case 2:case 3:var t=3;break;default:t=sl}var u=sl;sl=t;try{return l()}finally{sl=u}};V.unstable_requestPaint=function(){tf=!0};V.unstable_runWithPriority=function(l,t){switch(l){case 1:case 2:case 3:case 4:case 5:break;default:l=3}var u=sl;sl=l;try{return t()}finally{sl=u}};V.unstable_scheduleCallback=function(l,t,u){var a=V.unstable_now();switch(typeof u=="object"&&u!==null?(u=u.delay,u=typeof u=="number"&&0<u?a+u:a):u=a,l){case 1:var n=-1;break;case 2:n=250;break;case 5:n=1073741823;break;case 4:n=1e4;break;default:n=5e3}return n=u+n,l={id:Rd++,callback:t,priorityLevel:l,startTime:u,expirationTime:n,sortIndex:-1},u>a?(l.sortIndex=u,Pe(Ot,l),Wl(at)===null&&l===Wl(Ot)&&(va?(Ki(da),da=-1):va=!0,af(uf,u-a))):(l.sortIndex=n,Pe(at,l),ya||lf||(ya=!0,Tu||(Tu=!0,bu()))),l};V.unstable_shouldYield=wi;V.unstable_wrapCallback=function(l){var t=sl;return function(){var u=sl;sl=t;try{return l.apply(this,arguments)}finally{sl=u}}}});var ki=At((go,$i)=>{"use strict";$i.exports=Wi()});var Ii=At(bl=>{"use strict";var Bd=zt();function Fi(l){var t="https://react.dev/errors/"+l;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var u=2;u<arguments.length;u++)t+="&args[]="+encodeURIComponent(arguments[u])}return"Minified React error #"+l+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function rt(){}var gl={d:{f:rt,r:function(){throw Error(Fi(522))},D:rt,C:rt,L:rt,m:rt,X:rt,S:rt,M:rt},p:0,findDOMNode:null},Gd=Symbol.for("react.portal");function Xd(l,t,u){var a=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Gd,key:a==null?null:""+a,children:l,containerInfo:t,implementation:u}}var sa=Bd.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function En(l,t){if(l==="font")return"";if(typeof t=="string")return t==="use-credentials"?t:""}bl.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=gl;bl.createPortal=function(l,t){var u=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11)throw Error(Fi(299));return Xd(l,t,null,u)};bl.flushSync=function(l){var t=sa.T,u=gl.p;try{if(sa.T=null,gl.p=2,l)return l()}finally{sa.T=t,gl.p=u,gl.d.f()}};bl.preconnect=function(l,t){typeof l=="string"&&(t?(t=t.crossOrigin,t=typeof t=="string"?t==="use-credentials"?t:"":void 0):t=null,gl.d.C(l,t))};bl.prefetchDNS=function(l){typeof l=="string"&&gl.d.D(l)};bl.preinit=function(l,t){if(typeof l=="string"&&t&&typeof t.as=="string"){var u=t.as,a=En(u,t.crossOrigin),n=typeof t.integrity=="string"?t.integrity:void 0,e=typeof t.fetchPriority=="string"?t.fetchPriority:void 0;u==="style"?gl.d.S(l,typeof t.precedence=="string"?t.precedence:void 0,{crossOrigin:a,integrity:n,fetchPriority:e}):u==="script"&&gl.d.X(l,{crossOrigin:a,integrity:n,fetchPriority:e,nonce:typeof t.nonce=="string"?t.nonce:void 0})}};bl.preinitModule=function(l,t){if(typeof l=="string")if(typeof t=="object"&&t!==null){if(t.as==null||t.as==="script"){var u=En(t.as,t.crossOrigin);gl.d.M(l,{crossOrigin:u,integrity:typeof t.integrity=="string"?t.integrity:void 0,nonce:typeof t.nonce=="string"?t.nonce:void 0})}}else t==null&&gl.d.M(l)};bl.preload=function(l,t){if(typeof l=="string"&&typeof t=="object"&&t!==null&&typeof t.as=="string"){var u=t.as,a=En(u,t.crossOrigin);gl.d.L(l,u,{crossOrigin:a,integrity:typeof t.integrity=="string"?t.integrity:void 0,nonce:typeof t.nonce=="string"?t.nonce:void 0,type:typeof t.type=="string"?t.type:void 0,fetchPriority:typeof t.fetchPriority=="string"?t.fetchPriority:void 0,referrerPolicy:typeof t.referrerPolicy=="string"?t.referrerPolicy:void 0,imageSrcSet:typeof t.imageSrcSet=="string"?t.imageSrcSet:void 0,imageSizes:typeof t.imageSizes=="string"?t.imageSizes:void 0,media:typeof t.media=="string"?t.media:void 0})}};bl.preloadModule=function(l,t){if(typeof l=="string")if(t){var u=En(t.as,t.crossOrigin);gl.d.m(l,{as:typeof t.as=="string"&&t.as!=="script"?t.as:void 0,crossOrigin:u,integrity:typeof t.integrity=="string"?t.integrity:void 0})}else gl.d.m(l)};bl.requestFormReset=function(l){gl.d.r(l)};bl.unstable_batchedUpdates=function(l,t){return l(t)};bl.useFormState=function(l,t,u){return sa.H.useFormState(l,t,u)};bl.useFormStatus=function(){return sa.H.useHostTransitionStatus()};bl.version="19.1.1"});var t0=At((To,l0)=>{"use strict";function Pi(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Pi)}catch(l){console.error(l)}}Pi(),l0.exports=Ii()});var ad=At(Ce=>{"use strict";var ul=ki(),O1=zt(),Qd=t0();function b(l){var t="https://react.dev/errors/"+l;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var u=2;u<arguments.length;u++)t+="&args[]="+encodeURIComponent(arguments[u])}return"Minified React error #"+l+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function r1(l){return!(!l||l.nodeType!==1&&l.nodeType!==9&&l.nodeType!==11)}function Pa(l){var t=l,u=l;if(l.alternate)for(;t.return;)t=t.return;else{l=t;do t=l,(t.flags&4098)!==0&&(u=t.return),l=t.return;while(l)}return t.tag===3?u:null}function M1(l){if(l.tag===13){var t=l.memoizedState;if(t===null&&(l=l.alternate,l!==null&&(t=l.memoizedState)),t!==null)return t.dehydrated}return null}function u0(l){if(Pa(l)!==l)throw Error(b(188))}function Zd(l){var t=l.alternate;if(!t){if(t=Pa(l),t===null)throw Error(b(188));return t!==l?null:l}for(var u=l,a=t;;){var n=u.return;if(n===null)break;var e=n.alternate;if(e===null){if(a=n.return,a!==null){u=a;continue}break}if(n.child===e.child){for(e=n.child;e;){if(e===u)return u0(n),l;if(e===a)return u0(n),t;e=e.sibling}throw Error(b(188))}if(u.return!==a.return)u=n,a=e;else{for(var f=!1,c=n.child;c;){if(c===u){f=!0,u=n,a=e;break}if(c===a){f=!0,a=n,u=e;break}c=c.sibling}if(!f){for(c=e.child;c;){if(c===u){f=!0,u=e,a=n;break}if(c===a){f=!0,a=e,u=n;break}c=c.sibling}if(!f)throw Error(b(189))}}if(u.alternate!==a)throw Error(b(190))}if(u.tag!==3)throw Error(b(188));return u.stateNode.current===u?l:t}function _1(l){var t=l.tag;if(t===5||t===26||t===27||t===6)return l;for(l=l.child;l!==null;){if(t=_1(l),t!==null)return t;l=l.sibling}return null}var j=Object.assign,xd=Symbol.for("react.element"),An=Symbol.for("react.transitional.element"),Aa=Symbol.for("react.portal"),_u=Symbol.for("react.fragment"),D1=Symbol.for("react.strict_mode"),Gf=Symbol.for("react.profiler"),jd=Symbol.for("react.provider"),U1=Symbol.for("react.consumer"),it=Symbol.for("react.context"),qc=Symbol.for("react.forward_ref"),Xf=Symbol.for("react.suspense"),Qf=Symbol.for("react.suspense_list"),pc=Symbol.for("react.memo"),Dt=Symbol.for("react.lazy");Symbol.for("react.scope");var Zf=Symbol.for("react.activity");Symbol.for("react.legacy_hidden");Symbol.for("react.tracing_marker");var Cd=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var a0=Symbol.iterator;function ha(l){return l===null||typeof l!="object"?null:(l=a0&&l[a0]||l["@@iterator"],typeof l=="function"?l:null)}var Vd=Symbol.for("react.client.reference");function xf(l){if(l==null)return null;if(typeof l=="function")return l.$$typeof===Vd?null:l.displayName||l.name||null;if(typeof l=="string")return l;switch(l){case _u:return"Fragment";case Gf:return"Profiler";case D1:return"StrictMode";case Xf:return"Suspense";case Qf:return"SuspenseList";case Zf:return"Activity"}if(typeof l=="object")switch(l.$$typeof){case Aa:return"Portal";case it:return(l.displayName||"Context")+".Provider";case U1:return(l._context.displayName||"Context")+".Consumer";case qc:var t=l.render;return l=l.displayName,l||(l=t.displayName||t.name||"",l=l!==""?"ForwardRef("+l+")":"ForwardRef"),l;case pc:return t=l.displayName||null,t!==null?t:xf(l.type)||"Memo";case Dt:t=l._payload,l=l._init;try{return xf(l(t))}catch{}}return null}var za=Array.isArray,r=O1.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Y=Qd.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,lu={pending:!1,data:null,method:null,action:null},jf=[],Du=-1;function tt(l){return{current:l}}function cl(l){0>Du||(l.current=jf[Du],jf[Du]=null,Du--)}function L(l,t){Du++,jf[Du]=l.current,l.current=t}var Il=tt(null),Za=tt(null),Xt=tt(null),Fn=tt(null);function In(l,t){switch(L(Xt,t),L(Za,l),L(Il,null),t.nodeType){case 9:case 11:l=(l=t.documentElement)&&(l=l.namespaceURI)?y1(l):0;break;default:if(l=t.tagName,t=t.namespaceURI)t=y1(t),l=Lv(t,l);else switch(l){case"svg":l=1;break;case"math":l=2;break;default:l=0}}cl(Il),L(Il,l)}function Ju(){cl(Il),cl(Za),cl(Xt)}function Cf(l){l.memoizedState!==null&&L(Fn,l);var t=Il.current,u=Lv(t,l.type);t!==u&&(L(Za,l),L(Il,u))}function Pn(l){Za.current===l&&(cl(Il),cl(Za)),Fn.current===l&&(cl(Fn),$a._currentValue=lu)}var Vf=Object.prototype.hasOwnProperty,Yc=ul.unstable_scheduleCallback,nf=ul.unstable_cancelCallback,Kd=ul.unstable_shouldYield,Ld=ul.unstable_requestPaint,Pl=ul.unstable_now,Jd=ul.unstable_getCurrentPriorityLevel,N1=ul.unstable_ImmediatePriority,H1=ul.unstable_UserBlockingPriority,le=ul.unstable_NormalPriority,wd=ul.unstable_LowPriority,q1=ul.unstable_IdlePriority,Wd=ul.log,$d=ul.unstable_setDisableYieldValue,ln=null,Hl=null;function Yt(l){if(typeof Wd=="function"&&$d(l),Hl&&typeof Hl.setStrictMode=="function")try{Hl.setStrictMode(ln,l)}catch{}}var ql=Math.clz32?Math.clz32:Id,kd=Math.log,Fd=Math.LN2;function Id(l){return l>>>=0,l===0?32:31-(kd(l)/Fd|0)|0}var zn=256,On=4194304;function Ft(l){var t=l&42;if(t!==0)return t;switch(l&-l){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return l&4194048;case 4194304:case 8388608:case 16777216:case 33554432:return l&62914560;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return l}}function De(l,t,u){var a=l.pendingLanes;if(a===0)return 0;var n=0,e=l.suspendedLanes,f=l.pingedLanes;l=l.warmLanes;var c=a&134217727;return c!==0?(a=c&~e,a!==0?n=Ft(a):(f&=c,f!==0?n=Ft(f):u||(u=c&~l,u!==0&&(n=Ft(u))))):(c=a&~e,c!==0?n=Ft(c):f!==0?n=Ft(f):u||(u=a&~l,u!==0&&(n=Ft(u)))),n===0?0:t!==0&&t!==n&&(t&e)===0&&(e=n&-n,u=t&-t,e>=u||e===32&&(u&4194048)!==0)?t:n}function tn(l,t){return(l.pendingLanes&~(l.suspendedLanes&~l.pingedLanes)&t)===0}function Pd(l,t){switch(l){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:return-1;case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function p1(){var l=zn;return zn<<=1,(zn&4194048)===0&&(zn=256),l}function Y1(){var l=On;return On<<=1,(On&62914560)===0&&(On=4194304),l}function ef(l){for(var t=[],u=0;31>u;u++)t.push(l);return t}function un(l,t){l.pendingLanes|=t,t!==268435456&&(l.suspendedLanes=0,l.pingedLanes=0,l.warmLanes=0)}function ls(l,t,u,a,n,e){var f=l.pendingLanes;l.pendingLanes=u,l.suspendedLanes=0,l.pingedLanes=0,l.warmLanes=0,l.expiredLanes&=u,l.entangledLanes&=u,l.errorRecoveryDisabledLanes&=u,l.shellSuspendCounter=0;var c=l.entanglements,i=l.expirationTimes,d=l.hiddenUpdates;for(u=f&~u;0<u;){var m=31-ql(u),g=1<<m;c[m]=0,i[m]=-1;var h=d[m];if(h!==null)for(d[m]=null,m=0;m<h.length;m++){var o=h[m];o!==null&&(o.lane&=-536870913)}u&=~g}a!==0&&R1(l,a,0),e!==0&&n===0&&l.tag!==0&&(l.suspendedLanes|=e&~(f&~t))}function R1(l,t,u){l.pendingLanes|=t,l.suspendedLanes&=~t;var a=31-ql(t);l.entangledLanes|=t,l.entanglements[a]=l.entanglements[a]|1073741824|u&4194090}function B1(l,t){var u=l.entangledLanes|=t;for(l=l.entanglements;u;){var a=31-ql(u),n=1<<a;n&t|l[a]&t&&(l[a]|=t),u&=~n}}function Rc(l){switch(l){case 2:l=1;break;case 8:l=4;break;case 32:l=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:l=128;break;case 268435456:l=134217728;break;default:l=0}return l}function Bc(l){return l&=-l,2<l?8<l?(l&134217727)!==0?32:268435456:8:2}function G1(){var l=Y.p;return l!==0?l:(l=window.event,l===void 0?32:td(l.type))}function ts(l,t){var u=Y.p;try{return Y.p=l,t()}finally{Y.p=u}}var Wt=Math.random().toString(36).slice(2),hl="__reactFiber$"+Wt,Ol="__reactProps$"+Wt,aa="__reactContainer$"+Wt,Kf="__reactEvents$"+Wt,us="__reactListeners$"+Wt,as="__reactHandles$"+Wt,n0="__reactResources$"+Wt,an="__reactMarker$"+Wt;function Gc(l){delete l[hl],delete l[Ol],delete l[Kf],delete l[us],delete l[as]}function Uu(l){var t=l[hl];if(t)return t;for(var u=l.parentNode;u;){if(t=u[aa]||u[hl]){if(u=t.alternate,t.child!==null||u!==null&&u.child!==null)for(l=s1(l);l!==null;){if(u=l[hl])return u;l=s1(l)}return t}l=u,u=l.parentNode}return null}function na(l){if(l=l[hl]||l[aa]){var t=l.tag;if(t===5||t===6||t===13||t===26||t===27||t===3)return l}return null}function Oa(l){var t=l.tag;if(t===5||t===26||t===27||t===6)return l.stateNode;throw Error(b(33))}function Qu(l){var t=l[n0];return t||(t=l[n0]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function el(l){l[an]=!0}var X1=new Set,Q1={};function du(l,t){wu(l,t),wu(l+"Capture",t)}function wu(l,t){for(Q1[l]=t,l=0;l<t.length;l++)X1.add(t[l])}var ns=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),e0={},f0={};function es(l){return Vf.call(f0,l)?!0:Vf.call(e0,l)?!1:ns.test(l)?f0[l]=!0:(e0[l]=!0,!1)}function Qn(l,t,u){if(es(t))if(u===null)l.removeAttribute(t);else{switch(typeof u){case"undefined":case"function":case"symbol":l.removeAttribute(t);return;case"boolean":var a=t.toLowerCase().slice(0,5);if(a!=="data-"&&a!=="aria-"){l.removeAttribute(t);return}}l.setAttribute(t,""+u)}}function rn(l,t,u){if(u===null)l.removeAttribute(t);else{switch(typeof u){case"undefined":case"function":case"symbol":case"boolean":l.removeAttribute(t);return}l.setAttribute(t,""+u)}}function nt(l,t,u,a){if(a===null)l.removeAttribute(u);else{switch(typeof a){case"undefined":case"function":case"symbol":case"boolean":l.removeAttribute(u);return}l.setAttributeNS(t,u,""+a)}}var ff,c0;function Ou(l){if(ff===void 0)try{throw Error()}catch(u){var t=u.stack.trim().match(/\n( *(at )?)/);ff=t&&t[1]||"",c0=-1<u.stack.indexOf(`
    at`)?" (<anonymous>)":-1<u.stack.indexOf("@")?"@unknown:0:0":""}return`
`+ff+l+c0}var cf=!1;function yf(l,t){if(!l||cf)return"";cf=!0;var u=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var a={DetermineComponentFrameRoot:function(){try{if(t){var g=function(){throw Error()};if(Object.defineProperty(g.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(g,[])}catch(o){var h=o}Reflect.construct(l,[],g)}else{try{g.call()}catch(o){h=o}l.call(g.prototype)}}else{try{throw Error()}catch(o){h=o}(g=l())&&typeof g.catch=="function"&&g.catch(function(){})}}catch(o){if(o&&h&&typeof o.stack=="string")return[o.stack,h.stack]}return[null,null]}};a.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var n=Object.getOwnPropertyDescriptor(a.DetermineComponentFrameRoot,"name");n&&n.configurable&&Object.defineProperty(a.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var e=a.DetermineComponentFrameRoot(),f=e[0],c=e[1];if(f&&c){var i=f.split(`
`),d=c.split(`
`);for(n=a=0;a<i.length&&!i[a].includes("DetermineComponentFrameRoot");)a++;for(;n<d.length&&!d[n].includes("DetermineComponentFrameRoot");)n++;if(a===i.length||n===d.length)for(a=i.length-1,n=d.length-1;1<=a&&0<=n&&i[a]!==d[n];)n--;for(;1<=a&&0<=n;a--,n--)if(i[a]!==d[n]){if(a!==1||n!==1)do if(a--,n--,0>n||i[a]!==d[n]){var m=`
`+i[a].replace(" at new "," at ");return l.displayName&&m.includes("<anonymous>")&&(m=m.replace("<anonymous>",l.displayName)),m}while(1<=a&&0<=n);break}}}finally{cf=!1,Error.prepareStackTrace=u}return(u=l?l.displayName||l.name:"")?Ou(u):""}function fs(l){switch(l.tag){case 26:case 27:case 5:return Ou(l.type);case 16:return Ou("Lazy");case 13:return Ou("Suspense");case 19:return Ou("SuspenseList");case 0:case 15:return yf(l.type,!1);case 11:return yf(l.type.render,!1);case 1:return yf(l.type,!0);case 31:return Ou("Activity");default:return""}}function i0(l){try{var t="";do t+=fs(l),l=l.return;while(l);return t}catch(u){return`
Error generating stack: `+u.message+`
`+u.stack}}function Xl(l){switch(typeof l){case"bigint":case"boolean":case"number":case"string":case"undefined":return l;case"object":return l;default:return""}}function Z1(l){var t=l.type;return(l=l.nodeName)&&l.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function cs(l){var t=Z1(l)?"checked":"value",u=Object.getOwnPropertyDescriptor(l.constructor.prototype,t),a=""+l[t];if(!l.hasOwnProperty(t)&&typeof u<"u"&&typeof u.get=="function"&&typeof u.set=="function"){var n=u.get,e=u.set;return Object.defineProperty(l,t,{configurable:!0,get:function(){return n.call(this)},set:function(f){a=""+f,e.call(this,f)}}),Object.defineProperty(l,t,{enumerable:u.enumerable}),{getValue:function(){return a},setValue:function(f){a=""+f},stopTracking:function(){l._valueTracker=null,delete l[t]}}}}function te(l){l._valueTracker||(l._valueTracker=cs(l))}function x1(l){if(!l)return!1;var t=l._valueTracker;if(!t)return!0;var u=t.getValue(),a="";return l&&(a=Z1(l)?l.checked?"true":"false":l.value),l=a,l!==u?(t.setValue(l),!0):!1}function ue(l){if(l=l||(typeof document<"u"?document:void 0),typeof l>"u")return null;try{return l.activeElement||l.body}catch{return l.body}}var is=/[\n"\\]/g;function xl(l){return l.replace(is,function(t){return"\\"+t.charCodeAt(0).toString(16)+" "})}function Lf(l,t,u,a,n,e,f,c){l.name="",f!=null&&typeof f!="function"&&typeof f!="symbol"&&typeof f!="boolean"?l.type=f:l.removeAttribute("type"),t!=null?f==="number"?(t===0&&l.value===""||l.value!=t)&&(l.value=""+Xl(t)):l.value!==""+Xl(t)&&(l.value=""+Xl(t)):f!=="submit"&&f!=="reset"||l.removeAttribute("value"),t!=null?Jf(l,f,Xl(t)):u!=null?Jf(l,f,Xl(u)):a!=null&&l.removeAttribute("value"),n==null&&e!=null&&(l.defaultChecked=!!e),n!=null&&(l.checked=n&&typeof n!="function"&&typeof n!="symbol"),c!=null&&typeof c!="function"&&typeof c!="symbol"&&typeof c!="boolean"?l.name=""+Xl(c):l.removeAttribute("name")}function j1(l,t,u,a,n,e,f,c){if(e!=null&&typeof e!="function"&&typeof e!="symbol"&&typeof e!="boolean"&&(l.type=e),t!=null||u!=null){if(!(e!=="submit"&&e!=="reset"||t!=null))return;u=u!=null?""+Xl(u):"",t=t!=null?""+Xl(t):u,c||t===l.value||(l.value=t),l.defaultValue=t}a=a??n,a=typeof a!="function"&&typeof a!="symbol"&&!!a,l.checked=c?l.checked:!!a,l.defaultChecked=!!a,f!=null&&typeof f!="function"&&typeof f!="symbol"&&typeof f!="boolean"&&(l.name=f)}function Jf(l,t,u){t==="number"&&ue(l.ownerDocument)===l||l.defaultValue===""+u||(l.defaultValue=""+u)}function Zu(l,t,u,a){if(l=l.options,t){t={};for(var n=0;n<u.length;n++)t["$"+u[n]]=!0;for(u=0;u<l.length;u++)n=t.hasOwnProperty("$"+l[u].value),l[u].selected!==n&&(l[u].selected=n),n&&a&&(l[u].defaultSelected=!0)}else{for(u=""+Xl(u),t=null,n=0;n<l.length;n++){if(l[n].value===u){l[n].selected=!0,a&&(l[n].defaultSelected=!0);return}t!==null||l[n].disabled||(t=l[n])}t!==null&&(t.selected=!0)}}function C1(l,t,u){if(t!=null&&(t=""+Xl(t),t!==l.value&&(l.value=t),u==null)){l.defaultValue!==t&&(l.defaultValue=t);return}l.defaultValue=u!=null?""+Xl(u):""}function V1(l,t,u,a){if(t==null){if(a!=null){if(u!=null)throw Error(b(92));if(za(a)){if(1<a.length)throw Error(b(93));a=a[0]}u=a}u==null&&(u=""),t=u}u=Xl(t),l.defaultValue=u,a=l.textContent,a===u&&a!==""&&a!==null&&(l.value=a)}function Wu(l,t){if(t){var u=l.firstChild;if(u&&u===l.lastChild&&u.nodeType===3){u.nodeValue=t;return}}l.textContent=t}var ys=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function y0(l,t,u){var a=t.indexOf("--")===0;u==null||typeof u=="boolean"||u===""?a?l.setProperty(t,""):t==="float"?l.cssFloat="":l[t]="":a?l.setProperty(t,u):typeof u!="number"||u===0||ys.has(t)?t==="float"?l.cssFloat=u:l[t]=(""+u).trim():l[t]=u+"px"}function K1(l,t,u){if(t!=null&&typeof t!="object")throw Error(b(62));if(l=l.style,u!=null){for(var a in u)!u.hasOwnProperty(a)||t!=null&&t.hasOwnProperty(a)||(a.indexOf("--")===0?l.setProperty(a,""):a==="float"?l.cssFloat="":l[a]="");for(var n in t)a=t[n],t.hasOwnProperty(n)&&u[n]!==a&&y0(l,n,a)}else for(var e in t)t.hasOwnProperty(e)&&y0(l,e,t[e])}function Xc(l){if(l.indexOf("-")===-1)return!1;switch(l){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var vs=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),ds=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Zn(l){return ds.test(""+l)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":l}var wf=null;function Qc(l){return l=l.target||l.srcElement||window,l.correspondingUseElement&&(l=l.correspondingUseElement),l.nodeType===3?l.parentNode:l}var Nu=null,xu=null;function v0(l){var t=na(l);if(t&&(l=t.stateNode)){var u=l[Ol]||null;l:switch(l=t.stateNode,t.type){case"input":if(Lf(l,u.value,u.defaultValue,u.defaultValue,u.checked,u.defaultChecked,u.type,u.name),t=u.name,u.type==="radio"&&t!=null){for(u=l;u.parentNode;)u=u.parentNode;for(u=u.querySelectorAll('input[name="'+xl(""+t)+'"][type="radio"]'),t=0;t<u.length;t++){var a=u[t];if(a!==l&&a.form===l.form){var n=a[Ol]||null;if(!n)throw Error(b(90));Lf(a,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name)}}for(t=0;t<u.length;t++)a=u[t],a.form===l.form&&x1(a)}break l;case"textarea":C1(l,u.value,u.defaultValue);break l;case"select":t=u.value,t!=null&&Zu(l,!!u.multiple,t,!1)}}}var vf=!1;function L1(l,t,u){if(vf)return l(t,u);vf=!0;try{var a=l(t);return a}finally{if(vf=!1,(Nu!==null||xu!==null)&&(Xe(),Nu&&(t=Nu,l=xu,xu=Nu=null,v0(t),l)))for(t=0;t<l.length;t++)v0(l[t])}}function xa(l,t){var u=l.stateNode;if(u===null)return null;var a=u[Ol]||null;if(a===null)return null;u=a[t];l:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(l=l.type,a=!(l==="button"||l==="input"||l==="select"||l==="textarea")),l=!a;break l;default:l=!1}if(l)return null;if(u&&typeof u!="function")throw Error(b(231,t,typeof u));return u}var mt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Wf=!1;if(mt)try{Eu={},Object.defineProperty(Eu,"passive",{get:function(){Wf=!0}}),window.addEventListener("test",Eu,Eu),window.removeEventListener("test",Eu,Eu)}catch{Wf=!1}var Eu,Rt=null,Zc=null,xn=null;function J1(){if(xn)return xn;var l,t=Zc,u=t.length,a,n="value"in Rt?Rt.value:Rt.textContent,e=n.length;for(l=0;l<u&&t[l]===n[l];l++);var f=u-l;for(a=1;a<=f&&t[u-a]===n[e-a];a++);return xn=n.slice(l,1<a?1-a:void 0)}function jn(l){var t=l.keyCode;return"charCode"in l?(l=l.charCode,l===0&&t===13&&(l=13)):l=t,l===10&&(l=13),32<=l||l===13?l:0}function Mn(){return!0}function d0(){return!1}function rl(l){function t(u,a,n,e,f){this._reactName=u,this._targetInst=n,this.type=a,this.nativeEvent=e,this.target=f,this.currentTarget=null;for(var c in l)l.hasOwnProperty(c)&&(u=l[c],this[c]=u?u(e):e[c]);return this.isDefaultPrevented=(e.defaultPrevented!=null?e.defaultPrevented:e.returnValue===!1)?Mn:d0,this.isPropagationStopped=d0,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var u=this.nativeEvent;u&&(u.preventDefault?u.preventDefault():typeof u.returnValue!="unknown"&&(u.returnValue=!1),this.isDefaultPrevented=Mn)},stopPropagation:function(){var u=this.nativeEvent;u&&(u.stopPropagation?u.stopPropagation():typeof u.cancelBubble!="unknown"&&(u.cancelBubble=!0),this.isPropagationStopped=Mn)},persist:function(){},isPersistent:Mn}),t}var su={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(l){return l.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Ue=rl(su),nn=j({},su,{view:0,detail:0}),ss=rl(nn),df,sf,oa,Ne=j({},nn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xc,button:0,buttons:0,relatedTarget:function(l){return l.relatedTarget===void 0?l.fromElement===l.srcElement?l.toElement:l.fromElement:l.relatedTarget},movementX:function(l){return"movementX"in l?l.movementX:(l!==oa&&(oa&&l.type==="mousemove"?(df=l.screenX-oa.screenX,sf=l.screenY-oa.screenY):sf=df=0,oa=l),df)},movementY:function(l){return"movementY"in l?l.movementY:sf}}),s0=rl(Ne),hs=j({},Ne,{dataTransfer:0}),os=rl(hs),ms=j({},nn,{relatedTarget:0}),hf=rl(ms),Ss=j({},su,{animationName:0,elapsedTime:0,pseudoElement:0}),gs=rl(Ss),bs=j({},su,{clipboardData:function(l){return"clipboardData"in l?l.clipboardData:window.clipboardData}}),Ts=rl(bs),Es=j({},su,{data:0}),h0=rl(Es),As={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},zs={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Os={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function rs(l){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(l):(l=Os[l])?!!t[l]:!1}function xc(){return rs}var Ms=j({},nn,{key:function(l){if(l.key){var t=As[l.key]||l.key;if(t!=="Unidentified")return t}return l.type==="keypress"?(l=jn(l),l===13?"Enter":String.fromCharCode(l)):l.type==="keydown"||l.type==="keyup"?zs[l.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xc,charCode:function(l){return l.type==="keypress"?jn(l):0},keyCode:function(l){return l.type==="keydown"||l.type==="keyup"?l.keyCode:0},which:function(l){return l.type==="keypress"?jn(l):l.type==="keydown"||l.type==="keyup"?l.keyCode:0}}),_s=rl(Ms),Ds=j({},Ne,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),o0=rl(Ds),Us=j({},nn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xc}),Ns=rl(Us),Hs=j({},su,{propertyName:0,elapsedTime:0,pseudoElement:0}),qs=rl(Hs),ps=j({},Ne,{deltaX:function(l){return"deltaX"in l?l.deltaX:"wheelDeltaX"in l?-l.wheelDeltaX:0},deltaY:function(l){return"deltaY"in l?l.deltaY:"wheelDeltaY"in l?-l.wheelDeltaY:"wheelDelta"in l?-l.wheelDelta:0},deltaZ:0,deltaMode:0}),Ys=rl(ps),Rs=j({},su,{newState:0,oldState:0}),Bs=rl(Rs),Gs=[9,13,27,32],jc=mt&&"CompositionEvent"in window,Ma=null;mt&&"documentMode"in document&&(Ma=document.documentMode);var Xs=mt&&"TextEvent"in window&&!Ma,w1=mt&&(!jc||Ma&&8<Ma&&11>=Ma),m0=" ",S0=!1;function W1(l,t){switch(l){case"keyup":return Gs.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $1(l){return l=l.detail,typeof l=="object"&&"data"in l?l.data:null}var Hu=!1;function Qs(l,t){switch(l){case"compositionend":return $1(t);case"keypress":return t.which!==32?null:(S0=!0,m0);case"textInput":return l=t.data,l===m0&&S0?null:l;default:return null}}function Zs(l,t){if(Hu)return l==="compositionend"||!jc&&W1(l,t)?(l=J1(),xn=Zc=Rt=null,Hu=!1,l):null;switch(l){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return w1&&t.locale!=="ko"?null:t.data;default:return null}}var xs={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function g0(l){var t=l&&l.nodeName&&l.nodeName.toLowerCase();return t==="input"?!!xs[l.type]:t==="textarea"}function k1(l,t,u,a){Nu?xu?xu.push(a):xu=[a]:Nu=a,t=Ee(t,"onChange"),0<t.length&&(u=new Ue("onChange","change",null,u,a),l.push({event:u,listeners:t}))}var _a=null,ja=null;function js(l){Cv(l,0)}function He(l){var t=Oa(l);if(x1(t))return l}function b0(l,t){if(l==="change")return t}var F1=!1;mt&&(mt?(Dn="oninput"in document,Dn||(of=document.createElement("div"),of.setAttribute("oninput","return;"),Dn=typeof of.oninput=="function"),_n=Dn):_n=!1,F1=_n&&(!document.documentMode||9<document.documentMode));var _n,Dn,of;function T0(){_a&&(_a.detachEvent("onpropertychange",I1),ja=_a=null)}function I1(l){if(l.propertyName==="value"&&He(ja)){var t=[];k1(t,ja,l,Qc(l)),L1(js,t)}}function Cs(l,t,u){l==="focusin"?(T0(),_a=t,ja=u,_a.attachEvent("onpropertychange",I1)):l==="focusout"&&T0()}function Vs(l){if(l==="selectionchange"||l==="keyup"||l==="keydown")return He(ja)}function Ks(l,t){if(l==="click")return He(t)}function Ls(l,t){if(l==="input"||l==="change")return He(t)}function Js(l,t){return l===t&&(l!==0||1/l===1/t)||l!==l&&t!==t}var Rl=typeof Object.is=="function"?Object.is:Js;function Ca(l,t){if(Rl(l,t))return!0;if(typeof l!="object"||l===null||typeof t!="object"||t===null)return!1;var u=Object.keys(l),a=Object.keys(t);if(u.length!==a.length)return!1;for(a=0;a<u.length;a++){var n=u[a];if(!Vf.call(t,n)||!Rl(l[n],t[n]))return!1}return!0}function E0(l){for(;l&&l.firstChild;)l=l.firstChild;return l}function A0(l,t){var u=E0(l);l=0;for(var a;u;){if(u.nodeType===3){if(a=l+u.textContent.length,l<=t&&a>=t)return{node:u,offset:t-l};l=a}l:{for(;u;){if(u.nextSibling){u=u.nextSibling;break l}u=u.parentNode}u=void 0}u=E0(u)}}function P1(l,t){return l&&t?l===t?!0:l&&l.nodeType===3?!1:t&&t.nodeType===3?P1(l,t.parentNode):"contains"in l?l.contains(t):l.compareDocumentPosition?!!(l.compareDocumentPosition(t)&16):!1:!1}function ly(l){l=l!=null&&l.ownerDocument!=null&&l.ownerDocument.defaultView!=null?l.ownerDocument.defaultView:window;for(var t=ue(l.document);t instanceof l.HTMLIFrameElement;){try{var u=typeof t.contentWindow.location.href=="string"}catch{u=!1}if(u)l=t.contentWindow;else break;t=ue(l.document)}return t}function Cc(l){var t=l&&l.nodeName&&l.nodeName.toLowerCase();return t&&(t==="input"&&(l.type==="text"||l.type==="search"||l.type==="tel"||l.type==="url"||l.type==="password")||t==="textarea"||l.contentEditable==="true")}var ws=mt&&"documentMode"in document&&11>=document.documentMode,qu=null,$f=null,Da=null,kf=!1;function z0(l,t,u){var a=u.window===u?u.document:u.nodeType===9?u:u.ownerDocument;kf||qu==null||qu!==ue(a)||(a=qu,"selectionStart"in a&&Cc(a)?a={start:a.selectionStart,end:a.selectionEnd}:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection(),a={anchorNode:a.anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset}),Da&&Ca(Da,a)||(Da=a,a=Ee($f,"onSelect"),0<a.length&&(t=new Ue("onSelect","select",null,t,u),l.push({event:t,listeners:a}),t.target=qu)))}function kt(l,t){var u={};return u[l.toLowerCase()]=t.toLowerCase(),u["Webkit"+l]="webkit"+t,u["Moz"+l]="moz"+t,u}var pu={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionrun:kt("Transition","TransitionRun"),transitionstart:kt("Transition","TransitionStart"),transitioncancel:kt("Transition","TransitionCancel"),transitionend:kt("Transition","TransitionEnd")},mf={},ty={};mt&&(ty=document.createElement("div").style,"AnimationEvent"in window||(delete pu.animationend.animation,delete pu.animationiteration.animation,delete pu.animationstart.animation),"TransitionEvent"in window||delete pu.transitionend.transition);function hu(l){if(mf[l])return mf[l];if(!pu[l])return l;var t=pu[l],u;for(u in t)if(t.hasOwnProperty(u)&&u in ty)return mf[l]=t[u];return l}var uy=hu("animationend"),ay=hu("animationiteration"),ny=hu("animationstart"),Ws=hu("transitionrun"),$s=hu("transitionstart"),ks=hu("transitioncancel"),ey=hu("transitionend"),fy=new Map,Ff="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");Ff.push("scrollEnd");function wl(l,t){fy.set(l,t),du(t,[l])}var O0=new WeakMap;function jl(l,t){if(typeof l=="object"&&l!==null){var u=O0.get(l);return u!==void 0?u:(t={value:l,source:t,stack:i0(t)},O0.set(l,t),t)}return{value:l,source:t,stack:i0(t)}}var Gl=[],Yu=0,Vc=0;function qe(){for(var l=Yu,t=Vc=Yu=0;t<l;){var u=Gl[t];Gl[t++]=null;var a=Gl[t];Gl[t++]=null;var n=Gl[t];Gl[t++]=null;var e=Gl[t];if(Gl[t++]=null,a!==null&&n!==null){var f=a.pending;f===null?n.next=n:(n.next=f.next,f.next=n),a.pending=n}e!==0&&cy(u,n,e)}}function pe(l,t,u,a){Gl[Yu++]=l,Gl[Yu++]=t,Gl[Yu++]=u,Gl[Yu++]=a,Vc|=a,l.lanes|=a,l=l.alternate,l!==null&&(l.lanes|=a)}function Kc(l,t,u,a){return pe(l,t,u,a),ae(l)}function ea(l,t){return pe(l,null,null,t),ae(l)}function cy(l,t,u){l.lanes|=u;var a=l.alternate;a!==null&&(a.lanes|=u);for(var n=!1,e=l.return;e!==null;)e.childLanes|=u,a=e.alternate,a!==null&&(a.childLanes|=u),e.tag===22&&(l=e.stateNode,l===null||l._visibility&1||(n=!0)),l=e,e=e.return;return l.tag===3?(e=l.stateNode,n&&t!==null&&(n=31-ql(u),l=e.hiddenUpdates,a=l[n],a===null?l[n]=[t]:a.push(t),t.lane=u|536870912),e):null}function ae(l){if(50<Xa)throw Xa=0,bc=null,Error(b(185));for(var t=l.return;t!==null;)l=t,t=l.return;return l.tag===3?l.stateNode:null}var Ru={};function Fs(l,t,u,a){this.tag=l,this.key=u,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Nl(l,t,u,a){return new Fs(l,t,u,a)}function Lc(l){return l=l.prototype,!(!l||!l.isReactComponent)}function ht(l,t){var u=l.alternate;return u===null?(u=Nl(l.tag,t,l.key,l.mode),u.elementType=l.elementType,u.type=l.type,u.stateNode=l.stateNode,u.alternate=l,l.alternate=u):(u.pendingProps=t,u.type=l.type,u.flags=0,u.subtreeFlags=0,u.deletions=null),u.flags=l.flags&65011712,u.childLanes=l.childLanes,u.lanes=l.lanes,u.child=l.child,u.memoizedProps=l.memoizedProps,u.memoizedState=l.memoizedState,u.updateQueue=l.updateQueue,t=l.dependencies,u.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},u.sibling=l.sibling,u.index=l.index,u.ref=l.ref,u.refCleanup=l.refCleanup,u}function iy(l,t){l.flags&=65011714;var u=l.alternate;return u===null?(l.childLanes=0,l.lanes=t,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,t=u.dependencies,l.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),l}function Cn(l,t,u,a,n,e){var f=0;if(a=l,typeof l=="function")Lc(l)&&(f=1);else if(typeof l=="string")f=Fh(l,u,Il.current)?26:l==="html"||l==="head"||l==="body"?27:5;else l:switch(l){case Zf:return l=Nl(31,u,t,n),l.elementType=Zf,l.lanes=e,l;case _u:return tu(u.children,n,e,t);case D1:f=8,n|=24;break;case Gf:return l=Nl(12,u,t,n|2),l.elementType=Gf,l.lanes=e,l;case Xf:return l=Nl(13,u,t,n),l.elementType=Xf,l.lanes=e,l;case Qf:return l=Nl(19,u,t,n),l.elementType=Qf,l.lanes=e,l;default:if(typeof l=="object"&&l!==null)switch(l.$$typeof){case jd:case it:f=10;break l;case U1:f=9;break l;case qc:f=11;break l;case pc:f=14;break l;case Dt:f=16,a=null;break l}f=29,u=Error(b(130,l===null?"null":typeof l,"")),a=null}return t=Nl(f,u,t,n),t.elementType=l,t.type=a,t.lanes=e,t}function tu(l,t,u,a){return l=Nl(7,l,a,t),l.lanes=u,l}function Sf(l,t,u){return l=Nl(6,l,null,t),l.lanes=u,l}function gf(l,t,u){return t=Nl(4,l.children!==null?l.children:[],l.key,t),t.lanes=u,t.stateNode={containerInfo:l.containerInfo,pendingChildren:null,implementation:l.implementation},t}var Bu=[],Gu=0,ne=null,ee=0,Ql=[],Zl=0,uu=null,yt=1,vt="";function It(l,t){Bu[Gu++]=ee,Bu[Gu++]=ne,ne=l,ee=t}function yy(l,t,u){Ql[Zl++]=yt,Ql[Zl++]=vt,Ql[Zl++]=uu,uu=l;var a=yt;l=vt;var n=32-ql(a)-1;a&=~(1<<n),u+=1;var e=32-ql(t)+n;if(30<e){var f=n-n%5;e=(a&(1<<f)-1).toString(32),a>>=f,n-=f,yt=1<<32-ql(t)+n|u<<n|a,vt=e+l}else yt=1<<e|u<<n|a,vt=l}function Jc(l){l.return!==null&&(It(l,1),yy(l,1,0))}function wc(l){for(;l===ne;)ne=Bu[--Gu],Bu[Gu]=null,ee=Bu[--Gu],Bu[Gu]=null;for(;l===uu;)uu=Ql[--Zl],Ql[Zl]=null,vt=Ql[--Zl],Ql[Zl]=null,yt=Ql[--Zl],Ql[Zl]=null}var Tl=null,W=null,p=!1,au=null,kl=!1,If=Error(b(519));function cu(l){var t=Error(b(418,""));throw Va(jl(t,l)),If}function r0(l){var t=l.stateNode,u=l.type,a=l.memoizedProps;switch(t[hl]=l,t[Ol]=a,u){case"dialog":U("cancel",t),U("close",t);break;case"iframe":case"object":case"embed":U("load",t);break;case"video":case"audio":for(u=0;u<Ja.length;u++)U(Ja[u],t);break;case"source":U("error",t);break;case"img":case"image":case"link":U("error",t),U("load",t);break;case"details":U("toggle",t);break;case"input":U("invalid",t),j1(t,a.value,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name,!0),te(t);break;case"select":U("invalid",t);break;case"textarea":U("invalid",t),V1(t,a.value,a.defaultValue,a.children),te(t)}u=a.children,typeof u!="string"&&typeof u!="number"&&typeof u!="bigint"||t.textContent===""+u||a.suppressHydrationWarning===!0||Kv(t.textContent,u)?(a.popover!=null&&(U("beforetoggle",t),U("toggle",t)),a.onScroll!=null&&U("scroll",t),a.onScrollEnd!=null&&U("scrollend",t),a.onClick!=null&&(t.onclick=xe),t=!0):t=!1,t||cu(l)}function M0(l){for(Tl=l.return;Tl;)switch(Tl.tag){case 5:case 13:kl=!1;return;case 27:case 3:kl=!0;return;default:Tl=Tl.return}}function ma(l){if(l!==Tl)return!1;if(!p)return M0(l),p=!0,!1;var t=l.tag,u;if((u=t!==3&&t!==27)&&((u=t===5)&&(u=l.type,u=!(u!=="form"&&u!=="button")||rc(l.type,l.memoizedProps)),u=!u),u&&W&&cu(l),M0(l),t===13){if(l=l.memoizedState,l=l!==null?l.dehydrated:null,!l)throw Error(b(317));l:{for(l=l.nextSibling,t=0;l;){if(l.nodeType===8)if(u=l.data,u==="/$"){if(t===0){W=Jl(l.nextSibling);break l}t--}else u!=="$"&&u!=="$!"&&u!=="$?"||t++;l=l.nextSibling}W=null}}else t===27?(t=W,$t(l.type)?(l=Dc,Dc=null,W=l):W=t):W=Tl?Jl(l.stateNode.nextSibling):null;return!0}function en(){W=Tl=null,p=!1}function _0(){var l=au;return l!==null&&(zl===null?zl=l:zl.push.apply(zl,l),au=null),l}function Va(l){au===null?au=[l]:au.push(l)}var Pf=tt(null),ou=null,dt=null;function Nt(l,t,u){L(Pf,t._currentValue),t._currentValue=u}function ot(l){l._currentValue=Pf.current,cl(Pf)}function lc(l,t,u){for(;l!==null;){var a=l.alternate;if((l.childLanes&t)!==t?(l.childLanes|=t,a!==null&&(a.childLanes|=t)):a!==null&&(a.childLanes&t)!==t&&(a.childLanes|=t),l===u)break;l=l.return}}function tc(l,t,u,a){var n=l.child;for(n!==null&&(n.return=l);n!==null;){var e=n.dependencies;if(e!==null){var f=n.child;e=e.firstContext;l:for(;e!==null;){var c=e;e=n;for(var i=0;i<t.length;i++)if(c.context===t[i]){e.lanes|=u,c=e.alternate,c!==null&&(c.lanes|=u),lc(e.return,u,l),a||(f=null);break l}e=c.next}}else if(n.tag===18){if(f=n.return,f===null)throw Error(b(341));f.lanes|=u,e=f.alternate,e!==null&&(e.lanes|=u),lc(f,u,l),f=null}else f=n.child;if(f!==null)f.return=n;else for(f=n;f!==null;){if(f===l){f=null;break}if(n=f.sibling,n!==null){n.return=f.return,f=n;break}f=f.return}n=f}}function fn(l,t,u,a){l=null;for(var n=t,e=!1;n!==null;){if(!e){if((n.flags&524288)!==0)e=!0;else if((n.flags&262144)!==0)break}if(n.tag===10){var f=n.alternate;if(f===null)throw Error(b(387));if(f=f.memoizedProps,f!==null){var c=n.type;Rl(n.pendingProps.value,f.value)||(l!==null?l.push(c):l=[c])}}else if(n===Fn.current){if(f=n.alternate,f===null)throw Error(b(387));f.memoizedState.memoizedState!==n.memoizedState.memoizedState&&(l!==null?l.push($a):l=[$a])}n=n.return}l!==null&&tc(t,l,u,a),t.flags|=262144}function fe(l){for(l=l.firstContext;l!==null;){if(!Rl(l.context._currentValue,l.memoizedValue))return!0;l=l.next}return!1}function iu(l){ou=l,dt=null,l=l.dependencies,l!==null&&(l.firstContext=null)}function ol(l){return vy(ou,l)}function Un(l,t){return ou===null&&iu(l),vy(l,t)}function vy(l,t){var u=t._currentValue;if(t={context:t,memoizedValue:u,next:null},dt===null){if(l===null)throw Error(b(308));dt=t,l.dependencies={lanes:0,firstContext:t},l.flags|=524288}else dt=dt.next=t;return u}var Is=typeof AbortController<"u"?AbortController:function(){var l=[],t=this.signal={aborted:!1,addEventListener:function(u,a){l.push(a)}};this.abort=function(){t.aborted=!0,l.forEach(function(u){return u()})}},Ps=ul.unstable_scheduleCallback,lh=ul.unstable_NormalPriority,ll={$$typeof:it,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Wc(){return{controller:new Is,data:new Map,refCount:0}}function cn(l){l.refCount--,l.refCount===0&&Ps(lh,function(){l.controller.abort()})}var Ua=null,uc=0,$u=0,ju=null;function th(l,t){if(Ua===null){var u=Ua=[];uc=0,$u=gi(),ju={status:"pending",value:void 0,then:function(a){u.push(a)}}}return uc++,t.then(D0,D0),t}function D0(){if(--uc===0&&Ua!==null){ju!==null&&(ju.status="fulfilled");var l=Ua;Ua=null,$u=0,ju=null;for(var t=0;t<l.length;t++)(0,l[t])()}}function uh(l,t){var u=[],a={status:"pending",value:null,reason:null,then:function(n){u.push(n)}};return l.then(function(){a.status="fulfilled",a.value=t;for(var n=0;n<u.length;n++)(0,u[n])(t)},function(n){for(a.status="rejected",a.reason=n,n=0;n<u.length;n++)(0,u[n])(void 0)}),a}var U0=r.S;r.S=function(l,t){typeof t=="object"&&t!==null&&typeof t.then=="function"&&th(l,t),U0!==null&&U0(l,t)};var nu=tt(null);function $c(){var l=nu.current;return l!==null?l:x.pooledCache}function Vn(l,t){t===null?L(nu,nu.current):L(nu,t.pool)}function dy(){var l=$c();return l===null?null:{parent:ll._currentValue,pool:l}}var yn=Error(b(460)),sy=Error(b(474)),Ye=Error(b(542)),ac={then:function(){}};function N0(l){return l=l.status,l==="fulfilled"||l==="rejected"}function Nn(){}function hy(l,t,u){switch(u=l[u],u===void 0?l.push(t):u!==t&&(t.then(Nn,Nn),t=u),t.status){case"fulfilled":return t.value;case"rejected":throw l=t.reason,q0(l),l;default:if(typeof t.status=="string")t.then(Nn,Nn);else{if(l=x,l!==null&&100<l.shellSuspendCounter)throw Error(b(482));l=t,l.status="pending",l.then(function(a){if(t.status==="pending"){var n=t;n.status="fulfilled",n.value=a}},function(a){if(t.status==="pending"){var n=t;n.status="rejected",n.reason=a}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw l=t.reason,q0(l),l}throw Na=t,yn}}var Na=null;function H0(){if(Na===null)throw Error(b(459));var l=Na;return Na=null,l}function q0(l){if(l===yn||l===Ye)throw Error(b(483))}var Ut=!1;function kc(l){l.updateQueue={baseState:l.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function nc(l,t){l=l.updateQueue,t.updateQueue===l&&(t.updateQueue={baseState:l.baseState,firstBaseUpdate:l.firstBaseUpdate,lastBaseUpdate:l.lastBaseUpdate,shared:l.shared,callbacks:null})}function Qt(l){return{lane:l,tag:0,payload:null,callback:null,next:null}}function Zt(l,t,u){var a=l.updateQueue;if(a===null)return null;if(a=a.shared,(B&2)!==0){var n=a.pending;return n===null?t.next=t:(t.next=n.next,n.next=t),a.pending=t,t=ae(l),cy(l,null,u),t}return pe(l,a,t,u),ae(l)}function Ha(l,t,u){if(t=t.updateQueue,t!==null&&(t=t.shared,(u&4194048)!==0)){var a=t.lanes;a&=l.pendingLanes,u|=a,t.lanes=u,B1(l,u)}}function bf(l,t){var u=l.updateQueue,a=l.alternate;if(a!==null&&(a=a.updateQueue,u===a)){var n=null,e=null;if(u=u.firstBaseUpdate,u!==null){do{var f={lane:u.lane,tag:u.tag,payload:u.payload,callback:null,next:null};e===null?n=e=f:e=e.next=f,u=u.next}while(u!==null);e===null?n=e=t:e=e.next=t}else n=e=t;u={baseState:a.baseState,firstBaseUpdate:n,lastBaseUpdate:e,shared:a.shared,callbacks:a.callbacks},l.updateQueue=u;return}l=u.lastBaseUpdate,l===null?u.firstBaseUpdate=t:l.next=t,u.lastBaseUpdate=t}var ec=!1;function qa(){if(ec){var l=ju;if(l!==null)throw l}}function pa(l,t,u,a){ec=!1;var n=l.updateQueue;Ut=!1;var e=n.firstBaseUpdate,f=n.lastBaseUpdate,c=n.shared.pending;if(c!==null){n.shared.pending=null;var i=c,d=i.next;i.next=null,f===null?e=d:f.next=d,f=i;var m=l.alternate;m!==null&&(m=m.updateQueue,c=m.lastBaseUpdate,c!==f&&(c===null?m.firstBaseUpdate=d:c.next=d,m.lastBaseUpdate=i))}if(e!==null){var g=n.baseState;f=0,m=d=i=null,c=e;do{var h=c.lane&-536870913,o=h!==c.lane;if(o?(H&h)===h:(a&h)===h){h!==0&&h===$u&&(ec=!0),m!==null&&(m=m.next={lane:0,tag:c.tag,payload:c.payload,callback:null,next:null});l:{var O=l,A=c;h=t;var G=u;switch(A.tag){case 1:if(O=A.payload,typeof O=="function"){g=O.call(G,g,h);break l}g=O;break l;case 3:O.flags=O.flags&-65537|128;case 0:if(O=A.payload,h=typeof O=="function"?O.call(G,g,h):O,h==null)break l;g=j({},g,h);break l;case 2:Ut=!0}}h=c.callback,h!==null&&(l.flags|=64,o&&(l.flags|=8192),o=n.callbacks,o===null?n.callbacks=[h]:o.push(h))}else o={lane:h,tag:c.tag,payload:c.payload,callback:c.callback,next:null},m===null?(d=m=o,i=g):m=m.next=o,f|=h;if(c=c.next,c===null){if(c=n.shared.pending,c===null)break;o=c,c=o.next,o.next=null,n.lastBaseUpdate=o,n.shared.pending=null}}while(!0);m===null&&(i=g),n.baseState=i,n.firstBaseUpdate=d,n.lastBaseUpdate=m,e===null&&(n.shared.lanes=0),wt|=f,l.lanes=f,l.memoizedState=g}}function oy(l,t){if(typeof l!="function")throw Error(b(191,l));l.call(t)}function my(l,t){var u=l.callbacks;if(u!==null)for(l.callbacks=null,l=0;l<u.length;l++)oy(u[l],t)}var ku=tt(null),ce=tt(0);function p0(l,t){l=bt,L(ce,l),L(ku,t),bt=l|t.baseLanes}function fc(){L(ce,bt),L(ku,ku.current)}function Fc(){bt=ce.current,cl(ku),cl(ce)}var Lt=0,_=null,Q=null,I=null,ie=!1,Cu=!1,yu=!1,ye=0,Ka=0,Vu=null,ah=0;function k(){throw Error(b(321))}function Ic(l,t){if(t===null)return!1;for(var u=0;u<t.length&&u<l.length;u++)if(!Rl(l[u],t[u]))return!1;return!0}function Pc(l,t,u,a,n,e){return Lt=e,_=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,r.H=l===null||l.memoizedState===null?Jy:wy,yu=!1,e=u(a,n),yu=!1,Cu&&(e=gy(t,u,a,n)),Sy(l),e}function Sy(l){r.H=ve;var t=Q!==null&&Q.next!==null;if(Lt=0,I=Q=_=null,ie=!1,Ka=0,Vu=null,t)throw Error(b(300));l===null||fl||(l=l.dependencies,l!==null&&fe(l)&&(fl=!0))}function gy(l,t,u,a){_=l;var n=0;do{if(Cu&&(Vu=null),Ka=0,Cu=!1,25<=n)throw Error(b(301));if(n+=1,I=Q=null,l.updateQueue!=null){var e=l.updateQueue;e.lastEffect=null,e.events=null,e.stores=null,e.memoCache!=null&&(e.memoCache.index=0)}r.H=vh,e=t(u,a)}while(Cu);return e}function nh(){var l=r.H,t=l.useState()[0];return t=typeof t.then=="function"?vn(t):t,l=l.useState()[0],(Q!==null?Q.memoizedState:null)!==l&&(_.flags|=1024),t}function li(){var l=ye!==0;return ye=0,l}function ti(l,t,u){t.updateQueue=l.updateQueue,t.flags&=-2053,l.lanes&=~u}function ui(l){if(ie){for(l=l.memoizedState;l!==null;){var t=l.queue;t!==null&&(t.pending=null),l=l.next}ie=!1}Lt=0,I=Q=_=null,Cu=!1,Ka=ye=0,Vu=null}function El(){var l={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return I===null?_.memoizedState=I=l:I=I.next=l,I}function P(){if(Q===null){var l=_.alternate;l=l!==null?l.memoizedState:null}else l=Q.next;var t=I===null?_.memoizedState:I.next;if(t!==null)I=t,Q=l;else{if(l===null)throw _.alternate===null?Error(b(467)):Error(b(310));Q=l,l={memoizedState:Q.memoizedState,baseState:Q.baseState,baseQueue:Q.baseQueue,queue:Q.queue,next:null},I===null?_.memoizedState=I=l:I=I.next=l}return I}function ai(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function vn(l){var t=Ka;return Ka+=1,Vu===null&&(Vu=[]),l=hy(Vu,l,t),t=_,(I===null?t.memoizedState:I.next)===null&&(t=t.alternate,r.H=t===null||t.memoizedState===null?Jy:wy),l}function Re(l){if(l!==null&&typeof l=="object"){if(typeof l.then=="function")return vn(l);if(l.$$typeof===it)return ol(l)}throw Error(b(438,String(l)))}function ni(l){var t=null,u=_.updateQueue;if(u!==null&&(t=u.memoCache),t==null){var a=_.alternate;a!==null&&(a=a.updateQueue,a!==null&&(a=a.memoCache,a!=null&&(t={data:a.data.map(function(n){return n.slice()}),index:0})))}if(t==null&&(t={data:[],index:0}),u===null&&(u=ai(),_.updateQueue=u),u.memoCache=t,u=t.data[t.index],u===void 0)for(u=t.data[t.index]=Array(l),a=0;a<l;a++)u[a]=Cd;return t.index++,u}function St(l,t){return typeof t=="function"?t(l):t}function Kn(l){var t=P();return ei(t,Q,l)}function ei(l,t,u){var a=l.queue;if(a===null)throw Error(b(311));a.lastRenderedReducer=u;var n=l.baseQueue,e=a.pending;if(e!==null){if(n!==null){var f=n.next;n.next=e.next,e.next=f}t.baseQueue=n=e,a.pending=null}if(e=l.baseState,n===null)l.memoizedState=e;else{t=n.next;var c=f=null,i=null,d=t,m=!1;do{var g=d.lane&-536870913;if(g!==d.lane?(H&g)===g:(Lt&g)===g){var h=d.revertLane;if(h===0)i!==null&&(i=i.next={lane:0,revertLane:0,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null}),g===$u&&(m=!0);else if((Lt&h)===h){d=d.next,h===$u&&(m=!0);continue}else g={lane:0,revertLane:d.revertLane,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null},i===null?(c=i=g,f=e):i=i.next=g,_.lanes|=h,wt|=h;g=d.action,yu&&u(e,g),e=d.hasEagerState?d.eagerState:u(e,g)}else h={lane:g,revertLane:d.revertLane,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null},i===null?(c=i=h,f=e):i=i.next=h,_.lanes|=g,wt|=g;d=d.next}while(d!==null&&d!==t);if(i===null?f=e:i.next=c,!Rl(e,l.memoizedState)&&(fl=!0,m&&(u=ju,u!==null)))throw u;l.memoizedState=e,l.baseState=f,l.baseQueue=i,a.lastRenderedState=e}return n===null&&(a.lanes=0),[l.memoizedState,a.dispatch]}function Tf(l){var t=P(),u=t.queue;if(u===null)throw Error(b(311));u.lastRenderedReducer=l;var a=u.dispatch,n=u.pending,e=t.memoizedState;if(n!==null){u.pending=null;var f=n=n.next;do e=l(e,f.action),f=f.next;while(f!==n);Rl(e,t.memoizedState)||(fl=!0),t.memoizedState=e,t.baseQueue===null&&(t.baseState=e),u.lastRenderedState=e}return[e,a]}function by(l,t,u){var a=_,n=P(),e=p;if(e){if(u===void 0)throw Error(b(407));u=u()}else u=t();var f=!Rl((Q||n).memoizedState,u);f&&(n.memoizedState=u,fl=!0),n=n.queue;var c=Ay.bind(null,a,n,l);if(dn(2048,8,c,[l]),n.getSnapshot!==t||f||I!==null&&I.memoizedState.tag&1){if(a.flags|=2048,Fu(9,Be(),Ey.bind(null,a,n,u,t),null),x===null)throw Error(b(349));e||(Lt&124)!==0||Ty(a,t,u)}return u}function Ty(l,t,u){l.flags|=16384,l={getSnapshot:t,value:u},t=_.updateQueue,t===null?(t=ai(),_.updateQueue=t,t.stores=[l]):(u=t.stores,u===null?t.stores=[l]:u.push(l))}function Ey(l,t,u,a){t.value=u,t.getSnapshot=a,zy(t)&&Oy(l)}function Ay(l,t,u){return u(function(){zy(t)&&Oy(l)})}function zy(l){var t=l.getSnapshot;l=l.value;try{var u=t();return!Rl(l,u)}catch{return!0}}function Oy(l){var t=ea(l,2);t!==null&&Yl(t,l,2)}function cc(l){var t=El();if(typeof l=="function"){var u=l;if(l=u(),yu){Yt(!0);try{u()}finally{Yt(!1)}}}return t.memoizedState=t.baseState=l,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:St,lastRenderedState:l},t}function ry(l,t,u,a){return l.baseState=u,ei(l,Q,typeof a=="function"?a:St)}function eh(l,t,u,a,n){if(Ge(l))throw Error(b(485));if(l=t.action,l!==null){var e={payload:n,action:l,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(f){e.listeners.push(f)}};r.T!==null?u(!0):e.isTransition=!1,a(e),u=t.pending,u===null?(e.next=t.pending=e,My(t,e)):(e.next=u.next,t.pending=u.next=e)}}function My(l,t){var u=t.action,a=t.payload,n=l.state;if(t.isTransition){var e=r.T,f={};r.T=f;try{var c=u(n,a),i=r.S;i!==null&&i(f,c),Y0(l,t,c)}catch(d){ic(l,t,d)}finally{r.T=e}}else try{e=u(n,a),Y0(l,t,e)}catch(d){ic(l,t,d)}}function Y0(l,t,u){u!==null&&typeof u=="object"&&typeof u.then=="function"?u.then(function(a){R0(l,t,a)},function(a){return ic(l,t,a)}):R0(l,t,u)}function R0(l,t,u){t.status="fulfilled",t.value=u,_y(t),l.state=u,t=l.pending,t!==null&&(u=t.next,u===t?l.pending=null:(u=u.next,t.next=u,My(l,u)))}function ic(l,t,u){var a=l.pending;if(l.pending=null,a!==null){a=a.next;do t.status="rejected",t.reason=u,_y(t),t=t.next;while(t!==a)}l.action=null}function _y(l){l=l.listeners;for(var t=0;t<l.length;t++)(0,l[t])()}function Dy(l,t){return t}function B0(l,t){if(p){var u=x.formState;if(u!==null){l:{var a=_;if(p){if(W){t:{for(var n=W,e=kl;n.nodeType!==8;){if(!e){n=null;break t}if(n=Jl(n.nextSibling),n===null){n=null;break t}}e=n.data,n=e==="F!"||e==="F"?n:null}if(n){W=Jl(n.nextSibling),a=n.data==="F!";break l}}cu(a)}a=!1}a&&(t=u[0])}}return u=El(),u.memoizedState=u.baseState=t,a={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Dy,lastRenderedState:t},u.queue=a,u=Vy.bind(null,_,a),a.dispatch=u,a=cc(!1),e=yi.bind(null,_,!1,a.queue),a=El(),n={state:t,dispatch:null,action:l,pending:null},a.queue=n,u=eh.bind(null,_,n,e,u),n.dispatch=u,a.memoizedState=l,[t,u,!1]}function G0(l){var t=P();return Uy(t,Q,l)}function Uy(l,t,u){if(t=ei(l,t,Dy)[0],l=Kn(St)[0],typeof t=="object"&&t!==null&&typeof t.then=="function")try{var a=vn(t)}catch(f){throw f===yn?Ye:f}else a=t;t=P();var n=t.queue,e=n.dispatch;return u!==t.memoizedState&&(_.flags|=2048,Fu(9,Be(),fh.bind(null,n,u),null)),[a,e,l]}function fh(l,t){l.action=t}function X0(l){var t=P(),u=Q;if(u!==null)return Uy(t,u,l);P(),t=t.memoizedState,u=P();var a=u.queue.dispatch;return u.memoizedState=l,[t,a,!1]}function Fu(l,t,u,a){return l={tag:l,create:u,deps:a,inst:t,next:null},t=_.updateQueue,t===null&&(t=ai(),_.updateQueue=t),u=t.lastEffect,u===null?t.lastEffect=l.next=l:(a=u.next,u.next=l,l.next=a,t.lastEffect=l),l}function Be(){return{destroy:void 0,resource:void 0}}function Ny(){return P().memoizedState}function Ln(l,t,u,a){var n=El();a=a===void 0?null:a,_.flags|=l,n.memoizedState=Fu(1|t,Be(),u,a)}function dn(l,t,u,a){var n=P();a=a===void 0?null:a;var e=n.memoizedState.inst;Q!==null&&a!==null&&Ic(a,Q.memoizedState.deps)?n.memoizedState=Fu(t,e,u,a):(_.flags|=l,n.memoizedState=Fu(1|t,e,u,a))}function Q0(l,t){Ln(8390656,8,l,t)}function Hy(l,t){dn(2048,8,l,t)}function qy(l,t){return dn(4,2,l,t)}function py(l,t){return dn(4,4,l,t)}function Yy(l,t){if(typeof t=="function"){l=l();var u=t(l);return function(){typeof u=="function"?u():t(null)}}if(t!=null)return l=l(),t.current=l,function(){t.current=null}}function Ry(l,t,u){u=u!=null?u.concat([l]):null,dn(4,4,Yy.bind(null,t,l),u)}function fi(){}function By(l,t){var u=P();t=t===void 0?null:t;var a=u.memoizedState;return t!==null&&Ic(t,a[1])?a[0]:(u.memoizedState=[l,t],l)}function Gy(l,t){var u=P();t=t===void 0?null:t;var a=u.memoizedState;if(t!==null&&Ic(t,a[1]))return a[0];if(a=l(),yu){Yt(!0);try{l()}finally{Yt(!1)}}return u.memoizedState=[a,t],a}function ci(l,t,u){return u===void 0||(Lt&1073741824)!==0?l.memoizedState=t:(l.memoizedState=u,l=_v(),_.lanes|=l,wt|=l,u)}function Xy(l,t,u,a){return Rl(u,t)?u:ku.current!==null?(l=ci(l,u,a),Rl(l,t)||(fl=!0),l):(Lt&42)===0?(fl=!0,l.memoizedState=u):(l=_v(),_.lanes|=l,wt|=l,t)}function Qy(l,t,u,a,n){var e=Y.p;Y.p=e!==0&&8>e?e:8;var f=r.T,c={};r.T=c,yi(l,!1,t,u);try{var i=n(),d=r.S;if(d!==null&&d(c,i),i!==null&&typeof i=="object"&&typeof i.then=="function"){var m=uh(i,a);Ya(l,t,m,pl(l))}else Ya(l,t,a,pl(l))}catch(g){Ya(l,t,{then:function(){},status:"rejected",reason:g},pl())}finally{Y.p=e,r.T=f}}function ch(){}function yc(l,t,u,a){if(l.tag!==5)throw Error(b(476));var n=Zy(l).queue;Qy(l,n,t,lu,u===null?ch:function(){return xy(l),u(a)})}function Zy(l){var t=l.memoizedState;if(t!==null)return t;t={memoizedState:lu,baseState:lu,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:St,lastRenderedState:lu},next:null};var u={};return t.next={memoizedState:u,baseState:u,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:St,lastRenderedState:u},next:null},l.memoizedState=t,l=l.alternate,l!==null&&(l.memoizedState=t),t}function xy(l){var t=Zy(l).next.queue;Ya(l,t,{},pl())}function ii(){return ol($a)}function jy(){return P().memoizedState}function Cy(){return P().memoizedState}function ih(l){for(var t=l.return;t!==null;){switch(t.tag){case 24:case 3:var u=pl();l=Qt(u);var a=Zt(t,l,u);a!==null&&(Yl(a,t,u),Ha(a,t,u)),t={cache:Wc()},l.payload=t;return}t=t.return}}function yh(l,t,u){var a=pl();u={lane:a,revertLane:0,action:u,hasEagerState:!1,eagerState:null,next:null},Ge(l)?Ky(t,u):(u=Kc(l,t,u,a),u!==null&&(Yl(u,l,a),Ly(u,t,a)))}function Vy(l,t,u){var a=pl();Ya(l,t,u,a)}function Ya(l,t,u,a){var n={lane:a,revertLane:0,action:u,hasEagerState:!1,eagerState:null,next:null};if(Ge(l))Ky(t,n);else{var e=l.alternate;if(l.lanes===0&&(e===null||e.lanes===0)&&(e=t.lastRenderedReducer,e!==null))try{var f=t.lastRenderedState,c=e(f,u);if(n.hasEagerState=!0,n.eagerState=c,Rl(c,f))return pe(l,t,n,0),x===null&&qe(),!1}catch{}finally{}if(u=Kc(l,t,n,a),u!==null)return Yl(u,l,a),Ly(u,t,a),!0}return!1}function yi(l,t,u,a){if(a={lane:2,revertLane:gi(),action:a,hasEagerState:!1,eagerState:null,next:null},Ge(l)){if(t)throw Error(b(479))}else t=Kc(l,u,a,2),t!==null&&Yl(t,l,2)}function Ge(l){var t=l.alternate;return l===_||t!==null&&t===_}function Ky(l,t){Cu=ie=!0;var u=l.pending;u===null?t.next=t:(t.next=u.next,u.next=t),l.pending=t}function Ly(l,t,u){if((u&4194048)!==0){var a=t.lanes;a&=l.pendingLanes,u|=a,t.lanes=u,B1(l,u)}}var ve={readContext:ol,use:Re,useCallback:k,useContext:k,useEffect:k,useImperativeHandle:k,useLayoutEffect:k,useInsertionEffect:k,useMemo:k,useReducer:k,useRef:k,useState:k,useDebugValue:k,useDeferredValue:k,useTransition:k,useSyncExternalStore:k,useId:k,useHostTransitionStatus:k,useFormState:k,useActionState:k,useOptimistic:k,useMemoCache:k,useCacheRefresh:k},Jy={readContext:ol,use:Re,useCallback:function(l,t){return El().memoizedState=[l,t===void 0?null:t],l},useContext:ol,useEffect:Q0,useImperativeHandle:function(l,t,u){u=u!=null?u.concat([l]):null,Ln(4194308,4,Yy.bind(null,t,l),u)},useLayoutEffect:function(l,t){return Ln(4194308,4,l,t)},useInsertionEffect:function(l,t){Ln(4,2,l,t)},useMemo:function(l,t){var u=El();t=t===void 0?null:t;var a=l();if(yu){Yt(!0);try{l()}finally{Yt(!1)}}return u.memoizedState=[a,t],a},useReducer:function(l,t,u){var a=El();if(u!==void 0){var n=u(t);if(yu){Yt(!0);try{u(t)}finally{Yt(!1)}}}else n=t;return a.memoizedState=a.baseState=n,l={pending:null,lanes:0,dispatch:null,lastRenderedReducer:l,lastRenderedState:n},a.queue=l,l=l.dispatch=yh.bind(null,_,l),[a.memoizedState,l]},useRef:function(l){var t=El();return l={current:l},t.memoizedState=l},useState:function(l){l=cc(l);var t=l.queue,u=Vy.bind(null,_,t);return t.dispatch=u,[l.memoizedState,u]},useDebugValue:fi,useDeferredValue:function(l,t){var u=El();return ci(u,l,t)},useTransition:function(){var l=cc(!1);return l=Qy.bind(null,_,l.queue,!0,!1),El().memoizedState=l,[!1,l]},useSyncExternalStore:function(l,t,u){var a=_,n=El();if(p){if(u===void 0)throw Error(b(407));u=u()}else{if(u=t(),x===null)throw Error(b(349));(H&124)!==0||Ty(a,t,u)}n.memoizedState=u;var e={value:u,getSnapshot:t};return n.queue=e,Q0(Ay.bind(null,a,e,l),[l]),a.flags|=2048,Fu(9,Be(),Ey.bind(null,a,e,u,t),null),u},useId:function(){var l=El(),t=x.identifierPrefix;if(p){var u=vt,a=yt;u=(a&~(1<<32-ql(a)-1)).toString(32)+u,t="\xAB"+t+"R"+u,u=ye++,0<u&&(t+="H"+u.toString(32)),t+="\xBB"}else u=ah++,t="\xAB"+t+"r"+u.toString(32)+"\xBB";return l.memoizedState=t},useHostTransitionStatus:ii,useFormState:B0,useActionState:B0,useOptimistic:function(l){var t=El();t.memoizedState=t.baseState=l;var u={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=u,t=yi.bind(null,_,!0,u),u.dispatch=t,[l,t]},useMemoCache:ni,useCacheRefresh:function(){return El().memoizedState=ih.bind(null,_)}},wy={readContext:ol,use:Re,useCallback:By,useContext:ol,useEffect:Hy,useImperativeHandle:Ry,useInsertionEffect:qy,useLayoutEffect:py,useMemo:Gy,useReducer:Kn,useRef:Ny,useState:function(){return Kn(St)},useDebugValue:fi,useDeferredValue:function(l,t){var u=P();return Xy(u,Q.memoizedState,l,t)},useTransition:function(){var l=Kn(St)[0],t=P().memoizedState;return[typeof l=="boolean"?l:vn(l),t]},useSyncExternalStore:by,useId:jy,useHostTransitionStatus:ii,useFormState:G0,useActionState:G0,useOptimistic:function(l,t){var u=P();return ry(u,Q,l,t)},useMemoCache:ni,useCacheRefresh:Cy},vh={readContext:ol,use:Re,useCallback:By,useContext:ol,useEffect:Hy,useImperativeHandle:Ry,useInsertionEffect:qy,useLayoutEffect:py,useMemo:Gy,useReducer:Tf,useRef:Ny,useState:function(){return Tf(St)},useDebugValue:fi,useDeferredValue:function(l,t){var u=P();return Q===null?ci(u,l,t):Xy(u,Q.memoizedState,l,t)},useTransition:function(){var l=Tf(St)[0],t=P().memoizedState;return[typeof l=="boolean"?l:vn(l),t]},useSyncExternalStore:by,useId:jy,useHostTransitionStatus:ii,useFormState:X0,useActionState:X0,useOptimistic:function(l,t){var u=P();return Q!==null?ry(u,Q,l,t):(u.baseState=l,[l,u.queue.dispatch])},useMemoCache:ni,useCacheRefresh:Cy},Ku=null,La=0;function Hn(l){var t=La;return La+=1,Ku===null&&(Ku=[]),hy(Ku,l,t)}function Sa(l,t){t=t.props.ref,l.ref=t!==void 0?t:null}function qn(l,t){throw t.$$typeof===xd?Error(b(525)):(l=Object.prototype.toString.call(t),Error(b(31,l==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":l)))}function Z0(l){var t=l._init;return t(l._payload)}function Wy(l){function t(v,y){if(l){var s=v.deletions;s===null?(v.deletions=[y],v.flags|=16):s.push(y)}}function u(v,y){if(!l)return null;for(;y!==null;)t(v,y),y=y.sibling;return null}function a(v){for(var y=new Map;v!==null;)v.key!==null?y.set(v.key,v):y.set(v.index,v),v=v.sibling;return y}function n(v,y){return v=ht(v,y),v.index=0,v.sibling=null,v}function e(v,y,s){return v.index=s,l?(s=v.alternate,s!==null?(s=s.index,s<y?(v.flags|=67108866,y):s):(v.flags|=67108866,y)):(v.flags|=1048576,y)}function f(v){return l&&v.alternate===null&&(v.flags|=67108866),v}function c(v,y,s,S){return y===null||y.tag!==6?(y=Sf(s,v.mode,S),y.return=v,y):(y=n(y,s),y.return=v,y)}function i(v,y,s,S){var T=s.type;return T===_u?m(v,y,s.props.children,S,s.key):y!==null&&(y.elementType===T||typeof T=="object"&&T!==null&&T.$$typeof===Dt&&Z0(T)===y.type)?(y=n(y,s.props),Sa(y,s),y.return=v,y):(y=Cn(s.type,s.key,s.props,null,v.mode,S),Sa(y,s),y.return=v,y)}function d(v,y,s,S){return y===null||y.tag!==4||y.stateNode.containerInfo!==s.containerInfo||y.stateNode.implementation!==s.implementation?(y=gf(s,v.mode,S),y.return=v,y):(y=n(y,s.children||[]),y.return=v,y)}function m(v,y,s,S,T){return y===null||y.tag!==7?(y=tu(s,v.mode,S,T),y.return=v,y):(y=n(y,s),y.return=v,y)}function g(v,y,s){if(typeof y=="string"&&y!==""||typeof y=="number"||typeof y=="bigint")return y=Sf(""+y,v.mode,s),y.return=v,y;if(typeof y=="object"&&y!==null){switch(y.$$typeof){case An:return s=Cn(y.type,y.key,y.props,null,v.mode,s),Sa(s,y),s.return=v,s;case Aa:return y=gf(y,v.mode,s),y.return=v,y;case Dt:var S=y._init;return y=S(y._payload),g(v,y,s)}if(za(y)||ha(y))return y=tu(y,v.mode,s,null),y.return=v,y;if(typeof y.then=="function")return g(v,Hn(y),s);if(y.$$typeof===it)return g(v,Un(v,y),s);qn(v,y)}return null}function h(v,y,s,S){var T=y!==null?y.key:null;if(typeof s=="string"&&s!==""||typeof s=="number"||typeof s=="bigint")return T!==null?null:c(v,y,""+s,S);if(typeof s=="object"&&s!==null){switch(s.$$typeof){case An:return s.key===T?i(v,y,s,S):null;case Aa:return s.key===T?d(v,y,s,S):null;case Dt:return T=s._init,s=T(s._payload),h(v,y,s,S)}if(za(s)||ha(s))return T!==null?null:m(v,y,s,S,null);if(typeof s.then=="function")return h(v,y,Hn(s),S);if(s.$$typeof===it)return h(v,y,Un(v,s),S);qn(v,s)}return null}function o(v,y,s,S,T){if(typeof S=="string"&&S!==""||typeof S=="number"||typeof S=="bigint")return v=v.get(s)||null,c(y,v,""+S,T);if(typeof S=="object"&&S!==null){switch(S.$$typeof){case An:return v=v.get(S.key===null?s:S.key)||null,i(y,v,S,T);case Aa:return v=v.get(S.key===null?s:S.key)||null,d(y,v,S,T);case Dt:var D=S._init;return S=D(S._payload),o(v,y,s,S,T)}if(za(S)||ha(S))return v=v.get(s)||null,m(y,v,S,T,null);if(typeof S.then=="function")return o(v,y,s,Hn(S),T);if(S.$$typeof===it)return o(v,y,s,Un(y,S),T);qn(y,S)}return null}function O(v,y,s,S){for(var T=null,D=null,E=y,z=y=0,al=null;E!==null&&z<s.length;z++){E.index>z?(al=E,E=null):al=E.sibling;var q=h(v,E,s[z],S);if(q===null){E===null&&(E=al);break}l&&E&&q.alternate===null&&t(v,E),y=e(q,y,z),D===null?T=q:D.sibling=q,D=q,E=al}if(z===s.length)return u(v,E),p&&It(v,z),T;if(E===null){for(;z<s.length;z++)E=g(v,s[z],S),E!==null&&(y=e(E,y,z),D===null?T=E:D.sibling=E,D=E);return p&&It(v,z),T}for(E=a(E);z<s.length;z++)al=o(E,v,z,s[z],S),al!==null&&(l&&al.alternate!==null&&E.delete(al.key===null?z:al.key),y=e(al,y,z),D===null?T=al:D.sibling=al,D=al);return l&&E.forEach(function(Et){return t(v,Et)}),p&&It(v,z),T}function A(v,y,s,S){if(s==null)throw Error(b(151));for(var T=null,D=null,E=y,z=y=0,al=null,q=s.next();E!==null&&!q.done;z++,q=s.next()){E.index>z?(al=E,E=null):al=E.sibling;var Et=h(v,E,q.value,S);if(Et===null){E===null&&(E=al);break}l&&E&&Et.alternate===null&&t(v,E),y=e(Et,y,z),D===null?T=Et:D.sibling=Et,D=Et,E=al}if(q.done)return u(v,E),p&&It(v,z),T;if(E===null){for(;!q.done;z++,q=s.next())q=g(v,q.value,S),q!==null&&(y=e(q,y,z),D===null?T=q:D.sibling=q,D=q);return p&&It(v,z),T}for(E=a(E);!q.done;z++,q=s.next())q=o(E,v,z,q.value,S),q!==null&&(l&&q.alternate!==null&&E.delete(q.key===null?z:q.key),y=e(q,y,z),D===null?T=q:D.sibling=q,D=q);return l&&E.forEach(function(sd){return t(v,sd)}),p&&It(v,z),T}function G(v,y,s,S){if(typeof s=="object"&&s!==null&&s.type===_u&&s.key===null&&(s=s.props.children),typeof s=="object"&&s!==null){switch(s.$$typeof){case An:l:{for(var T=s.key;y!==null;){if(y.key===T){if(T=s.type,T===_u){if(y.tag===7){u(v,y.sibling),S=n(y,s.props.children),S.return=v,v=S;break l}}else if(y.elementType===T||typeof T=="object"&&T!==null&&T.$$typeof===Dt&&Z0(T)===y.type){u(v,y.sibling),S=n(y,s.props),Sa(S,s),S.return=v,v=S;break l}u(v,y);break}else t(v,y);y=y.sibling}s.type===_u?(S=tu(s.props.children,v.mode,S,s.key),S.return=v,v=S):(S=Cn(s.type,s.key,s.props,null,v.mode,S),Sa(S,s),S.return=v,v=S)}return f(v);case Aa:l:{for(T=s.key;y!==null;){if(y.key===T)if(y.tag===4&&y.stateNode.containerInfo===s.containerInfo&&y.stateNode.implementation===s.implementation){u(v,y.sibling),S=n(y,s.children||[]),S.return=v,v=S;break l}else{u(v,y);break}else t(v,y);y=y.sibling}S=gf(s,v.mode,S),S.return=v,v=S}return f(v);case Dt:return T=s._init,s=T(s._payload),G(v,y,s,S)}if(za(s))return O(v,y,s,S);if(ha(s)){if(T=ha(s),typeof T!="function")throw Error(b(150));return s=T.call(s),A(v,y,s,S)}if(typeof s.then=="function")return G(v,y,Hn(s),S);if(s.$$typeof===it)return G(v,y,Un(v,s),S);qn(v,s)}return typeof s=="string"&&s!==""||typeof s=="number"||typeof s=="bigint"?(s=""+s,y!==null&&y.tag===6?(u(v,y.sibling),S=n(y,s),S.return=v,v=S):(u(v,y),S=Sf(s,v.mode,S),S.return=v,v=S),f(v)):u(v,y)}return function(v,y,s,S){try{La=0;var T=G(v,y,s,S);return Ku=null,T}catch(E){if(E===yn||E===Ye)throw E;var D=Nl(29,E,null,v.mode);return D.lanes=S,D.return=v,D}finally{}}}var Iu=Wy(!0),$y=Wy(!1),Vl=tt(null),lt=null;function Ht(l){var t=l.alternate;L(tl,tl.current&1),L(Vl,l),lt===null&&(t===null||ku.current!==null||t.memoizedState!==null)&&(lt=l)}function ky(l){if(l.tag===22){if(L(tl,tl.current),L(Vl,l),lt===null){var t=l.alternate;t!==null&&t.memoizedState!==null&&(lt=l)}}else qt(l)}function qt(){L(tl,tl.current),L(Vl,Vl.current)}function st(l){cl(Vl),lt===l&&(lt=null),cl(tl)}var tl=tt(0);function de(l){for(var t=l;t!==null;){if(t.tag===13){var u=t.memoizedState;if(u!==null&&(u=u.dehydrated,u===null||u.data==="$?"||_c(u)))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===l)break;for(;t.sibling===null;){if(t.return===null||t.return===l)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ef(l,t,u,a){t=l.memoizedState,u=u(a,t),u=u==null?t:j({},t,u),l.memoizedState=u,l.lanes===0&&(l.updateQueue.baseState=u)}var vc={enqueueSetState:function(l,t,u){l=l._reactInternals;var a=pl(),n=Qt(a);n.payload=t,u!=null&&(n.callback=u),t=Zt(l,n,a),t!==null&&(Yl(t,l,a),Ha(t,l,a))},enqueueReplaceState:function(l,t,u){l=l._reactInternals;var a=pl(),n=Qt(a);n.tag=1,n.payload=t,u!=null&&(n.callback=u),t=Zt(l,n,a),t!==null&&(Yl(t,l,a),Ha(t,l,a))},enqueueForceUpdate:function(l,t){l=l._reactInternals;var u=pl(),a=Qt(u);a.tag=2,t!=null&&(a.callback=t),t=Zt(l,a,u),t!==null&&(Yl(t,l,u),Ha(t,l,u))}};function x0(l,t,u,a,n,e,f){return l=l.stateNode,typeof l.shouldComponentUpdate=="function"?l.shouldComponentUpdate(a,e,f):t.prototype&&t.prototype.isPureReactComponent?!Ca(u,a)||!Ca(n,e):!0}function j0(l,t,u,a){l=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(u,a),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(u,a),t.state!==l&&vc.enqueueReplaceState(t,t.state,null)}function vu(l,t){var u=t;if("ref"in t){u={};for(var a in t)a!=="ref"&&(u[a]=t[a])}if(l=l.defaultProps){u===t&&(u=j({},u));for(var n in l)u[n]===void 0&&(u[n]=l[n])}return u}var se=typeof reportError=="function"?reportError:function(l){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof l=="object"&&l!==null&&typeof l.message=="string"?String(l.message):String(l),error:l});if(!window.dispatchEvent(t))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",l);return}console.error(l)};function Fy(l){se(l)}function Iy(l){console.error(l)}function Py(l){se(l)}function he(l,t){try{var u=l.onUncaughtError;u(t.value,{componentStack:t.stack})}catch(a){setTimeout(function(){throw a})}}function C0(l,t,u){try{var a=l.onCaughtError;a(u.value,{componentStack:u.stack,errorBoundary:t.tag===1?t.stateNode:null})}catch(n){setTimeout(function(){throw n})}}function dc(l,t,u){return u=Qt(u),u.tag=3,u.payload={element:null},u.callback=function(){he(l,t)},u}function lv(l){return l=Qt(l),l.tag=3,l}function tv(l,t,u,a){var n=u.type.getDerivedStateFromError;if(typeof n=="function"){var e=a.value;l.payload=function(){return n(e)},l.callback=function(){C0(t,u,a)}}var f=u.stateNode;f!==null&&typeof f.componentDidCatch=="function"&&(l.callback=function(){C0(t,u,a),typeof n!="function"&&(xt===null?xt=new Set([this]):xt.add(this));var c=a.stack;this.componentDidCatch(a.value,{componentStack:c!==null?c:""})})}function dh(l,t,u,a,n){if(u.flags|=32768,a!==null&&typeof a=="object"&&typeof a.then=="function"){if(t=u.alternate,t!==null&&fn(t,u,n,!0),u=Vl.current,u!==null){switch(u.tag){case 13:return lt===null?Tc():u.alternate===null&&$===0&&($=3),u.flags&=-257,u.flags|=65536,u.lanes=n,a===ac?u.flags|=16384:(t=u.updateQueue,t===null?u.updateQueue=new Set([a]):t.add(a),qf(l,a,n)),!1;case 22:return u.flags|=65536,a===ac?u.flags|=16384:(t=u.updateQueue,t===null?(t={transitions:null,markerInstances:null,retryQueue:new Set([a])},u.updateQueue=t):(u=t.retryQueue,u===null?t.retryQueue=new Set([a]):u.add(a)),qf(l,a,n)),!1}throw Error(b(435,u.tag))}return qf(l,a,n),Tc(),!1}if(p)return t=Vl.current,t!==null?((t.flags&65536)===0&&(t.flags|=256),t.flags|=65536,t.lanes=n,a!==If&&(l=Error(b(422),{cause:a}),Va(jl(l,u)))):(a!==If&&(t=Error(b(423),{cause:a}),Va(jl(t,u))),l=l.current.alternate,l.flags|=65536,n&=-n,l.lanes|=n,a=jl(a,u),n=dc(l.stateNode,a,n),bf(l,n),$!==4&&($=2)),!1;var e=Error(b(520),{cause:a});if(e=jl(e,u),Ga===null?Ga=[e]:Ga.push(e),$!==4&&($=2),t===null)return!0;a=jl(a,u),u=t;do{switch(u.tag){case 3:return u.flags|=65536,l=n&-n,u.lanes|=l,l=dc(u.stateNode,a,l),bf(u,l),!1;case 1:if(t=u.type,e=u.stateNode,(u.flags&128)===0&&(typeof t.getDerivedStateFromError=="function"||e!==null&&typeof e.componentDidCatch=="function"&&(xt===null||!xt.has(e))))return u.flags|=65536,n&=-n,u.lanes|=n,n=lv(n),tv(n,l,u,a),bf(u,n),!1}u=u.return}while(u!==null);return!1}var uv=Error(b(461)),fl=!1;function il(l,t,u,a){t.child=l===null?$y(t,null,u,a):Iu(t,l.child,u,a)}function V0(l,t,u,a,n){u=u.render;var e=t.ref;if("ref"in a){var f={};for(var c in a)c!=="ref"&&(f[c]=a[c])}else f=a;return iu(t),a=Pc(l,t,u,f,e,n),c=li(),l!==null&&!fl?(ti(l,t,n),gt(l,t,n)):(p&&c&&Jc(t),t.flags|=1,il(l,t,a,n),t.child)}function K0(l,t,u,a,n){if(l===null){var e=u.type;return typeof e=="function"&&!Lc(e)&&e.defaultProps===void 0&&u.compare===null?(t.tag=15,t.type=e,av(l,t,e,a,n)):(l=Cn(u.type,null,a,t,t.mode,n),l.ref=t.ref,l.return=t,t.child=l)}if(e=l.child,!vi(l,n)){var f=e.memoizedProps;if(u=u.compare,u=u!==null?u:Ca,u(f,a)&&l.ref===t.ref)return gt(l,t,n)}return t.flags|=1,l=ht(e,a),l.ref=t.ref,l.return=t,t.child=l}function av(l,t,u,a,n){if(l!==null){var e=l.memoizedProps;if(Ca(e,a)&&l.ref===t.ref)if(fl=!1,t.pendingProps=a=e,vi(l,n))(l.flags&131072)!==0&&(fl=!0);else return t.lanes=l.lanes,gt(l,t,n)}return sc(l,t,u,a,n)}function nv(l,t,u){var a=t.pendingProps,n=a.children,e=l!==null?l.memoizedState:null;if(a.mode==="hidden"){if((t.flags&128)!==0){if(a=e!==null?e.baseLanes|u:u,l!==null){for(n=t.child=l.child,e=0;n!==null;)e=e|n.lanes|n.childLanes,n=n.sibling;t.childLanes=e&~a}else t.childLanes=0,t.child=null;return L0(l,t,a,u)}if((u&536870912)!==0)t.memoizedState={baseLanes:0,cachePool:null},l!==null&&Vn(t,e!==null?e.cachePool:null),e!==null?p0(t,e):fc(),ky(t);else return t.lanes=t.childLanes=536870912,L0(l,t,e!==null?e.baseLanes|u:u,u)}else e!==null?(Vn(t,e.cachePool),p0(t,e),qt(t),t.memoizedState=null):(l!==null&&Vn(t,null),fc(),qt(t));return il(l,t,n,u),t.child}function L0(l,t,u,a){var n=$c();return n=n===null?null:{parent:ll._currentValue,pool:n},t.memoizedState={baseLanes:u,cachePool:n},l!==null&&Vn(t,null),fc(),ky(t),l!==null&&fn(l,t,a,!0),null}function Jn(l,t){var u=t.ref;if(u===null)l!==null&&l.ref!==null&&(t.flags|=4194816);else{if(typeof u!="function"&&typeof u!="object")throw Error(b(284));(l===null||l.ref!==u)&&(t.flags|=4194816)}}function sc(l,t,u,a,n){return iu(t),u=Pc(l,t,u,a,void 0,n),a=li(),l!==null&&!fl?(ti(l,t,n),gt(l,t,n)):(p&&a&&Jc(t),t.flags|=1,il(l,t,u,n),t.child)}function J0(l,t,u,a,n,e){return iu(t),t.updateQueue=null,u=gy(t,a,u,n),Sy(l),a=li(),l!==null&&!fl?(ti(l,t,e),gt(l,t,e)):(p&&a&&Jc(t),t.flags|=1,il(l,t,u,e),t.child)}function w0(l,t,u,a,n){if(iu(t),t.stateNode===null){var e=Ru,f=u.contextType;typeof f=="object"&&f!==null&&(e=ol(f)),e=new u(a,e),t.memoizedState=e.state!==null&&e.state!==void 0?e.state:null,e.updater=vc,t.stateNode=e,e._reactInternals=t,e=t.stateNode,e.props=a,e.state=t.memoizedState,e.refs={},kc(t),f=u.contextType,e.context=typeof f=="object"&&f!==null?ol(f):Ru,e.state=t.memoizedState,f=u.getDerivedStateFromProps,typeof f=="function"&&(Ef(t,u,f,a),e.state=t.memoizedState),typeof u.getDerivedStateFromProps=="function"||typeof e.getSnapshotBeforeUpdate=="function"||typeof e.UNSAFE_componentWillMount!="function"&&typeof e.componentWillMount!="function"||(f=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),f!==e.state&&vc.enqueueReplaceState(e,e.state,null),pa(t,a,e,n),qa(),e.state=t.memoizedState),typeof e.componentDidMount=="function"&&(t.flags|=4194308),a=!0}else if(l===null){e=t.stateNode;var c=t.memoizedProps,i=vu(u,c);e.props=i;var d=e.context,m=u.contextType;f=Ru,typeof m=="object"&&m!==null&&(f=ol(m));var g=u.getDerivedStateFromProps;m=typeof g=="function"||typeof e.getSnapshotBeforeUpdate=="function",c=t.pendingProps!==c,m||typeof e.UNSAFE_componentWillReceiveProps!="function"&&typeof e.componentWillReceiveProps!="function"||(c||d!==f)&&j0(t,e,a,f),Ut=!1;var h=t.memoizedState;e.state=h,pa(t,a,e,n),qa(),d=t.memoizedState,c||h!==d||Ut?(typeof g=="function"&&(Ef(t,u,g,a),d=t.memoizedState),(i=Ut||x0(t,u,i,a,h,d,f))?(m||typeof e.UNSAFE_componentWillMount!="function"&&typeof e.componentWillMount!="function"||(typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount()),typeof e.componentDidMount=="function"&&(t.flags|=4194308)):(typeof e.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=a,t.memoizedState=d),e.props=a,e.state=d,e.context=f,a=i):(typeof e.componentDidMount=="function"&&(t.flags|=4194308),a=!1)}else{e=t.stateNode,nc(l,t),f=t.memoizedProps,m=vu(u,f),e.props=m,g=t.pendingProps,h=e.context,d=u.contextType,i=Ru,typeof d=="object"&&d!==null&&(i=ol(d)),c=u.getDerivedStateFromProps,(d=typeof c=="function"||typeof e.getSnapshotBeforeUpdate=="function")||typeof e.UNSAFE_componentWillReceiveProps!="function"&&typeof e.componentWillReceiveProps!="function"||(f!==g||h!==i)&&j0(t,e,a,i),Ut=!1,h=t.memoizedState,e.state=h,pa(t,a,e,n),qa();var o=t.memoizedState;f!==g||h!==o||Ut||l!==null&&l.dependencies!==null&&fe(l.dependencies)?(typeof c=="function"&&(Ef(t,u,c,a),o=t.memoizedState),(m=Ut||x0(t,u,m,a,h,o,i)||l!==null&&l.dependencies!==null&&fe(l.dependencies))?(d||typeof e.UNSAFE_componentWillUpdate!="function"&&typeof e.componentWillUpdate!="function"||(typeof e.componentWillUpdate=="function"&&e.componentWillUpdate(a,o,i),typeof e.UNSAFE_componentWillUpdate=="function"&&e.UNSAFE_componentWillUpdate(a,o,i)),typeof e.componentDidUpdate=="function"&&(t.flags|=4),typeof e.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof e.componentDidUpdate!="function"||f===l.memoizedProps&&h===l.memoizedState||(t.flags|=4),typeof e.getSnapshotBeforeUpdate!="function"||f===l.memoizedProps&&h===l.memoizedState||(t.flags|=1024),t.memoizedProps=a,t.memoizedState=o),e.props=a,e.state=o,e.context=i,a=m):(typeof e.componentDidUpdate!="function"||f===l.memoizedProps&&h===l.memoizedState||(t.flags|=4),typeof e.getSnapshotBeforeUpdate!="function"||f===l.memoizedProps&&h===l.memoizedState||(t.flags|=1024),a=!1)}return e=a,Jn(l,t),a=(t.flags&128)!==0,e||a?(e=t.stateNode,u=a&&typeof u.getDerivedStateFromError!="function"?null:e.render(),t.flags|=1,l!==null&&a?(t.child=Iu(t,l.child,null,n),t.child=Iu(t,null,u,n)):il(l,t,u,n),t.memoizedState=e.state,l=t.child):l=gt(l,t,n),l}function W0(l,t,u,a){return en(),t.flags|=256,il(l,t,u,a),t.child}var Af={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function zf(l){return{baseLanes:l,cachePool:dy()}}function Of(l,t,u){return l=l!==null?l.childLanes&~u:0,t&&(l|=Cl),l}function ev(l,t,u){var a=t.pendingProps,n=!1,e=(t.flags&128)!==0,f;if((f=e)||(f=l!==null&&l.memoizedState===null?!1:(tl.current&2)!==0),f&&(n=!0,t.flags&=-129),f=(t.flags&32)!==0,t.flags&=-33,l===null){if(p){if(n?Ht(t):qt(t),p){var c=W,i;if(i=c){l:{for(i=c,c=kl;i.nodeType!==8;){if(!c){c=null;break l}if(i=Jl(i.nextSibling),i===null){c=null;break l}}c=i}c!==null?(t.memoizedState={dehydrated:c,treeContext:uu!==null?{id:yt,overflow:vt}:null,retryLane:536870912,hydrationErrors:null},i=Nl(18,null,null,0),i.stateNode=c,i.return=t,t.child=i,Tl=t,W=null,i=!0):i=!1}i||cu(t)}if(c=t.memoizedState,c!==null&&(c=c.dehydrated,c!==null))return _c(c)?t.lanes=32:t.lanes=536870912,null;st(t)}return c=a.children,a=a.fallback,n?(qt(t),n=t.mode,c=oe({mode:"hidden",children:c},n),a=tu(a,n,u,null),c.return=t,a.return=t,c.sibling=a,t.child=c,n=t.child,n.memoizedState=zf(u),n.childLanes=Of(l,f,u),t.memoizedState=Af,a):(Ht(t),hc(t,c))}if(i=l.memoizedState,i!==null&&(c=i.dehydrated,c!==null)){if(e)t.flags&256?(Ht(t),t.flags&=-257,t=rf(l,t,u)):t.memoizedState!==null?(qt(t),t.child=l.child,t.flags|=128,t=null):(qt(t),n=a.fallback,c=t.mode,a=oe({mode:"visible",children:a.children},c),n=tu(n,c,u,null),n.flags|=2,a.return=t,n.return=t,a.sibling=n,t.child=a,Iu(t,l.child,null,u),a=t.child,a.memoizedState=zf(u),a.childLanes=Of(l,f,u),t.memoizedState=Af,t=n);else if(Ht(t),_c(c)){if(f=c.nextSibling&&c.nextSibling.dataset,f)var d=f.dgst;f=d,a=Error(b(419)),a.stack="",a.digest=f,Va({value:a,source:null,stack:null}),t=rf(l,t,u)}else if(fl||fn(l,t,u,!1),f=(u&l.childLanes)!==0,fl||f){if(f=x,f!==null&&(a=u&-u,a=(a&42)!==0?1:Rc(a),a=(a&(f.suspendedLanes|u))!==0?0:a,a!==0&&a!==i.retryLane))throw i.retryLane=a,ea(l,a),Yl(f,l,a),uv;c.data==="$?"||Tc(),t=rf(l,t,u)}else c.data==="$?"?(t.flags|=192,t.child=l.child,t=null):(l=i.treeContext,W=Jl(c.nextSibling),Tl=t,p=!0,au=null,kl=!1,l!==null&&(Ql[Zl++]=yt,Ql[Zl++]=vt,Ql[Zl++]=uu,yt=l.id,vt=l.overflow,uu=t),t=hc(t,a.children),t.flags|=4096);return t}return n?(qt(t),n=a.fallback,c=t.mode,i=l.child,d=i.sibling,a=ht(i,{mode:"hidden",children:a.children}),a.subtreeFlags=i.subtreeFlags&65011712,d!==null?n=ht(d,n):(n=tu(n,c,u,null),n.flags|=2),n.return=t,a.return=t,a.sibling=n,t.child=a,a=n,n=t.child,c=l.child.memoizedState,c===null?c=zf(u):(i=c.cachePool,i!==null?(d=ll._currentValue,i=i.parent!==d?{parent:d,pool:d}:i):i=dy(),c={baseLanes:c.baseLanes|u,cachePool:i}),n.memoizedState=c,n.childLanes=Of(l,f,u),t.memoizedState=Af,a):(Ht(t),u=l.child,l=u.sibling,u=ht(u,{mode:"visible",children:a.children}),u.return=t,u.sibling=null,l!==null&&(f=t.deletions,f===null?(t.deletions=[l],t.flags|=16):f.push(l)),t.child=u,t.memoizedState=null,u)}function hc(l,t){return t=oe({mode:"visible",children:t},l.mode),t.return=l,l.child=t}function oe(l,t){return l=Nl(22,l,null,t),l.lanes=0,l.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},l}function rf(l,t,u){return Iu(t,l.child,null,u),l=hc(t,t.pendingProps.children),l.flags|=2,t.memoizedState=null,l}function $0(l,t,u){l.lanes|=t;var a=l.alternate;a!==null&&(a.lanes|=t),lc(l.return,t,u)}function Mf(l,t,u,a,n){var e=l.memoizedState;e===null?l.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:a,tail:u,tailMode:n}:(e.isBackwards=t,e.rendering=null,e.renderingStartTime=0,e.last=a,e.tail=u,e.tailMode=n)}function fv(l,t,u){var a=t.pendingProps,n=a.revealOrder,e=a.tail;if(il(l,t,a.children,u),a=tl.current,(a&2)!==0)a=a&1|2,t.flags|=128;else{if(l!==null&&(l.flags&128)!==0)l:for(l=t.child;l!==null;){if(l.tag===13)l.memoizedState!==null&&$0(l,u,t);else if(l.tag===19)$0(l,u,t);else if(l.child!==null){l.child.return=l,l=l.child;continue}if(l===t)break l;for(;l.sibling===null;){if(l.return===null||l.return===t)break l;l=l.return}l.sibling.return=l.return,l=l.sibling}a&=1}switch(L(tl,a),n){case"forwards":for(u=t.child,n=null;u!==null;)l=u.alternate,l!==null&&de(l)===null&&(n=u),u=u.sibling;u=n,u===null?(n=t.child,t.child=null):(n=u.sibling,u.sibling=null),Mf(t,!1,n,u,e);break;case"backwards":for(u=null,n=t.child,t.child=null;n!==null;){if(l=n.alternate,l!==null&&de(l)===null){t.child=n;break}l=n.sibling,n.sibling=u,u=n,n=l}Mf(t,!0,u,null,e);break;case"together":Mf(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function gt(l,t,u){if(l!==null&&(t.dependencies=l.dependencies),wt|=t.lanes,(u&t.childLanes)===0)if(l!==null){if(fn(l,t,u,!1),(u&t.childLanes)===0)return null}else return null;if(l!==null&&t.child!==l.child)throw Error(b(153));if(t.child!==null){for(l=t.child,u=ht(l,l.pendingProps),t.child=u,u.return=t;l.sibling!==null;)l=l.sibling,u=u.sibling=ht(l,l.pendingProps),u.return=t;u.sibling=null}return t.child}function vi(l,t){return(l.lanes&t)!==0?!0:(l=l.dependencies,!!(l!==null&&fe(l)))}function sh(l,t,u){switch(t.tag){case 3:In(t,t.stateNode.containerInfo),Nt(t,ll,l.memoizedState.cache),en();break;case 27:case 5:Cf(t);break;case 4:In(t,t.stateNode.containerInfo);break;case 10:Nt(t,t.type,t.memoizedProps.value);break;case 13:var a=t.memoizedState;if(a!==null)return a.dehydrated!==null?(Ht(t),t.flags|=128,null):(u&t.child.childLanes)!==0?ev(l,t,u):(Ht(t),l=gt(l,t,u),l!==null?l.sibling:null);Ht(t);break;case 19:var n=(l.flags&128)!==0;if(a=(u&t.childLanes)!==0,a||(fn(l,t,u,!1),a=(u&t.childLanes)!==0),n){if(a)return fv(l,t,u);t.flags|=128}if(n=t.memoizedState,n!==null&&(n.rendering=null,n.tail=null,n.lastEffect=null),L(tl,tl.current),a)break;return null;case 22:case 23:return t.lanes=0,nv(l,t,u);case 24:Nt(t,ll,l.memoizedState.cache)}return gt(l,t,u)}function cv(l,t,u){if(l!==null)if(l.memoizedProps!==t.pendingProps)fl=!0;else{if(!vi(l,u)&&(t.flags&128)===0)return fl=!1,sh(l,t,u);fl=(l.flags&131072)!==0}else fl=!1,p&&(t.flags&1048576)!==0&&yy(t,ee,t.index);switch(t.lanes=0,t.tag){case 16:l:{l=t.pendingProps;var a=t.elementType,n=a._init;if(a=n(a._payload),t.type=a,typeof a=="function")Lc(a)?(l=vu(a,l),t.tag=1,t=w0(null,t,a,l,u)):(t.tag=0,t=sc(null,t,a,l,u));else{if(a!=null){if(n=a.$$typeof,n===qc){t.tag=11,t=V0(null,t,a,l,u);break l}else if(n===pc){t.tag=14,t=K0(null,t,a,l,u);break l}}throw t=xf(a)||a,Error(b(306,t,""))}}return t;case 0:return sc(l,t,t.type,t.pendingProps,u);case 1:return a=t.type,n=vu(a,t.pendingProps),w0(l,t,a,n,u);case 3:l:{if(In(t,t.stateNode.containerInfo),l===null)throw Error(b(387));a=t.pendingProps;var e=t.memoizedState;n=e.element,nc(l,t),pa(t,a,null,u);var f=t.memoizedState;if(a=f.cache,Nt(t,ll,a),a!==e.cache&&tc(t,[ll],u,!0),qa(),a=f.element,e.isDehydrated)if(e={element:a,isDehydrated:!1,cache:f.cache},t.updateQueue.baseState=e,t.memoizedState=e,t.flags&256){t=W0(l,t,a,u);break l}else if(a!==n){n=jl(Error(b(424)),t),Va(n),t=W0(l,t,a,u);break l}else{switch(l=t.stateNode.containerInfo,l.nodeType){case 9:l=l.body;break;default:l=l.nodeName==="HTML"?l.ownerDocument.body:l}for(W=Jl(l.firstChild),Tl=t,p=!0,au=null,kl=!0,u=$y(t,null,a,u),t.child=u;u;)u.flags=u.flags&-3|4096,u=u.sibling}else{if(en(),a===n){t=gt(l,t,u);break l}il(l,t,a,u)}t=t.child}return t;case 26:return Jn(l,t),l===null?(u=o1(t.type,null,t.pendingProps,null))?t.memoizedState=u:p||(u=t.type,l=t.pendingProps,a=Ae(Xt.current).createElement(u),a[hl]=t,a[Ol]=l,vl(a,u,l),el(a),t.stateNode=a):t.memoizedState=o1(t.type,l.memoizedProps,t.pendingProps,l.memoizedState),null;case 27:return Cf(t),l===null&&p&&(a=t.stateNode=wv(t.type,t.pendingProps,Xt.current),Tl=t,kl=!0,n=W,$t(t.type)?(Dc=n,W=Jl(a.firstChild)):W=n),il(l,t,t.pendingProps.children,u),Jn(l,t),l===null&&(t.flags|=4194304),t.child;case 5:return l===null&&p&&((n=a=W)&&(a=Qh(a,t.type,t.pendingProps,kl),a!==null?(t.stateNode=a,Tl=t,W=Jl(a.firstChild),kl=!1,n=!0):n=!1),n||cu(t)),Cf(t),n=t.type,e=t.pendingProps,f=l!==null?l.memoizedProps:null,a=e.children,rc(n,e)?a=null:f!==null&&rc(n,f)&&(t.flags|=32),t.memoizedState!==null&&(n=Pc(l,t,nh,null,null,u),$a._currentValue=n),Jn(l,t),il(l,t,a,u),t.child;case 6:return l===null&&p&&((l=u=W)&&(u=Zh(u,t.pendingProps,kl),u!==null?(t.stateNode=u,Tl=t,W=null,l=!0):l=!1),l||cu(t)),null;case 13:return ev(l,t,u);case 4:return In(t,t.stateNode.containerInfo),a=t.pendingProps,l===null?t.child=Iu(t,null,a,u):il(l,t,a,u),t.child;case 11:return V0(l,t,t.type,t.pendingProps,u);case 7:return il(l,t,t.pendingProps,u),t.child;case 8:return il(l,t,t.pendingProps.children,u),t.child;case 12:return il(l,t,t.pendingProps.children,u),t.child;case 10:return a=t.pendingProps,Nt(t,t.type,a.value),il(l,t,a.children,u),t.child;case 9:return n=t.type._context,a=t.pendingProps.children,iu(t),n=ol(n),a=a(n),t.flags|=1,il(l,t,a,u),t.child;case 14:return K0(l,t,t.type,t.pendingProps,u);case 15:return av(l,t,t.type,t.pendingProps,u);case 19:return fv(l,t,u);case 31:return a=t.pendingProps,u=t.mode,a={mode:a.mode,children:a.children},l===null?(u=oe(a,u),u.ref=t.ref,t.child=u,u.return=t,t=u):(u=ht(l.child,a),u.ref=t.ref,t.child=u,u.return=t,t=u),t;case 22:return nv(l,t,u);case 24:return iu(t),a=ol(ll),l===null?(n=$c(),n===null&&(n=x,e=Wc(),n.pooledCache=e,e.refCount++,e!==null&&(n.pooledCacheLanes|=u),n=e),t.memoizedState={parent:a,cache:n},kc(t),Nt(t,ll,n)):((l.lanes&u)!==0&&(nc(l,t),pa(t,null,null,u),qa()),n=l.memoizedState,e=t.memoizedState,n.parent!==a?(n={parent:a,cache:a},t.memoizedState=n,t.lanes===0&&(t.memoizedState=t.updateQueue.baseState=n),Nt(t,ll,a)):(a=e.cache,Nt(t,ll,a),a!==n.cache&&tc(t,[ll],u,!0))),il(l,t,t.pendingProps.children,u),t.child;case 29:throw t.pendingProps}throw Error(b(156,t.tag))}function et(l){l.flags|=4}function k0(l,t){if(t.type!=="stylesheet"||(t.state.loading&4)!==0)l.flags&=-16777217;else if(l.flags|=16777216,!kv(t)){if(t=Vl.current,t!==null&&((H&4194048)===H?lt!==null:(H&62914560)!==H&&(H&536870912)===0||t!==lt))throw Na=ac,sy;l.flags|=8192}}function pn(l,t){t!==null&&(l.flags|=4),l.flags&16384&&(t=l.tag!==22?Y1():536870912,l.lanes|=t,Pu|=t)}function ga(l,t){if(!p)switch(l.tailMode){case"hidden":t=l.tail;for(var u=null;t!==null;)t.alternate!==null&&(u=t),t=t.sibling;u===null?l.tail=null:u.sibling=null;break;case"collapsed":u=l.tail;for(var a=null;u!==null;)u.alternate!==null&&(a=u),u=u.sibling;a===null?t||l.tail===null?l.tail=null:l.tail.sibling=null:a.sibling=null}}function w(l){var t=l.alternate!==null&&l.alternate.child===l.child,u=0,a=0;if(t)for(var n=l.child;n!==null;)u|=n.lanes|n.childLanes,a|=n.subtreeFlags&65011712,a|=n.flags&65011712,n.return=l,n=n.sibling;else for(n=l.child;n!==null;)u|=n.lanes|n.childLanes,a|=n.subtreeFlags,a|=n.flags,n.return=l,n=n.sibling;return l.subtreeFlags|=a,l.childLanes=u,t}function hh(l,t,u){var a=t.pendingProps;switch(wc(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return w(t),null;case 1:return w(t),null;case 3:return u=t.stateNode,a=null,l!==null&&(a=l.memoizedState.cache),t.memoizedState.cache!==a&&(t.flags|=2048),ot(ll),Ju(),u.pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),(l===null||l.child===null)&&(ma(t)?et(t):l===null||l.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,_0())),w(t),null;case 26:return u=t.memoizedState,l===null?(et(t),u!==null?(w(t),k0(t,u)):(w(t),t.flags&=-16777217)):u?u!==l.memoizedState?(et(t),w(t),k0(t,u)):(w(t),t.flags&=-16777217):(l.memoizedProps!==a&&et(t),w(t),t.flags&=-16777217),null;case 27:Pn(t),u=Xt.current;var n=t.type;if(l!==null&&t.stateNode!=null)l.memoizedProps!==a&&et(t);else{if(!a){if(t.stateNode===null)throw Error(b(166));return w(t),null}l=Il.current,ma(t)?r0(t,l):(l=wv(n,a,u),t.stateNode=l,et(t))}return w(t),null;case 5:if(Pn(t),u=t.type,l!==null&&t.stateNode!=null)l.memoizedProps!==a&&et(t);else{if(!a){if(t.stateNode===null)throw Error(b(166));return w(t),null}if(l=Il.current,ma(t))r0(t,l);else{switch(n=Ae(Xt.current),l){case 1:l=n.createElementNS("http://www.w3.org/2000/svg",u);break;case 2:l=n.createElementNS("http://www.w3.org/1998/Math/MathML",u);break;default:switch(u){case"svg":l=n.createElementNS("http://www.w3.org/2000/svg",u);break;case"math":l=n.createElementNS("http://www.w3.org/1998/Math/MathML",u);break;case"script":l=n.createElement("div"),l.innerHTML="<script><\/script>",l=l.removeChild(l.firstChild);break;case"select":l=typeof a.is=="string"?n.createElement("select",{is:a.is}):n.createElement("select"),a.multiple?l.multiple=!0:a.size&&(l.size=a.size);break;default:l=typeof a.is=="string"?n.createElement(u,{is:a.is}):n.createElement(u)}}l[hl]=t,l[Ol]=a;l:for(n=t.child;n!==null;){if(n.tag===5||n.tag===6)l.appendChild(n.stateNode);else if(n.tag!==4&&n.tag!==27&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break l;for(;n.sibling===null;){if(n.return===null||n.return===t)break l;n=n.return}n.sibling.return=n.return,n=n.sibling}t.stateNode=l;l:switch(vl(l,u,a),u){case"button":case"input":case"select":case"textarea":l=!!a.autoFocus;break l;case"img":l=!0;break l;default:l=!1}l&&et(t)}}return w(t),t.flags&=-16777217,null;case 6:if(l&&t.stateNode!=null)l.memoizedProps!==a&&et(t);else{if(typeof a!="string"&&t.stateNode===null)throw Error(b(166));if(l=Xt.current,ma(t)){if(l=t.stateNode,u=t.memoizedProps,a=null,n=Tl,n!==null)switch(n.tag){case 27:case 5:a=n.memoizedProps}l[hl]=t,l=!!(l.nodeValue===u||a!==null&&a.suppressHydrationWarning===!0||Kv(l.nodeValue,u)),l||cu(t)}else l=Ae(l).createTextNode(a),l[hl]=t,t.stateNode=l}return w(t),null;case 13:if(a=t.memoizedState,l===null||l.memoizedState!==null&&l.memoizedState.dehydrated!==null){if(n=ma(t),a!==null&&a.dehydrated!==null){if(l===null){if(!n)throw Error(b(318));if(n=t.memoizedState,n=n!==null?n.dehydrated:null,!n)throw Error(b(317));n[hl]=t}else en(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;w(t),n=!1}else n=_0(),l!==null&&l.memoizedState!==null&&(l.memoizedState.hydrationErrors=n),n=!0;if(!n)return t.flags&256?(st(t),t):(st(t),null)}if(st(t),(t.flags&128)!==0)return t.lanes=u,t;if(u=a!==null,l=l!==null&&l.memoizedState!==null,u){a=t.child,n=null,a.alternate!==null&&a.alternate.memoizedState!==null&&a.alternate.memoizedState.cachePool!==null&&(n=a.alternate.memoizedState.cachePool.pool);var e=null;a.memoizedState!==null&&a.memoizedState.cachePool!==null&&(e=a.memoizedState.cachePool.pool),e!==n&&(a.flags|=2048)}return u!==l&&u&&(t.child.flags|=8192),pn(t,t.updateQueue),w(t),null;case 4:return Ju(),l===null&&bi(t.stateNode.containerInfo),w(t),null;case 10:return ot(t.type),w(t),null;case 19:if(cl(tl),n=t.memoizedState,n===null)return w(t),null;if(a=(t.flags&128)!==0,e=n.rendering,e===null)if(a)ga(n,!1);else{if($!==0||l!==null&&(l.flags&128)!==0)for(l=t.child;l!==null;){if(e=de(l),e!==null){for(t.flags|=128,ga(n,!1),l=e.updateQueue,t.updateQueue=l,pn(t,l),t.subtreeFlags=0,l=u,u=t.child;u!==null;)iy(u,l),u=u.sibling;return L(tl,tl.current&1|2),t.child}l=l.sibling}n.tail!==null&&Pl()>Se&&(t.flags|=128,a=!0,ga(n,!1),t.lanes=4194304)}else{if(!a)if(l=de(e),l!==null){if(t.flags|=128,a=!0,l=l.updateQueue,t.updateQueue=l,pn(t,l),ga(n,!0),n.tail===null&&n.tailMode==="hidden"&&!e.alternate&&!p)return w(t),null}else 2*Pl()-n.renderingStartTime>Se&&u!==536870912&&(t.flags|=128,a=!0,ga(n,!1),t.lanes=4194304);n.isBackwards?(e.sibling=t.child,t.child=e):(l=n.last,l!==null?l.sibling=e:t.child=e,n.last=e)}return n.tail!==null?(t=n.tail,n.rendering=t,n.tail=t.sibling,n.renderingStartTime=Pl(),t.sibling=null,l=tl.current,L(tl,a?l&1|2:l&1),t):(w(t),null);case 22:case 23:return st(t),Fc(),a=t.memoizedState!==null,l!==null?l.memoizedState!==null!==a&&(t.flags|=8192):a&&(t.flags|=8192),a?(u&536870912)!==0&&(t.flags&128)===0&&(w(t),t.subtreeFlags&6&&(t.flags|=8192)):w(t),u=t.updateQueue,u!==null&&pn(t,u.retryQueue),u=null,l!==null&&l.memoizedState!==null&&l.memoizedState.cachePool!==null&&(u=l.memoizedState.cachePool.pool),a=null,t.memoizedState!==null&&t.memoizedState.cachePool!==null&&(a=t.memoizedState.cachePool.pool),a!==u&&(t.flags|=2048),l!==null&&cl(nu),null;case 24:return u=null,l!==null&&(u=l.memoizedState.cache),t.memoizedState.cache!==u&&(t.flags|=2048),ot(ll),w(t),null;case 25:return null;case 30:return null}throw Error(b(156,t.tag))}function oh(l,t){switch(wc(t),t.tag){case 1:return l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 3:return ot(ll),Ju(),l=t.flags,(l&65536)!==0&&(l&128)===0?(t.flags=l&-65537|128,t):null;case 26:case 27:case 5:return Pn(t),null;case 13:if(st(t),l=t.memoizedState,l!==null&&l.dehydrated!==null){if(t.alternate===null)throw Error(b(340));en()}return l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 19:return cl(tl),null;case 4:return Ju(),null;case 10:return ot(t.type),null;case 22:case 23:return st(t),Fc(),l!==null&&cl(nu),l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 24:return ot(ll),null;case 25:return null;default:return null}}function iv(l,t){switch(wc(t),t.tag){case 3:ot(ll),Ju();break;case 26:case 27:case 5:Pn(t);break;case 4:Ju();break;case 13:st(t);break;case 19:cl(tl);break;case 10:ot(t.type);break;case 22:case 23:st(t),Fc(),l!==null&&cl(nu);break;case 24:ot(ll)}}function sn(l,t){try{var u=t.updateQueue,a=u!==null?u.lastEffect:null;if(a!==null){var n=a.next;u=n;do{if((u.tag&l)===l){a=void 0;var e=u.create,f=u.inst;a=e(),f.destroy=a}u=u.next}while(u!==n)}}catch(c){Z(t,t.return,c)}}function Jt(l,t,u){try{var a=t.updateQueue,n=a!==null?a.lastEffect:null;if(n!==null){var e=n.next;a=e;do{if((a.tag&l)===l){var f=a.inst,c=f.destroy;if(c!==void 0){f.destroy=void 0,n=t;var i=u,d=c;try{d()}catch(m){Z(n,i,m)}}}a=a.next}while(a!==e)}}catch(m){Z(t,t.return,m)}}function yv(l){var t=l.updateQueue;if(t!==null){var u=l.stateNode;try{my(t,u)}catch(a){Z(l,l.return,a)}}}function vv(l,t,u){u.props=vu(l.type,l.memoizedProps),u.state=l.memoizedState;try{u.componentWillUnmount()}catch(a){Z(l,t,a)}}function Ra(l,t){try{var u=l.ref;if(u!==null){switch(l.tag){case 26:case 27:case 5:var a=l.stateNode;break;case 30:a=l.stateNode;break;default:a=l.stateNode}typeof u=="function"?l.refCleanup=u(a):u.current=a}}catch(n){Z(l,t,n)}}function Fl(l,t){var u=l.ref,a=l.refCleanup;if(u!==null)if(typeof a=="function")try{a()}catch(n){Z(l,t,n)}finally{l.refCleanup=null,l=l.alternate,l!=null&&(l.refCleanup=null)}else if(typeof u=="function")try{u(null)}catch(n){Z(l,t,n)}else u.current=null}function dv(l){var t=l.type,u=l.memoizedProps,a=l.stateNode;try{l:switch(t){case"button":case"input":case"select":case"textarea":u.autoFocus&&a.focus();break l;case"img":u.src?a.src=u.src:u.srcSet&&(a.srcset=u.srcSet)}}catch(n){Z(l,l.return,n)}}function _f(l,t,u){try{var a=l.stateNode;Yh(a,l.type,u,t),a[Ol]=t}catch(n){Z(l,l.return,n)}}function sv(l){return l.tag===5||l.tag===3||l.tag===26||l.tag===27&&$t(l.type)||l.tag===4}function Df(l){l:for(;;){for(;l.sibling===null;){if(l.return===null||sv(l.return))return null;l=l.return}for(l.sibling.return=l.return,l=l.sibling;l.tag!==5&&l.tag!==6&&l.tag!==18;){if(l.tag===27&&$t(l.type)||l.flags&2||l.child===null||l.tag===4)continue l;l.child.return=l,l=l.child}if(!(l.flags&2))return l.stateNode}}function oc(l,t,u){var a=l.tag;if(a===5||a===6)l=l.stateNode,t?(u.nodeType===9?u.body:u.nodeName==="HTML"?u.ownerDocument.body:u).insertBefore(l,t):(t=u.nodeType===9?u.body:u.nodeName==="HTML"?u.ownerDocument.body:u,t.appendChild(l),u=u._reactRootContainer,u!=null||t.onclick!==null||(t.onclick=xe));else if(a!==4&&(a===27&&$t(l.type)&&(u=l.stateNode,t=null),l=l.child,l!==null))for(oc(l,t,u),l=l.sibling;l!==null;)oc(l,t,u),l=l.sibling}function me(l,t,u){var a=l.tag;if(a===5||a===6)l=l.stateNode,t?u.insertBefore(l,t):u.appendChild(l);else if(a!==4&&(a===27&&$t(l.type)&&(u=l.stateNode),l=l.child,l!==null))for(me(l,t,u),l=l.sibling;l!==null;)me(l,t,u),l=l.sibling}function hv(l){var t=l.stateNode,u=l.memoizedProps;try{for(var a=l.type,n=t.attributes;n.length;)t.removeAttributeNode(n[0]);vl(t,a,u),t[hl]=l,t[Ol]=u}catch(e){Z(l,l.return,e)}}var ct=!1,F=!1,Uf=!1,F0=typeof WeakSet=="function"?WeakSet:Set,nl=null;function mh(l,t){if(l=l.containerInfo,zc=Me,l=ly(l),Cc(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else l:{u=(u=l.ownerDocument)&&u.defaultView||window;var a=u.getSelection&&u.getSelection();if(a&&a.rangeCount!==0){u=a.anchorNode;var n=a.anchorOffset,e=a.focusNode;a=a.focusOffset;try{u.nodeType,e.nodeType}catch{u=null;break l}var f=0,c=-1,i=-1,d=0,m=0,g=l,h=null;t:for(;;){for(var o;g!==u||n!==0&&g.nodeType!==3||(c=f+n),g!==e||a!==0&&g.nodeType!==3||(i=f+a),g.nodeType===3&&(f+=g.nodeValue.length),(o=g.firstChild)!==null;)h=g,g=o;for(;;){if(g===l)break t;if(h===u&&++d===n&&(c=f),h===e&&++m===a&&(i=f),(o=g.nextSibling)!==null)break;g=h,h=g.parentNode}g=o}u=c===-1||i===-1?null:{start:c,end:i}}else u=null}u=u||{start:0,end:0}}else u=null;for(Oc={focusedElem:l,selectionRange:u},Me=!1,nl=t;nl!==null;)if(t=nl,l=t.child,(t.subtreeFlags&1024)!==0&&l!==null)l.return=t,nl=l;else for(;nl!==null;){switch(t=nl,e=t.alternate,l=t.flags,t.tag){case 0:break;case 11:case 15:break;case 1:if((l&1024)!==0&&e!==null){l=void 0,u=t,n=e.memoizedProps,e=e.memoizedState,a=u.stateNode;try{var O=vu(u.type,n,u.elementType===u.type);l=a.getSnapshotBeforeUpdate(O,e),a.__reactInternalSnapshotBeforeUpdate=l}catch(A){Z(u,u.return,A)}}break;case 3:if((l&1024)!==0){if(l=t.stateNode.containerInfo,u=l.nodeType,u===9)Mc(l);else if(u===1)switch(l.nodeName){case"HEAD":case"HTML":case"BODY":Mc(l);break;default:l.textContent=""}}break;case 5:case 26:case 27:case 6:case 4:case 17:break;default:if((l&1024)!==0)throw Error(b(163))}if(l=t.sibling,l!==null){l.return=t.return,nl=l;break}nl=t.return}}function ov(l,t,u){var a=u.flags;switch(u.tag){case 0:case 11:case 15:Mt(l,u),a&4&&sn(5,u);break;case 1:if(Mt(l,u),a&4)if(l=u.stateNode,t===null)try{l.componentDidMount()}catch(f){Z(u,u.return,f)}else{var n=vu(u.type,t.memoizedProps);t=t.memoizedState;try{l.componentDidUpdate(n,t,l.__reactInternalSnapshotBeforeUpdate)}catch(f){Z(u,u.return,f)}}a&64&&yv(u),a&512&&Ra(u,u.return);break;case 3:if(Mt(l,u),a&64&&(l=u.updateQueue,l!==null)){if(t=null,u.child!==null)switch(u.child.tag){case 27:case 5:t=u.child.stateNode;break;case 1:t=u.child.stateNode}try{my(l,t)}catch(f){Z(u,u.return,f)}}break;case 27:t===null&&a&4&&hv(u);case 26:case 5:Mt(l,u),t===null&&a&4&&dv(u),a&512&&Ra(u,u.return);break;case 12:Mt(l,u);break;case 13:Mt(l,u),a&4&&gv(l,u),a&64&&(l=u.memoizedState,l!==null&&(l=l.dehydrated,l!==null&&(u=rh.bind(null,u),xh(l,u))));break;case 22:if(a=u.memoizedState!==null||ct,!a){t=t!==null&&t.memoizedState!==null||F,n=ct;var e=F;ct=a,(F=t)&&!e?_t(l,u,(u.subtreeFlags&8772)!==0):Mt(l,u),ct=n,F=e}break;case 30:break;default:Mt(l,u)}}function mv(l){var t=l.alternate;t!==null&&(l.alternate=null,mv(t)),l.child=null,l.deletions=null,l.sibling=null,l.tag===5&&(t=l.stateNode,t!==null&&Gc(t)),l.stateNode=null,l.return=null,l.dependencies=null,l.memoizedProps=null,l.memoizedState=null,l.pendingProps=null,l.stateNode=null,l.updateQueue=null}var K=null,Al=!1;function ft(l,t,u){for(u=u.child;u!==null;)Sv(l,t,u),u=u.sibling}function Sv(l,t,u){if(Hl&&typeof Hl.onCommitFiberUnmount=="function")try{Hl.onCommitFiberUnmount(ln,u)}catch{}switch(u.tag){case 26:F||Fl(u,t),ft(l,t,u),u.memoizedState?u.memoizedState.count--:u.stateNode&&(u=u.stateNode,u.parentNode.removeChild(u));break;case 27:F||Fl(u,t);var a=K,n=Al;$t(u.type)&&(K=u.stateNode,Al=!1),ft(l,t,u),Qa(u.stateNode),K=a,Al=n;break;case 5:F||Fl(u,t);case 6:if(a=K,n=Al,K=null,ft(l,t,u),K=a,Al=n,K!==null)if(Al)try{(K.nodeType===9?K.body:K.nodeName==="HTML"?K.ownerDocument.body:K).removeChild(u.stateNode)}catch(e){Z(u,t,e)}else try{K.removeChild(u.stateNode)}catch(e){Z(u,t,e)}break;case 18:K!==null&&(Al?(l=K,d1(l.nodeType===9?l.body:l.nodeName==="HTML"?l.ownerDocument.body:l,u.stateNode),Ia(l)):d1(K,u.stateNode));break;case 4:a=K,n=Al,K=u.stateNode.containerInfo,Al=!0,ft(l,t,u),K=a,Al=n;break;case 0:case 11:case 14:case 15:F||Jt(2,u,t),F||Jt(4,u,t),ft(l,t,u);break;case 1:F||(Fl(u,t),a=u.stateNode,typeof a.componentWillUnmount=="function"&&vv(u,t,a)),ft(l,t,u);break;case 21:ft(l,t,u);break;case 22:F=(a=F)||u.memoizedState!==null,ft(l,t,u),F=a;break;default:ft(l,t,u)}}function gv(l,t){if(t.memoizedState===null&&(l=t.alternate,l!==null&&(l=l.memoizedState,l!==null&&(l=l.dehydrated,l!==null))))try{Ia(l)}catch(u){Z(t,t.return,u)}}function Sh(l){switch(l.tag){case 13:case 19:var t=l.stateNode;return t===null&&(t=l.stateNode=new F0),t;case 22:return l=l.stateNode,t=l._retryCache,t===null&&(t=l._retryCache=new F0),t;default:throw Error(b(435,l.tag))}}function Nf(l,t){var u=Sh(l);t.forEach(function(a){var n=Mh.bind(null,l,a);u.has(a)||(u.add(a),a.then(n,n))})}function _l(l,t){var u=t.deletions;if(u!==null)for(var a=0;a<u.length;a++){var n=u[a],e=l,f=t,c=f;l:for(;c!==null;){switch(c.tag){case 27:if($t(c.type)){K=c.stateNode,Al=!1;break l}break;case 5:K=c.stateNode,Al=!1;break l;case 3:case 4:K=c.stateNode.containerInfo,Al=!0;break l}c=c.return}if(K===null)throw Error(b(160));Sv(e,f,n),K=null,Al=!1,e=n.alternate,e!==null&&(e.return=null),n.return=null}if(t.subtreeFlags&13878)for(t=t.child;t!==null;)bv(t,l),t=t.sibling}var Ll=null;function bv(l,t){var u=l.alternate,a=l.flags;switch(l.tag){case 0:case 11:case 14:case 15:_l(t,l),Dl(l),a&4&&(Jt(3,l,l.return),sn(3,l),Jt(5,l,l.return));break;case 1:_l(t,l),Dl(l),a&512&&(F||u===null||Fl(u,u.return)),a&64&&ct&&(l=l.updateQueue,l!==null&&(a=l.callbacks,a!==null&&(u=l.shared.hiddenCallbacks,l.shared.hiddenCallbacks=u===null?a:u.concat(a))));break;case 26:var n=Ll;if(_l(t,l),Dl(l),a&512&&(F||u===null||Fl(u,u.return)),a&4){var e=u!==null?u.memoizedState:null;if(a=l.memoizedState,u===null)if(a===null)if(l.stateNode===null){l:{a=l.type,u=l.memoizedProps,n=n.ownerDocument||n;t:switch(a){case"title":e=n.getElementsByTagName("title")[0],(!e||e[an]||e[hl]||e.namespaceURI==="http://www.w3.org/2000/svg"||e.hasAttribute("itemprop"))&&(e=n.createElement(a),n.head.insertBefore(e,n.querySelector("head > title"))),vl(e,a,u),e[hl]=l,el(e),a=e;break l;case"link":var f=S1("link","href",n).get(a+(u.href||""));if(f){for(var c=0;c<f.length;c++)if(e=f[c],e.getAttribute("href")===(u.href==null||u.href===""?null:u.href)&&e.getAttribute("rel")===(u.rel==null?null:u.rel)&&e.getAttribute("title")===(u.title==null?null:u.title)&&e.getAttribute("crossorigin")===(u.crossOrigin==null?null:u.crossOrigin)){f.splice(c,1);break t}}e=n.createElement(a),vl(e,a,u),n.head.appendChild(e);break;case"meta":if(f=S1("meta","content",n).get(a+(u.content||""))){for(c=0;c<f.length;c++)if(e=f[c],e.getAttribute("content")===(u.content==null?null:""+u.content)&&e.getAttribute("name")===(u.name==null?null:u.name)&&e.getAttribute("property")===(u.property==null?null:u.property)&&e.getAttribute("http-equiv")===(u.httpEquiv==null?null:u.httpEquiv)&&e.getAttribute("charset")===(u.charSet==null?null:u.charSet)){f.splice(c,1);break t}}e=n.createElement(a),vl(e,a,u),n.head.appendChild(e);break;default:throw Error(b(468,a))}e[hl]=l,el(e),a=e}l.stateNode=a}else g1(n,l.type,l.stateNode);else l.stateNode=m1(n,a,l.memoizedProps);else e!==a?(e===null?u.stateNode!==null&&(u=u.stateNode,u.parentNode.removeChild(u)):e.count--,a===null?g1(n,l.type,l.stateNode):m1(n,a,l.memoizedProps)):a===null&&l.stateNode!==null&&_f(l,l.memoizedProps,u.memoizedProps)}break;case 27:_l(t,l),Dl(l),a&512&&(F||u===null||Fl(u,u.return)),u!==null&&a&4&&_f(l,l.memoizedProps,u.memoizedProps);break;case 5:if(_l(t,l),Dl(l),a&512&&(F||u===null||Fl(u,u.return)),l.flags&32){n=l.stateNode;try{Wu(n,"")}catch(o){Z(l,l.return,o)}}a&4&&l.stateNode!=null&&(n=l.memoizedProps,_f(l,n,u!==null?u.memoizedProps:n)),a&1024&&(Uf=!0);break;case 6:if(_l(t,l),Dl(l),a&4){if(l.stateNode===null)throw Error(b(162));a=l.memoizedProps,u=l.stateNode;try{u.nodeValue=a}catch(o){Z(l,l.return,o)}}break;case 3:if($n=null,n=Ll,Ll=ze(t.containerInfo),_l(t,l),Ll=n,Dl(l),a&4&&u!==null&&u.memoizedState.isDehydrated)try{Ia(t.containerInfo)}catch(o){Z(l,l.return,o)}Uf&&(Uf=!1,Tv(l));break;case 4:a=Ll,Ll=ze(l.stateNode.containerInfo),_l(t,l),Dl(l),Ll=a;break;case 12:_l(t,l),Dl(l);break;case 13:_l(t,l),Dl(l),l.child.flags&8192&&l.memoizedState!==null!=(u!==null&&u.memoizedState!==null)&&(mi=Pl()),a&4&&(a=l.updateQueue,a!==null&&(l.updateQueue=null,Nf(l,a)));break;case 22:n=l.memoizedState!==null;var i=u!==null&&u.memoizedState!==null,d=ct,m=F;if(ct=d||n,F=m||i,_l(t,l),F=m,ct=d,Dl(l),a&8192)l:for(t=l.stateNode,t._visibility=n?t._visibility&-2:t._visibility|1,n&&(u===null||i||ct||F||Pt(l)),u=null,t=l;;){if(t.tag===5||t.tag===26){if(u===null){i=u=t;try{if(e=i.stateNode,n)f=e.style,typeof f.setProperty=="function"?f.setProperty("display","none","important"):f.display="none";else{c=i.stateNode;var g=i.memoizedProps.style,h=g!=null&&g.hasOwnProperty("display")?g.display:null;c.style.display=h==null||typeof h=="boolean"?"":(""+h).trim()}}catch(o){Z(i,i.return,o)}}}else if(t.tag===6){if(u===null){i=t;try{i.stateNode.nodeValue=n?"":i.memoizedProps}catch(o){Z(i,i.return,o)}}}else if((t.tag!==22&&t.tag!==23||t.memoizedState===null||t===l)&&t.child!==null){t.child.return=t,t=t.child;continue}if(t===l)break l;for(;t.sibling===null;){if(t.return===null||t.return===l)break l;u===t&&(u=null),t=t.return}u===t&&(u=null),t.sibling.return=t.return,t=t.sibling}a&4&&(a=l.updateQueue,a!==null&&(u=a.retryQueue,u!==null&&(a.retryQueue=null,Nf(l,u))));break;case 19:_l(t,l),Dl(l),a&4&&(a=l.updateQueue,a!==null&&(l.updateQueue=null,Nf(l,a)));break;case 30:break;case 21:break;default:_l(t,l),Dl(l)}}function Dl(l){var t=l.flags;if(t&2){try{for(var u,a=l.return;a!==null;){if(sv(a)){u=a;break}a=a.return}if(u==null)throw Error(b(160));switch(u.tag){case 27:var n=u.stateNode,e=Df(l);me(l,e,n);break;case 5:var f=u.stateNode;u.flags&32&&(Wu(f,""),u.flags&=-33);var c=Df(l);me(l,c,f);break;case 3:case 4:var i=u.stateNode.containerInfo,d=Df(l);oc(l,d,i);break;default:throw Error(b(161))}}catch(m){Z(l,l.return,m)}l.flags&=-3}t&4096&&(l.flags&=-4097)}function Tv(l){if(l.subtreeFlags&1024)for(l=l.child;l!==null;){var t=l;Tv(t),t.tag===5&&t.flags&1024&&t.stateNode.reset(),l=l.sibling}}function Mt(l,t){if(t.subtreeFlags&8772)for(t=t.child;t!==null;)ov(l,t.alternate,t),t=t.sibling}function Pt(l){for(l=l.child;l!==null;){var t=l;switch(t.tag){case 0:case 11:case 14:case 15:Jt(4,t,t.return),Pt(t);break;case 1:Fl(t,t.return);var u=t.stateNode;typeof u.componentWillUnmount=="function"&&vv(t,t.return,u),Pt(t);break;case 27:Qa(t.stateNode);case 26:case 5:Fl(t,t.return),Pt(t);break;case 22:t.memoizedState===null&&Pt(t);break;case 30:Pt(t);break;default:Pt(t)}l=l.sibling}}function _t(l,t,u){for(u=u&&(t.subtreeFlags&8772)!==0,t=t.child;t!==null;){var a=t.alternate,n=l,e=t,f=e.flags;switch(e.tag){case 0:case 11:case 15:_t(n,e,u),sn(4,e);break;case 1:if(_t(n,e,u),a=e,n=a.stateNode,typeof n.componentDidMount=="function")try{n.componentDidMount()}catch(d){Z(a,a.return,d)}if(a=e,n=a.updateQueue,n!==null){var c=a.stateNode;try{var i=n.shared.hiddenCallbacks;if(i!==null)for(n.shared.hiddenCallbacks=null,n=0;n<i.length;n++)oy(i[n],c)}catch(d){Z(a,a.return,d)}}u&&f&64&&yv(e),Ra(e,e.return);break;case 27:hv(e);case 26:case 5:_t(n,e,u),u&&a===null&&f&4&&dv(e),Ra(e,e.return);break;case 12:_t(n,e,u);break;case 13:_t(n,e,u),u&&f&4&&gv(n,e);break;case 22:e.memoizedState===null&&_t(n,e,u),Ra(e,e.return);break;case 30:break;default:_t(n,e,u)}t=t.sibling}}function di(l,t){var u=null;l!==null&&l.memoizedState!==null&&l.memoizedState.cachePool!==null&&(u=l.memoizedState.cachePool.pool),l=null,t.memoizedState!==null&&t.memoizedState.cachePool!==null&&(l=t.memoizedState.cachePool.pool),l!==u&&(l!=null&&l.refCount++,u!=null&&cn(u))}function si(l,t){l=null,t.alternate!==null&&(l=t.alternate.memoizedState.cache),t=t.memoizedState.cache,t!==l&&(t.refCount++,l!=null&&cn(l))}function $l(l,t,u,a){if(t.subtreeFlags&10256)for(t=t.child;t!==null;)Ev(l,t,u,a),t=t.sibling}function Ev(l,t,u,a){var n=t.flags;switch(t.tag){case 0:case 11:case 15:$l(l,t,u,a),n&2048&&sn(9,t);break;case 1:$l(l,t,u,a);break;case 3:$l(l,t,u,a),n&2048&&(l=null,t.alternate!==null&&(l=t.alternate.memoizedState.cache),t=t.memoizedState.cache,t!==l&&(t.refCount++,l!=null&&cn(l)));break;case 12:if(n&2048){$l(l,t,u,a),l=t.stateNode;try{var e=t.memoizedProps,f=e.id,c=e.onPostCommit;typeof c=="function"&&c(f,t.alternate===null?"mount":"update",l.passiveEffectDuration,-0)}catch(i){Z(t,t.return,i)}}else $l(l,t,u,a);break;case 13:$l(l,t,u,a);break;case 23:break;case 22:e=t.stateNode,f=t.alternate,t.memoizedState!==null?e._visibility&2?$l(l,t,u,a):Ba(l,t):e._visibility&2?$l(l,t,u,a):(e._visibility|=2,ru(l,t,u,a,(t.subtreeFlags&10256)!==0)),n&2048&&di(f,t);break;case 24:$l(l,t,u,a),n&2048&&si(t.alternate,t);break;default:$l(l,t,u,a)}}function ru(l,t,u,a,n){for(n=n&&(t.subtreeFlags&10256)!==0,t=t.child;t!==null;){var e=l,f=t,c=u,i=a,d=f.flags;switch(f.tag){case 0:case 11:case 15:ru(e,f,c,i,n),sn(8,f);break;case 23:break;case 22:var m=f.stateNode;f.memoizedState!==null?m._visibility&2?ru(e,f,c,i,n):Ba(e,f):(m._visibility|=2,ru(e,f,c,i,n)),n&&d&2048&&di(f.alternate,f);break;case 24:ru(e,f,c,i,n),n&&d&2048&&si(f.alternate,f);break;default:ru(e,f,c,i,n)}t=t.sibling}}function Ba(l,t){if(t.subtreeFlags&10256)for(t=t.child;t!==null;){var u=l,a=t,n=a.flags;switch(a.tag){case 22:Ba(u,a),n&2048&&di(a.alternate,a);break;case 24:Ba(u,a),n&2048&&si(a.alternate,a);break;default:Ba(u,a)}t=t.sibling}}var ra=8192;function Au(l){if(l.subtreeFlags&ra)for(l=l.child;l!==null;)Av(l),l=l.sibling}function Av(l){switch(l.tag){case 26:Au(l),l.flags&ra&&l.memoizedState!==null&&Ph(Ll,l.memoizedState,l.memoizedProps);break;case 5:Au(l);break;case 3:case 4:var t=Ll;Ll=ze(l.stateNode.containerInfo),Au(l),Ll=t;break;case 22:l.memoizedState===null&&(t=l.alternate,t!==null&&t.memoizedState!==null?(t=ra,ra=16777216,Au(l),ra=t):Au(l));break;default:Au(l)}}function zv(l){var t=l.alternate;if(t!==null&&(l=t.child,l!==null)){t.child=null;do t=l.sibling,l.sibling=null,l=t;while(l!==null)}}function ba(l){var t=l.deletions;if((l.flags&16)!==0){if(t!==null)for(var u=0;u<t.length;u++){var a=t[u];nl=a,rv(a,l)}zv(l)}if(l.subtreeFlags&10256)for(l=l.child;l!==null;)Ov(l),l=l.sibling}function Ov(l){switch(l.tag){case 0:case 11:case 15:ba(l),l.flags&2048&&Jt(9,l,l.return);break;case 3:ba(l);break;case 12:ba(l);break;case 22:var t=l.stateNode;l.memoizedState!==null&&t._visibility&2&&(l.return===null||l.return.tag!==13)?(t._visibility&=-3,wn(l)):ba(l);break;default:ba(l)}}function wn(l){var t=l.deletions;if((l.flags&16)!==0){if(t!==null)for(var u=0;u<t.length;u++){var a=t[u];nl=a,rv(a,l)}zv(l)}for(l=l.child;l!==null;){switch(t=l,t.tag){case 0:case 11:case 15:Jt(8,t,t.return),wn(t);break;case 22:u=t.stateNode,u._visibility&2&&(u._visibility&=-3,wn(t));break;default:wn(t)}l=l.sibling}}function rv(l,t){for(;nl!==null;){var u=nl;switch(u.tag){case 0:case 11:case 15:Jt(8,u,t);break;case 23:case 22:if(u.memoizedState!==null&&u.memoizedState.cachePool!==null){var a=u.memoizedState.cachePool.pool;a!=null&&a.refCount++}break;case 24:cn(u.memoizedState.cache)}if(a=u.child,a!==null)a.return=u,nl=a;else l:for(u=l;nl!==null;){a=nl;var n=a.sibling,e=a.return;if(mv(a),a===u){nl=null;break l}if(n!==null){n.return=e,nl=n;break l}nl=e}}}var gh={getCacheForType:function(l){var t=ol(ll),u=t.data.get(l);return u===void 0&&(u=l(),t.data.set(l,u)),u}},bh=typeof WeakMap=="function"?WeakMap:Map,B=0,x=null,N=null,H=0,R=0,Ul=null,Bt=!1,fa=!1,hi=!1,bt=0,$=0,wt=0,eu=0,oi=0,Cl=0,Pu=0,Ga=null,zl=null,mc=!1,mi=0,Se=1/0,ge=null,xt=null,yl=0,jt=null,la=null,Lu=0,Sc=0,gc=null,Mv=null,Xa=0,bc=null;function pl(){if((B&2)!==0&&H!==0)return H&-H;if(r.T!==null){var l=$u;return l!==0?l:gi()}return G1()}function _v(){Cl===0&&(Cl=(H&536870912)===0||p?p1():536870912);var l=Vl.current;return l!==null&&(l.flags|=32),Cl}function Yl(l,t,u){(l===x&&(R===2||R===9)||l.cancelPendingCommit!==null)&&(ta(l,0),Gt(l,H,Cl,!1)),un(l,u),((B&2)===0||l!==x)&&(l===x&&((B&2)===0&&(eu|=u),$===4&&Gt(l,H,Cl,!1)),ut(l))}function Dv(l,t,u){if((B&6)!==0)throw Error(b(327));var a=!u&&(t&124)===0&&(t&l.expiredLanes)===0||tn(l,t),n=a?Ah(l,t):Hf(l,t,!0),e=a;do{if(n===0){fa&&!a&&Gt(l,t,0,!1);break}else{if(u=l.current.alternate,e&&!Th(u)){n=Hf(l,t,!1),e=!1;continue}if(n===2){if(e=t,l.errorRecoveryDisabledLanes&e)var f=0;else f=l.pendingLanes&-536870913,f=f!==0?f:f&536870912?536870912:0;if(f!==0){t=f;l:{var c=l;n=Ga;var i=c.current.memoizedState.isDehydrated;if(i&&(ta(c,f).flags|=256),f=Hf(c,f,!1),f!==2){if(hi&&!i){c.errorRecoveryDisabledLanes|=e,eu|=e,n=4;break l}e=zl,zl=n,e!==null&&(zl===null?zl=e:zl.push.apply(zl,e))}n=f}if(e=!1,n!==2)continue}}if(n===1){ta(l,0),Gt(l,t,0,!0);break}l:{switch(a=l,e=n,e){case 0:case 1:throw Error(b(345));case 4:if((t&4194048)!==t)break;case 6:Gt(a,t,Cl,!Bt);break l;case 2:zl=null;break;case 3:case 5:break;default:throw Error(b(329))}if((t&62914560)===t&&(n=mi+300-Pl(),10<n)){if(Gt(a,t,Cl,!Bt),De(a,0,!0)!==0)break l;a.timeoutHandle=Jv(I0.bind(null,a,u,zl,ge,mc,t,Cl,eu,Pu,Bt,e,2,-0,0),n);break l}I0(a,u,zl,ge,mc,t,Cl,eu,Pu,Bt,e,0,-0,0)}}break}while(!0);ut(l)}function I0(l,t,u,a,n,e,f,c,i,d,m,g,h,o){if(l.timeoutHandle=-1,g=t.subtreeFlags,(g&8192||(g&16785408)===16785408)&&(Wa={stylesheets:null,count:0,unsuspend:Ih},Av(t),g=lo(),g!==null)){l.cancelPendingCommit=g(l1.bind(null,l,t,e,u,a,n,f,c,i,m,1,h,o)),Gt(l,e,f,!d);return}l1(l,t,e,u,a,n,f,c,i)}function Th(l){for(var t=l;;){var u=t.tag;if((u===0||u===11||u===15)&&t.flags&16384&&(u=t.updateQueue,u!==null&&(u=u.stores,u!==null)))for(var a=0;a<u.length;a++){var n=u[a],e=n.getSnapshot;n=n.value;try{if(!Rl(e(),n))return!1}catch{return!1}}if(u=t.child,t.subtreeFlags&16384&&u!==null)u.return=t,t=u;else{if(t===l)break;for(;t.sibling===null;){if(t.return===null||t.return===l)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Gt(l,t,u,a){t&=~oi,t&=~eu,l.suspendedLanes|=t,l.pingedLanes&=~t,a&&(l.warmLanes|=t),a=l.expirationTimes;for(var n=t;0<n;){var e=31-ql(n),f=1<<e;a[e]=-1,n&=~f}u!==0&&R1(l,u,t)}function Xe(){return(B&6)===0?(hn(0,!1),!1):!0}function Si(){if(N!==null){if(R===0)var l=N.return;else l=N,dt=ou=null,ui(l),Ku=null,La=0,l=N;for(;l!==null;)iv(l.alternate,l),l=l.return;N=null}}function ta(l,t){var u=l.timeoutHandle;u!==-1&&(l.timeoutHandle=-1,Bh(u)),u=l.cancelPendingCommit,u!==null&&(l.cancelPendingCommit=null,u()),Si(),x=l,N=u=ht(l.current,null),H=t,R=0,Ul=null,Bt=!1,fa=tn(l,t),hi=!1,Pu=Cl=oi=eu=wt=$=0,zl=Ga=null,mc=!1,(t&8)!==0&&(t|=t&32);var a=l.entangledLanes;if(a!==0)for(l=l.entanglements,a&=t;0<a;){var n=31-ql(a),e=1<<n;t|=l[n],a&=~e}return bt=t,qe(),u}function Uv(l,t){_=null,r.H=ve,t===yn||t===Ye?(t=H0(),R=3):t===sy?(t=H0(),R=4):R=t===uv?8:t!==null&&typeof t=="object"&&typeof t.then=="function"?6:1,Ul=t,N===null&&($=1,he(l,jl(t,l.current)))}function Nv(){var l=r.H;return r.H=ve,l===null?ve:l}function Hv(){var l=r.A;return r.A=gh,l}function Tc(){$=4,Bt||(H&4194048)!==H&&Vl.current!==null||(fa=!0),(wt&134217727)===0&&(eu&134217727)===0||x===null||Gt(x,H,Cl,!1)}function Hf(l,t,u){var a=B;B|=2;var n=Nv(),e=Hv();(x!==l||H!==t)&&(ge=null,ta(l,t)),t=!1;var f=$;l:do try{if(R!==0&&N!==null){var c=N,i=Ul;switch(R){case 8:Si(),f=6;break l;case 3:case 2:case 9:case 6:Vl.current===null&&(t=!0);var d=R;if(R=0,Ul=null,Xu(l,c,i,d),u&&fa){f=0;break l}break;default:d=R,R=0,Ul=null,Xu(l,c,i,d)}}Eh(),f=$;break}catch(m){Uv(l,m)}while(!0);return t&&l.shellSuspendCounter++,dt=ou=null,B=a,r.H=n,r.A=e,N===null&&(x=null,H=0,qe()),f}function Eh(){for(;N!==null;)qv(N)}function Ah(l,t){var u=B;B|=2;var a=Nv(),n=Hv();x!==l||H!==t?(ge=null,Se=Pl()+500,ta(l,t)):fa=tn(l,t);l:do try{if(R!==0&&N!==null){t=N;var e=Ul;t:switch(R){case 1:R=0,Ul=null,Xu(l,t,e,1);break;case 2:case 9:if(N0(e)){R=0,Ul=null,P0(t);break}t=function(){R!==2&&R!==9||x!==l||(R=7),ut(l)},e.then(t,t);break l;case 3:R=7;break l;case 4:R=5;break l;case 7:N0(e)?(R=0,Ul=null,P0(t)):(R=0,Ul=null,Xu(l,t,e,7));break;case 5:var f=null;switch(N.tag){case 26:f=N.memoizedState;case 5:case 27:var c=N;if(!f||kv(f)){R=0,Ul=null;var i=c.sibling;if(i!==null)N=i;else{var d=c.return;d!==null?(N=d,Qe(d)):N=null}break t}}R=0,Ul=null,Xu(l,t,e,5);break;case 6:R=0,Ul=null,Xu(l,t,e,6);break;case 8:Si(),$=6;break l;default:throw Error(b(462))}}zh();break}catch(m){Uv(l,m)}while(!0);return dt=ou=null,r.H=a,r.A=n,B=u,N!==null?0:(x=null,H=0,qe(),$)}function zh(){for(;N!==null&&!Kd();)qv(N)}function qv(l){var t=cv(l.alternate,l,bt);l.memoizedProps=l.pendingProps,t===null?Qe(l):N=t}function P0(l){var t=l,u=t.alternate;switch(t.tag){case 15:case 0:t=J0(u,t,t.pendingProps,t.type,void 0,H);break;case 11:t=J0(u,t,t.pendingProps,t.type.render,t.ref,H);break;case 5:ui(t);default:iv(u,t),t=N=iy(t,bt),t=cv(u,t,bt)}l.memoizedProps=l.pendingProps,t===null?Qe(l):N=t}function Xu(l,t,u,a){dt=ou=null,ui(t),Ku=null,La=0;var n=t.return;try{if(dh(l,n,t,u,H)){$=1,he(l,jl(u,l.current)),N=null;return}}catch(e){if(n!==null)throw N=n,e;$=1,he(l,jl(u,l.current)),N=null;return}t.flags&32768?(p||a===1?l=!0:fa||(H&536870912)!==0?l=!1:(Bt=l=!0,(a===2||a===9||a===3||a===6)&&(a=Vl.current,a!==null&&a.tag===13&&(a.flags|=16384))),pv(t,l)):Qe(t)}function Qe(l){var t=l;do{if((t.flags&32768)!==0){pv(t,Bt);return}l=t.return;var u=hh(t.alternate,t,bt);if(u!==null){N=u;return}if(t=t.sibling,t!==null){N=t;return}N=t=l}while(t!==null);$===0&&($=5)}function pv(l,t){do{var u=oh(l.alternate,l);if(u!==null){u.flags&=32767,N=u;return}if(u=l.return,u!==null&&(u.flags|=32768,u.subtreeFlags=0,u.deletions=null),!t&&(l=l.sibling,l!==null)){N=l;return}N=l=u}while(l!==null);$=6,N=null}function l1(l,t,u,a,n,e,f,c,i){l.cancelPendingCommit=null;do Ze();while(yl!==0);if((B&6)!==0)throw Error(b(327));if(t!==null){if(t===l.current)throw Error(b(177));if(e=t.lanes|t.childLanes,e|=Vc,ls(l,u,e,f,c,i),l===x&&(N=x=null,H=0),la=t,jt=l,Lu=u,Sc=e,gc=n,Mv=a,(t.subtreeFlags&10256)!==0||(t.flags&10256)!==0?(l.callbackNode=null,l.callbackPriority=0,_h(le,function(){return Xv(!0),null})):(l.callbackNode=null,l.callbackPriority=0),a=(t.flags&13878)!==0,(t.subtreeFlags&13878)!==0||a){a=r.T,r.T=null,n=Y.p,Y.p=2,f=B,B|=4;try{mh(l,t,u)}finally{B=f,Y.p=n,r.T=a}}yl=1,Yv(),Rv(),Bv()}}function Yv(){if(yl===1){yl=0;var l=jt,t=la,u=(t.flags&13878)!==0;if((t.subtreeFlags&13878)!==0||u){u=r.T,r.T=null;var a=Y.p;Y.p=2;var n=B;B|=4;try{bv(t,l);var e=Oc,f=ly(l.containerInfo),c=e.focusedElem,i=e.selectionRange;if(f!==c&&c&&c.ownerDocument&&P1(c.ownerDocument.documentElement,c)){if(i!==null&&Cc(c)){var d=i.start,m=i.end;if(m===void 0&&(m=d),"selectionStart"in c)c.selectionStart=d,c.selectionEnd=Math.min(m,c.value.length);else{var g=c.ownerDocument||document,h=g&&g.defaultView||window;if(h.getSelection){var o=h.getSelection(),O=c.textContent.length,A=Math.min(i.start,O),G=i.end===void 0?A:Math.min(i.end,O);!o.extend&&A>G&&(f=G,G=A,A=f);var v=A0(c,A),y=A0(c,G);if(v&&y&&(o.rangeCount!==1||o.anchorNode!==v.node||o.anchorOffset!==v.offset||o.focusNode!==y.node||o.focusOffset!==y.offset)){var s=g.createRange();s.setStart(v.node,v.offset),o.removeAllRanges(),A>G?(o.addRange(s),o.extend(y.node,y.offset)):(s.setEnd(y.node,y.offset),o.addRange(s))}}}}for(g=[],o=c;o=o.parentNode;)o.nodeType===1&&g.push({element:o,left:o.scrollLeft,top:o.scrollTop});for(typeof c.focus=="function"&&c.focus(),c=0;c<g.length;c++){var S=g[c];S.element.scrollLeft=S.left,S.element.scrollTop=S.top}}Me=!!zc,Oc=zc=null}finally{B=n,Y.p=a,r.T=u}}l.current=t,yl=2}}function Rv(){if(yl===2){yl=0;var l=jt,t=la,u=(t.flags&8772)!==0;if((t.subtreeFlags&8772)!==0||u){u=r.T,r.T=null;var a=Y.p;Y.p=2;var n=B;B|=4;try{ov(l,t.alternate,t)}finally{B=n,Y.p=a,r.T=u}}yl=3}}function Bv(){if(yl===4||yl===3){yl=0,Ld();var l=jt,t=la,u=Lu,a=Mv;(t.subtreeFlags&10256)!==0||(t.flags&10256)!==0?yl=5:(yl=0,la=jt=null,Gv(l,l.pendingLanes));var n=l.pendingLanes;if(n===0&&(xt=null),Bc(u),t=t.stateNode,Hl&&typeof Hl.onCommitFiberRoot=="function")try{Hl.onCommitFiberRoot(ln,t,void 0,(t.current.flags&128)===128)}catch{}if(a!==null){t=r.T,n=Y.p,Y.p=2,r.T=null;try{for(var e=l.onRecoverableError,f=0;f<a.length;f++){var c=a[f];e(c.value,{componentStack:c.stack})}}finally{r.T=t,Y.p=n}}(Lu&3)!==0&&Ze(),ut(l),n=l.pendingLanes,(u&4194090)!==0&&(n&42)!==0?l===bc?Xa++:(Xa=0,bc=l):Xa=0,hn(0,!1)}}function Gv(l,t){(l.pooledCacheLanes&=t)===0&&(t=l.pooledCache,t!=null&&(l.pooledCache=null,cn(t)))}function Ze(l){return Yv(),Rv(),Bv(),Xv(l)}function Xv(){if(yl!==5)return!1;var l=jt,t=Sc;Sc=0;var u=Bc(Lu),a=r.T,n=Y.p;try{Y.p=32>u?32:u,r.T=null,u=gc,gc=null;var e=jt,f=Lu;if(yl=0,la=jt=null,Lu=0,(B&6)!==0)throw Error(b(331));var c=B;if(B|=4,Ov(e.current),Ev(e,e.current,f,u),B=c,hn(0,!1),Hl&&typeof Hl.onPostCommitFiberRoot=="function")try{Hl.onPostCommitFiberRoot(ln,e)}catch{}return!0}finally{Y.p=n,r.T=a,Gv(l,t)}}function t1(l,t,u){t=jl(u,t),t=dc(l.stateNode,t,2),l=Zt(l,t,2),l!==null&&(un(l,2),ut(l))}function Z(l,t,u){if(l.tag===3)t1(l,l,u);else for(;t!==null;){if(t.tag===3){t1(t,l,u);break}else if(t.tag===1){var a=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof a.componentDidCatch=="function"&&(xt===null||!xt.has(a))){l=jl(u,l),u=lv(2),a=Zt(t,u,2),a!==null&&(tv(u,a,t,l),un(a,2),ut(a));break}}t=t.return}}function qf(l,t,u){var a=l.pingCache;if(a===null){a=l.pingCache=new bh;var n=new Set;a.set(t,n)}else n=a.get(t),n===void 0&&(n=new Set,a.set(t,n));n.has(u)||(hi=!0,n.add(u),l=Oh.bind(null,l,t,u),t.then(l,l))}function Oh(l,t,u){var a=l.pingCache;a!==null&&a.delete(t),l.pingedLanes|=l.suspendedLanes&u,l.warmLanes&=~u,x===l&&(H&u)===u&&($===4||$===3&&(H&62914560)===H&&300>Pl()-mi?(B&2)===0&&ta(l,0):oi|=u,Pu===H&&(Pu=0)),ut(l)}function Qv(l,t){t===0&&(t=Y1()),l=ea(l,t),l!==null&&(un(l,t),ut(l))}function rh(l){var t=l.memoizedState,u=0;t!==null&&(u=t.retryLane),Qv(l,u)}function Mh(l,t){var u=0;switch(l.tag){case 13:var a=l.stateNode,n=l.memoizedState;n!==null&&(u=n.retryLane);break;case 19:a=l.stateNode;break;case 22:a=l.stateNode._retryCache;break;default:throw Error(b(314))}a!==null&&a.delete(t),Qv(l,u)}function _h(l,t){return Yc(l,t)}var be=null,Mu=null,Ec=!1,Te=!1,pf=!1,fu=0;function ut(l){l!==Mu&&l.next===null&&(Mu===null?be=Mu=l:Mu=Mu.next=l),Te=!0,Ec||(Ec=!0,Uh())}function hn(l,t){if(!pf&&Te){pf=!0;do for(var u=!1,a=be;a!==null;){if(!t)if(l!==0){var n=a.pendingLanes;if(n===0)var e=0;else{var f=a.suspendedLanes,c=a.pingedLanes;e=(1<<31-ql(42|l)+1)-1,e&=n&~(f&~c),e=e&201326741?e&201326741|1:e?e|2:0}e!==0&&(u=!0,u1(a,e))}else e=H,e=De(a,a===x?e:0,a.cancelPendingCommit!==null||a.timeoutHandle!==-1),(e&3)===0||tn(a,e)||(u=!0,u1(a,e));a=a.next}while(u);pf=!1}}function Dh(){Zv()}function Zv(){Te=Ec=!1;var l=0;fu!==0&&(Rh()&&(l=fu),fu=0);for(var t=Pl(),u=null,a=be;a!==null;){var n=a.next,e=xv(a,t);e===0?(a.next=null,u===null?be=n:u.next=n,n===null&&(Mu=u)):(u=a,(l!==0||(e&3)!==0)&&(Te=!0)),a=n}hn(l,!1)}function xv(l,t){for(var u=l.suspendedLanes,a=l.pingedLanes,n=l.expirationTimes,e=l.pendingLanes&-62914561;0<e;){var f=31-ql(e),c=1<<f,i=n[f];i===-1?((c&u)===0||(c&a)!==0)&&(n[f]=Pd(c,t)):i<=t&&(l.expiredLanes|=c),e&=~c}if(t=x,u=H,u=De(l,l===t?u:0,l.cancelPendingCommit!==null||l.timeoutHandle!==-1),a=l.callbackNode,u===0||l===t&&(R===2||R===9)||l.cancelPendingCommit!==null)return a!==null&&a!==null&&nf(a),l.callbackNode=null,l.callbackPriority=0;if((u&3)===0||tn(l,u)){if(t=u&-u,t===l.callbackPriority)return t;switch(a!==null&&nf(a),Bc(u)){case 2:case 8:u=H1;break;case 32:u=le;break;case 268435456:u=q1;break;default:u=le}return a=jv.bind(null,l),u=Yc(u,a),l.callbackPriority=t,l.callbackNode=u,t}return a!==null&&a!==null&&nf(a),l.callbackPriority=2,l.callbackNode=null,2}function jv(l,t){if(yl!==0&&yl!==5)return l.callbackNode=null,l.callbackPriority=0,null;var u=l.callbackNode;if(Ze(!0)&&l.callbackNode!==u)return null;var a=H;return a=De(l,l===x?a:0,l.cancelPendingCommit!==null||l.timeoutHandle!==-1),a===0?null:(Dv(l,a,t),xv(l,Pl()),l.callbackNode!=null&&l.callbackNode===u?jv.bind(null,l):null)}function u1(l,t){if(Ze())return null;Dv(l,t,!0)}function Uh(){Gh(function(){(B&6)!==0?Yc(N1,Dh):Zv()})}function gi(){return fu===0&&(fu=p1()),fu}function a1(l){return l==null||typeof l=="symbol"||typeof l=="boolean"?null:typeof l=="function"?l:Zn(""+l)}function n1(l,t){var u=t.ownerDocument.createElement("input");return u.name=t.name,u.value=t.value,l.id&&u.setAttribute("form",l.id),t.parentNode.insertBefore(u,t),l=new FormData(l),u.parentNode.removeChild(u),l}function Nh(l,t,u,a,n){if(t==="submit"&&u&&u.stateNode===n){var e=a1((n[Ol]||null).action),f=a.submitter;f&&(t=(t=f[Ol]||null)?a1(t.formAction):f.getAttribute("formAction"),t!==null&&(e=t,f=null));var c=new Ue("action","action",null,a,n);l.push({event:c,listeners:[{instance:null,listener:function(){if(a.defaultPrevented){if(fu!==0){var i=f?n1(n,f):new FormData(n);yc(u,{pending:!0,data:i,method:n.method,action:e},null,i)}}else typeof e=="function"&&(c.preventDefault(),i=f?n1(n,f):new FormData(n),yc(u,{pending:!0,data:i,method:n.method,action:e},e,i))},currentTarget:n}]})}}for(Yn=0;Yn<Ff.length;Yn++)Rn=Ff[Yn],e1=Rn.toLowerCase(),f1=Rn[0].toUpperCase()+Rn.slice(1),wl(e1,"on"+f1);var Rn,e1,f1,Yn;wl(uy,"onAnimationEnd");wl(ay,"onAnimationIteration");wl(ny,"onAnimationStart");wl("dblclick","onDoubleClick");wl("focusin","onFocus");wl("focusout","onBlur");wl(Ws,"onTransitionRun");wl($s,"onTransitionStart");wl(ks,"onTransitionCancel");wl(ey,"onTransitionEnd");wu("onMouseEnter",["mouseout","mouseover"]);wu("onMouseLeave",["mouseout","mouseover"]);wu("onPointerEnter",["pointerout","pointerover"]);wu("onPointerLeave",["pointerout","pointerover"]);du("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));du("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));du("onBeforeInput",["compositionend","keypress","textInput","paste"]);du("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));du("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));du("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ja="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Hh=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Ja));function Cv(l,t){t=(t&4)!==0;for(var u=0;u<l.length;u++){var a=l[u],n=a.event;a=a.listeners;l:{var e=void 0;if(t)for(var f=a.length-1;0<=f;f--){var c=a[f],i=c.instance,d=c.currentTarget;if(c=c.listener,i!==e&&n.isPropagationStopped())break l;e=c,n.currentTarget=d;try{e(n)}catch(m){se(m)}n.currentTarget=null,e=i}else for(f=0;f<a.length;f++){if(c=a[f],i=c.instance,d=c.currentTarget,c=c.listener,i!==e&&n.isPropagationStopped())break l;e=c,n.currentTarget=d;try{e(n)}catch(m){se(m)}n.currentTarget=null,e=i}}}}function U(l,t){var u=t[Kf];u===void 0&&(u=t[Kf]=new Set);var a=l+"__bubble";u.has(a)||(Vv(t,l,2,!1),u.add(a))}function Yf(l,t,u){var a=0;t&&(a|=4),Vv(u,l,a,t)}var Bn="_reactListening"+Math.random().toString(36).slice(2);function bi(l){if(!l[Bn]){l[Bn]=!0,X1.forEach(function(u){u!=="selectionchange"&&(Hh.has(u)||Yf(u,!1,l),Yf(u,!0,l))});var t=l.nodeType===9?l:l.ownerDocument;t===null||t[Bn]||(t[Bn]=!0,Yf("selectionchange",!1,t))}}function Vv(l,t,u,a){switch(td(t)){case 2:var n=ao;break;case 8:n=no;break;default:n=zi}u=n.bind(null,t,u,l),n=void 0,!Wf||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(n=!0),a?n!==void 0?l.addEventListener(t,u,{capture:!0,passive:n}):l.addEventListener(t,u,!0):n!==void 0?l.addEventListener(t,u,{passive:n}):l.addEventListener(t,u,!1)}function Rf(l,t,u,a,n){var e=a;if((t&1)===0&&(t&2)===0&&a!==null)l:for(;;){if(a===null)return;var f=a.tag;if(f===3||f===4){var c=a.stateNode.containerInfo;if(c===n)break;if(f===4)for(f=a.return;f!==null;){var i=f.tag;if((i===3||i===4)&&f.stateNode.containerInfo===n)return;f=f.return}for(;c!==null;){if(f=Uu(c),f===null)return;if(i=f.tag,i===5||i===6||i===26||i===27){a=e=f;continue l}c=c.parentNode}}a=a.return}L1(function(){var d=e,m=Qc(u),g=[];l:{var h=fy.get(l);if(h!==void 0){var o=Ue,O=l;switch(l){case"keypress":if(jn(u)===0)break l;case"keydown":case"keyup":o=_s;break;case"focusin":O="focus",o=hf;break;case"focusout":O="blur",o=hf;break;case"beforeblur":case"afterblur":o=hf;break;case"click":if(u.button===2)break l;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":o=s0;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":o=os;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":o=Ns;break;case uy:case ay:case ny:o=gs;break;case ey:o=qs;break;case"scroll":case"scrollend":o=ss;break;case"wheel":o=Ys;break;case"copy":case"cut":case"paste":o=Ts;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":o=o0;break;case"toggle":case"beforetoggle":o=Bs}var A=(t&4)!==0,G=!A&&(l==="scroll"||l==="scrollend"),v=A?h!==null?h+"Capture":null:h;A=[];for(var y=d,s;y!==null;){var S=y;if(s=S.stateNode,S=S.tag,S!==5&&S!==26&&S!==27||s===null||v===null||(S=xa(y,v),S!=null&&A.push(wa(y,S,s))),G)break;y=y.return}0<A.length&&(h=new o(h,O,null,u,m),g.push({event:h,listeners:A}))}}if((t&7)===0){l:{if(h=l==="mouseover"||l==="pointerover",o=l==="mouseout"||l==="pointerout",h&&u!==wf&&(O=u.relatedTarget||u.fromElement)&&(Uu(O)||O[aa]))break l;if((o||h)&&(h=m.window===m?m:(h=m.ownerDocument)?h.defaultView||h.parentWindow:window,o?(O=u.relatedTarget||u.toElement,o=d,O=O?Uu(O):null,O!==null&&(G=Pa(O),A=O.tag,O!==G||A!==5&&A!==27&&A!==6)&&(O=null)):(o=null,O=d),o!==O)){if(A=s0,S="onMouseLeave",v="onMouseEnter",y="mouse",(l==="pointerout"||l==="pointerover")&&(A=o0,S="onPointerLeave",v="onPointerEnter",y="pointer"),G=o==null?h:Oa(o),s=O==null?h:Oa(O),h=new A(S,y+"leave",o,u,m),h.target=G,h.relatedTarget=s,S=null,Uu(m)===d&&(A=new A(v,y+"enter",O,u,m),A.target=s,A.relatedTarget=G,S=A),G=S,o&&O)t:{for(A=o,v=O,y=0,s=A;s;s=zu(s))y++;for(s=0,S=v;S;S=zu(S))s++;for(;0<y-s;)A=zu(A),y--;for(;0<s-y;)v=zu(v),s--;for(;y--;){if(A===v||v!==null&&A===v.alternate)break t;A=zu(A),v=zu(v)}A=null}else A=null;o!==null&&c1(g,h,o,A,!1),O!==null&&G!==null&&c1(g,G,O,A,!0)}}l:{if(h=d?Oa(d):window,o=h.nodeName&&h.nodeName.toLowerCase(),o==="select"||o==="input"&&h.type==="file")var T=b0;else if(g0(h))if(F1)T=Ls;else{T=Vs;var D=Cs}else o=h.nodeName,!o||o.toLowerCase()!=="input"||h.type!=="checkbox"&&h.type!=="radio"?d&&Xc(d.elementType)&&(T=b0):T=Ks;if(T&&(T=T(l,d))){k1(g,T,u,m);break l}D&&D(l,h,d),l==="focusout"&&d&&h.type==="number"&&d.memoizedProps.value!=null&&Jf(h,"number",h.value)}switch(D=d?Oa(d):window,l){case"focusin":(g0(D)||D.contentEditable==="true")&&(qu=D,$f=d,Da=null);break;case"focusout":Da=$f=qu=null;break;case"mousedown":kf=!0;break;case"contextmenu":case"mouseup":case"dragend":kf=!1,z0(g,u,m);break;case"selectionchange":if(ws)break;case"keydown":case"keyup":z0(g,u,m)}var E;if(jc)l:{switch(l){case"compositionstart":var z="onCompositionStart";break l;case"compositionend":z="onCompositionEnd";break l;case"compositionupdate":z="onCompositionUpdate";break l}z=void 0}else Hu?W1(l,u)&&(z="onCompositionEnd"):l==="keydown"&&u.keyCode===229&&(z="onCompositionStart");z&&(w1&&u.locale!=="ko"&&(Hu||z!=="onCompositionStart"?z==="onCompositionEnd"&&Hu&&(E=J1()):(Rt=m,Zc="value"in Rt?Rt.value:Rt.textContent,Hu=!0)),D=Ee(d,z),0<D.length&&(z=new h0(z,l,null,u,m),g.push({event:z,listeners:D}),E?z.data=E:(E=$1(u),E!==null&&(z.data=E)))),(E=Xs?Qs(l,u):Zs(l,u))&&(z=Ee(d,"onBeforeInput"),0<z.length&&(D=new h0("onBeforeInput","beforeinput",null,u,m),g.push({event:D,listeners:z}),D.data=E)),Nh(g,l,d,u,m)}Cv(g,t)})}function wa(l,t,u){return{instance:l,listener:t,currentTarget:u}}function Ee(l,t){for(var u=t+"Capture",a=[];l!==null;){var n=l,e=n.stateNode;if(n=n.tag,n!==5&&n!==26&&n!==27||e===null||(n=xa(l,u),n!=null&&a.unshift(wa(l,n,e)),n=xa(l,t),n!=null&&a.push(wa(l,n,e))),l.tag===3)return a;l=l.return}return[]}function zu(l){if(l===null)return null;do l=l.return;while(l&&l.tag!==5&&l.tag!==27);return l||null}function c1(l,t,u,a,n){for(var e=t._reactName,f=[];u!==null&&u!==a;){var c=u,i=c.alternate,d=c.stateNode;if(c=c.tag,i!==null&&i===a)break;c!==5&&c!==26&&c!==27||d===null||(i=d,n?(d=xa(u,e),d!=null&&f.unshift(wa(u,d,i))):n||(d=xa(u,e),d!=null&&f.push(wa(u,d,i)))),u=u.return}f.length!==0&&l.push({event:t,listeners:f})}var qh=/\r\n?/g,ph=/\u0000|\uFFFD/g;function i1(l){return(typeof l=="string"?l:""+l).replace(qh,`
`).replace(ph,"")}function Kv(l,t){return t=i1(t),i1(l)===t}function xe(){}function X(l,t,u,a,n,e){switch(u){case"children":typeof a=="string"?t==="body"||t==="textarea"&&a===""||Wu(l,a):(typeof a=="number"||typeof a=="bigint")&&t!=="body"&&Wu(l,""+a);break;case"className":rn(l,"class",a);break;case"tabIndex":rn(l,"tabindex",a);break;case"dir":case"role":case"viewBox":case"width":case"height":rn(l,u,a);break;case"style":K1(l,a,e);break;case"data":if(t!=="object"){rn(l,"data",a);break}case"src":case"href":if(a===""&&(t!=="a"||u!=="href")){l.removeAttribute(u);break}if(a==null||typeof a=="function"||typeof a=="symbol"||typeof a=="boolean"){l.removeAttribute(u);break}a=Zn(""+a),l.setAttribute(u,a);break;case"action":case"formAction":if(typeof a=="function"){l.setAttribute(u,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}else typeof e=="function"&&(u==="formAction"?(t!=="input"&&X(l,t,"name",n.name,n,null),X(l,t,"formEncType",n.formEncType,n,null),X(l,t,"formMethod",n.formMethod,n,null),X(l,t,"formTarget",n.formTarget,n,null)):(X(l,t,"encType",n.encType,n,null),X(l,t,"method",n.method,n,null),X(l,t,"target",n.target,n,null)));if(a==null||typeof a=="symbol"||typeof a=="boolean"){l.removeAttribute(u);break}a=Zn(""+a),l.setAttribute(u,a);break;case"onClick":a!=null&&(l.onclick=xe);break;case"onScroll":a!=null&&U("scroll",l);break;case"onScrollEnd":a!=null&&U("scrollend",l);break;case"dangerouslySetInnerHTML":if(a!=null){if(typeof a!="object"||!("__html"in a))throw Error(b(61));if(u=a.__html,u!=null){if(n.children!=null)throw Error(b(60));l.innerHTML=u}}break;case"multiple":l.multiple=a&&typeof a!="function"&&typeof a!="symbol";break;case"muted":l.muted=a&&typeof a!="function"&&typeof a!="symbol";break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":break;case"autoFocus":break;case"xlinkHref":if(a==null||typeof a=="function"||typeof a=="boolean"||typeof a=="symbol"){l.removeAttribute("xlink:href");break}u=Zn(""+a),l.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",u);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":a!=null&&typeof a!="function"&&typeof a!="symbol"?l.setAttribute(u,""+a):l.removeAttribute(u);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":a&&typeof a!="function"&&typeof a!="symbol"?l.setAttribute(u,""):l.removeAttribute(u);break;case"capture":case"download":a===!0?l.setAttribute(u,""):a!==!1&&a!=null&&typeof a!="function"&&typeof a!="symbol"?l.setAttribute(u,a):l.removeAttribute(u);break;case"cols":case"rows":case"size":case"span":a!=null&&typeof a!="function"&&typeof a!="symbol"&&!isNaN(a)&&1<=a?l.setAttribute(u,a):l.removeAttribute(u);break;case"rowSpan":case"start":a==null||typeof a=="function"||typeof a=="symbol"||isNaN(a)?l.removeAttribute(u):l.setAttribute(u,a);break;case"popover":U("beforetoggle",l),U("toggle",l),Qn(l,"popover",a);break;case"xlinkActuate":nt(l,"http://www.w3.org/1999/xlink","xlink:actuate",a);break;case"xlinkArcrole":nt(l,"http://www.w3.org/1999/xlink","xlink:arcrole",a);break;case"xlinkRole":nt(l,"http://www.w3.org/1999/xlink","xlink:role",a);break;case"xlinkShow":nt(l,"http://www.w3.org/1999/xlink","xlink:show",a);break;case"xlinkTitle":nt(l,"http://www.w3.org/1999/xlink","xlink:title",a);break;case"xlinkType":nt(l,"http://www.w3.org/1999/xlink","xlink:type",a);break;case"xmlBase":nt(l,"http://www.w3.org/XML/1998/namespace","xml:base",a);break;case"xmlLang":nt(l,"http://www.w3.org/XML/1998/namespace","xml:lang",a);break;case"xmlSpace":nt(l,"http://www.w3.org/XML/1998/namespace","xml:space",a);break;case"is":Qn(l,"is",a);break;case"innerText":case"textContent":break;default:(!(2<u.length)||u[0]!=="o"&&u[0]!=="O"||u[1]!=="n"&&u[1]!=="N")&&(u=vs.get(u)||u,Qn(l,u,a))}}function Ac(l,t,u,a,n,e){switch(u){case"style":K1(l,a,e);break;case"dangerouslySetInnerHTML":if(a!=null){if(typeof a!="object"||!("__html"in a))throw Error(b(61));if(u=a.__html,u!=null){if(n.children!=null)throw Error(b(60));l.innerHTML=u}}break;case"children":typeof a=="string"?Wu(l,a):(typeof a=="number"||typeof a=="bigint")&&Wu(l,""+a);break;case"onScroll":a!=null&&U("scroll",l);break;case"onScrollEnd":a!=null&&U("scrollend",l);break;case"onClick":a!=null&&(l.onclick=xe);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":break;case"innerText":case"textContent":break;default:if(!Q1.hasOwnProperty(u))l:{if(u[0]==="o"&&u[1]==="n"&&(n=u.endsWith("Capture"),t=u.slice(2,n?u.length-7:void 0),e=l[Ol]||null,e=e!=null?e[u]:null,typeof e=="function"&&l.removeEventListener(t,e,n),typeof a=="function")){typeof e!="function"&&e!==null&&(u in l?l[u]=null:l.hasAttribute(u)&&l.removeAttribute(u)),l.addEventListener(t,a,n);break l}u in l?l[u]=a:a===!0?l.setAttribute(u,""):Qn(l,u,a)}}}function vl(l,t,u){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":U("error",l),U("load",l);var a=!1,n=!1,e;for(e in u)if(u.hasOwnProperty(e)){var f=u[e];if(f!=null)switch(e){case"src":a=!0;break;case"srcSet":n=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(b(137,t));default:X(l,t,e,f,u,null)}}n&&X(l,t,"srcSet",u.srcSet,u,null),a&&X(l,t,"src",u.src,u,null);return;case"input":U("invalid",l);var c=e=f=n=null,i=null,d=null;for(a in u)if(u.hasOwnProperty(a)){var m=u[a];if(m!=null)switch(a){case"name":n=m;break;case"type":f=m;break;case"checked":i=m;break;case"defaultChecked":d=m;break;case"value":e=m;break;case"defaultValue":c=m;break;case"children":case"dangerouslySetInnerHTML":if(m!=null)throw Error(b(137,t));break;default:X(l,t,a,m,u,null)}}j1(l,e,c,i,d,f,n,!1),te(l);return;case"select":U("invalid",l),a=f=e=null;for(n in u)if(u.hasOwnProperty(n)&&(c=u[n],c!=null))switch(n){case"value":e=c;break;case"defaultValue":f=c;break;case"multiple":a=c;default:X(l,t,n,c,u,null)}t=e,u=f,l.multiple=!!a,t!=null?Zu(l,!!a,t,!1):u!=null&&Zu(l,!!a,u,!0);return;case"textarea":U("invalid",l),e=n=a=null;for(f in u)if(u.hasOwnProperty(f)&&(c=u[f],c!=null))switch(f){case"value":a=c;break;case"defaultValue":n=c;break;case"children":e=c;break;case"dangerouslySetInnerHTML":if(c!=null)throw Error(b(91));break;default:X(l,t,f,c,u,null)}V1(l,a,n,e),te(l);return;case"option":for(i in u)if(u.hasOwnProperty(i)&&(a=u[i],a!=null))switch(i){case"selected":l.selected=a&&typeof a!="function"&&typeof a!="symbol";break;default:X(l,t,i,a,u,null)}return;case"dialog":U("beforetoggle",l),U("toggle",l),U("cancel",l),U("close",l);break;case"iframe":case"object":U("load",l);break;case"video":case"audio":for(a=0;a<Ja.length;a++)U(Ja[a],l);break;case"image":U("error",l),U("load",l);break;case"details":U("toggle",l);break;case"embed":case"source":case"link":U("error",l),U("load",l);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(d in u)if(u.hasOwnProperty(d)&&(a=u[d],a!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(b(137,t));default:X(l,t,d,a,u,null)}return;default:if(Xc(t)){for(m in u)u.hasOwnProperty(m)&&(a=u[m],a!==void 0&&Ac(l,t,m,a,u,void 0));return}}for(c in u)u.hasOwnProperty(c)&&(a=u[c],a!=null&&X(l,t,c,a,u,null))}function Yh(l,t,u,a){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var n=null,e=null,f=null,c=null,i=null,d=null,m=null;for(o in u){var g=u[o];if(u.hasOwnProperty(o)&&g!=null)switch(o){case"checked":break;case"value":break;case"defaultValue":i=g;default:a.hasOwnProperty(o)||X(l,t,o,null,a,g)}}for(var h in a){var o=a[h];if(g=u[h],a.hasOwnProperty(h)&&(o!=null||g!=null))switch(h){case"type":e=o;break;case"name":n=o;break;case"checked":d=o;break;case"defaultChecked":m=o;break;case"value":f=o;break;case"defaultValue":c=o;break;case"children":case"dangerouslySetInnerHTML":if(o!=null)throw Error(b(137,t));break;default:o!==g&&X(l,t,h,o,a,g)}}Lf(l,f,c,i,d,m,e,n);return;case"select":o=f=c=h=null;for(e in u)if(i=u[e],u.hasOwnProperty(e)&&i!=null)switch(e){case"value":break;case"multiple":o=i;default:a.hasOwnProperty(e)||X(l,t,e,null,a,i)}for(n in a)if(e=a[n],i=u[n],a.hasOwnProperty(n)&&(e!=null||i!=null))switch(n){case"value":h=e;break;case"defaultValue":c=e;break;case"multiple":f=e;default:e!==i&&X(l,t,n,e,a,i)}t=c,u=f,a=o,h!=null?Zu(l,!!u,h,!1):!!a!=!!u&&(t!=null?Zu(l,!!u,t,!0):Zu(l,!!u,u?[]:"",!1));return;case"textarea":o=h=null;for(c in u)if(n=u[c],u.hasOwnProperty(c)&&n!=null&&!a.hasOwnProperty(c))switch(c){case"value":break;case"children":break;default:X(l,t,c,null,a,n)}for(f in a)if(n=a[f],e=u[f],a.hasOwnProperty(f)&&(n!=null||e!=null))switch(f){case"value":h=n;break;case"defaultValue":o=n;break;case"children":break;case"dangerouslySetInnerHTML":if(n!=null)throw Error(b(91));break;default:n!==e&&X(l,t,f,n,a,e)}C1(l,h,o);return;case"option":for(var O in u)if(h=u[O],u.hasOwnProperty(O)&&h!=null&&!a.hasOwnProperty(O))switch(O){case"selected":l.selected=!1;break;default:X(l,t,O,null,a,h)}for(i in a)if(h=a[i],o=u[i],a.hasOwnProperty(i)&&h!==o&&(h!=null||o!=null))switch(i){case"selected":l.selected=h&&typeof h!="function"&&typeof h!="symbol";break;default:X(l,t,i,h,a,o)}return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var A in u)h=u[A],u.hasOwnProperty(A)&&h!=null&&!a.hasOwnProperty(A)&&X(l,t,A,null,a,h);for(d in a)if(h=a[d],o=u[d],a.hasOwnProperty(d)&&h!==o&&(h!=null||o!=null))switch(d){case"children":case"dangerouslySetInnerHTML":if(h!=null)throw Error(b(137,t));break;default:X(l,t,d,h,a,o)}return;default:if(Xc(t)){for(var G in u)h=u[G],u.hasOwnProperty(G)&&h!==void 0&&!a.hasOwnProperty(G)&&Ac(l,t,G,void 0,a,h);for(m in a)h=a[m],o=u[m],!a.hasOwnProperty(m)||h===o||h===void 0&&o===void 0||Ac(l,t,m,h,a,o);return}}for(var v in u)h=u[v],u.hasOwnProperty(v)&&h!=null&&!a.hasOwnProperty(v)&&X(l,t,v,null,a,h);for(g in a)h=a[g],o=u[g],!a.hasOwnProperty(g)||h===o||h==null&&o==null||X(l,t,g,h,a,o)}var zc=null,Oc=null;function Ae(l){return l.nodeType===9?l:l.ownerDocument}function y1(l){switch(l){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Lv(l,t){if(l===0)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return l===1&&t==="foreignObject"?0:l}function rc(l,t){return l==="textarea"||l==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.children=="bigint"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Bf=null;function Rh(){var l=window.event;return l&&l.type==="popstate"?l===Bf?!1:(Bf=l,!0):(Bf=null,!1)}var Jv=typeof setTimeout=="function"?setTimeout:void 0,Bh=typeof clearTimeout=="function"?clearTimeout:void 0,v1=typeof Promise=="function"?Promise:void 0,Gh=typeof queueMicrotask=="function"?queueMicrotask:typeof v1<"u"?function(l){return v1.resolve(null).then(l).catch(Xh)}:Jv;function Xh(l){setTimeout(function(){throw l})}function $t(l){return l==="head"}function d1(l,t){var u=t,a=0,n=0;do{var e=u.nextSibling;if(l.removeChild(u),e&&e.nodeType===8)if(u=e.data,u==="/$"){if(0<a&&8>a){u=a;var f=l.ownerDocument;if(u&1&&Qa(f.documentElement),u&2&&Qa(f.body),u&4)for(u=f.head,Qa(u),f=u.firstChild;f;){var c=f.nextSibling,i=f.nodeName;f[an]||i==="SCRIPT"||i==="STYLE"||i==="LINK"&&f.rel.toLowerCase()==="stylesheet"||u.removeChild(f),f=c}}if(n===0){l.removeChild(e),Ia(t);return}n--}else u==="$"||u==="$?"||u==="$!"?n++:a=u.charCodeAt(0)-48;else a=0;u=e}while(u);Ia(t)}function Mc(l){var t=l.firstChild;for(t&&t.nodeType===10&&(t=t.nextSibling);t;){var u=t;switch(t=t.nextSibling,u.nodeName){case"HTML":case"HEAD":case"BODY":Mc(u),Gc(u);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if(u.rel.toLowerCase()==="stylesheet")continue}l.removeChild(u)}}function Qh(l,t,u,a){for(;l.nodeType===1;){var n=u;if(l.nodeName.toLowerCase()!==t.toLowerCase()){if(!a&&(l.nodeName!=="INPUT"||l.type!=="hidden"))break}else if(a){if(!l[an])switch(t){case"meta":if(!l.hasAttribute("itemprop"))break;return l;case"link":if(e=l.getAttribute("rel"),e==="stylesheet"&&l.hasAttribute("data-precedence"))break;if(e!==n.rel||l.getAttribute("href")!==(n.href==null||n.href===""?null:n.href)||l.getAttribute("crossorigin")!==(n.crossOrigin==null?null:n.crossOrigin)||l.getAttribute("title")!==(n.title==null?null:n.title))break;return l;case"style":if(l.hasAttribute("data-precedence"))break;return l;case"script":if(e=l.getAttribute("src"),(e!==(n.src==null?null:n.src)||l.getAttribute("type")!==(n.type==null?null:n.type)||l.getAttribute("crossorigin")!==(n.crossOrigin==null?null:n.crossOrigin))&&e&&l.hasAttribute("async")&&!l.hasAttribute("itemprop"))break;return l;default:return l}}else if(t==="input"&&l.type==="hidden"){var e=n.name==null?null:""+n.name;if(n.type==="hidden"&&l.getAttribute("name")===e)return l}else return l;if(l=Jl(l.nextSibling),l===null)break}return null}function Zh(l,t,u){if(t==="")return null;for(;l.nodeType!==3;)if((l.nodeType!==1||l.nodeName!=="INPUT"||l.type!=="hidden")&&!u||(l=Jl(l.nextSibling),l===null))return null;return l}function _c(l){return l.data==="$!"||l.data==="$?"&&l.ownerDocument.readyState==="complete"}function xh(l,t){var u=l.ownerDocument;if(l.data!=="$?"||u.readyState==="complete")t();else{var a=function(){t(),u.removeEventListener("DOMContentLoaded",a)};u.addEventListener("DOMContentLoaded",a),l._reactRetry=a}}function Jl(l){for(;l!=null;l=l.nextSibling){var t=l.nodeType;if(t===1||t===3)break;if(t===8){if(t=l.data,t==="$"||t==="$!"||t==="$?"||t==="F!"||t==="F")break;if(t==="/$")return null}}return l}var Dc=null;function s1(l){l=l.previousSibling;for(var t=0;l;){if(l.nodeType===8){var u=l.data;if(u==="$"||u==="$!"||u==="$?"){if(t===0)return l;t--}else u==="/$"&&t++}l=l.previousSibling}return null}function wv(l,t,u){switch(t=Ae(u),l){case"html":if(l=t.documentElement,!l)throw Error(b(452));return l;case"head":if(l=t.head,!l)throw Error(b(453));return l;case"body":if(l=t.body,!l)throw Error(b(454));return l;default:throw Error(b(451))}}function Qa(l){for(var t=l.attributes;t.length;)l.removeAttributeNode(t[0]);Gc(l)}var Kl=new Map,h1=new Set;function ze(l){return typeof l.getRootNode=="function"?l.getRootNode():l.nodeType===9?l:l.ownerDocument}var Tt=Y.d;Y.d={f:jh,r:Ch,D:Vh,C:Kh,L:Lh,m:Jh,X:Wh,S:wh,M:$h};function jh(){var l=Tt.f(),t=Xe();return l||t}function Ch(l){var t=na(l);t!==null&&t.tag===5&&t.type==="form"?xy(t):Tt.r(l)}var ca=typeof document>"u"?null:document;function Wv(l,t,u){var a=ca;if(a&&typeof t=="string"&&t){var n=xl(t);n='link[rel="'+l+'"][href="'+n+'"]',typeof u=="string"&&(n+='[crossorigin="'+u+'"]'),h1.has(n)||(h1.add(n),l={rel:l,crossOrigin:u,href:t},a.querySelector(n)===null&&(t=a.createElement("link"),vl(t,"link",l),el(t),a.head.appendChild(t)))}}function Vh(l){Tt.D(l),Wv("dns-prefetch",l,null)}function Kh(l,t){Tt.C(l,t),Wv("preconnect",l,t)}function Lh(l,t,u){Tt.L(l,t,u);var a=ca;if(a&&l&&t){var n='link[rel="preload"][as="'+xl(t)+'"]';t==="image"&&u&&u.imageSrcSet?(n+='[imagesrcset="'+xl(u.imageSrcSet)+'"]',typeof u.imageSizes=="string"&&(n+='[imagesizes="'+xl(u.imageSizes)+'"]')):n+='[href="'+xl(l)+'"]';var e=n;switch(t){case"style":e=ua(l);break;case"script":e=ia(l)}Kl.has(e)||(l=j({rel:"preload",href:t==="image"&&u&&u.imageSrcSet?void 0:l,as:t},u),Kl.set(e,l),a.querySelector(n)!==null||t==="style"&&a.querySelector(on(e))||t==="script"&&a.querySelector(mn(e))||(t=a.createElement("link"),vl(t,"link",l),el(t),a.head.appendChild(t)))}}function Jh(l,t){Tt.m(l,t);var u=ca;if(u&&l){var a=t&&typeof t.as=="string"?t.as:"script",n='link[rel="modulepreload"][as="'+xl(a)+'"][href="'+xl(l)+'"]',e=n;switch(a){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":e=ia(l)}if(!Kl.has(e)&&(l=j({rel:"modulepreload",href:l},t),Kl.set(e,l),u.querySelector(n)===null)){switch(a){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(u.querySelector(mn(e)))return}a=u.createElement("link"),vl(a,"link",l),el(a),u.head.appendChild(a)}}}function wh(l,t,u){Tt.S(l,t,u);var a=ca;if(a&&l){var n=Qu(a).hoistableStyles,e=ua(l);t=t||"default";var f=n.get(e);if(!f){var c={loading:0,preload:null};if(f=a.querySelector(on(e)))c.loading=5;else{l=j({rel:"stylesheet",href:l,"data-precedence":t},u),(u=Kl.get(e))&&Ti(l,u);var i=f=a.createElement("link");el(i),vl(i,"link",l),i._p=new Promise(function(d,m){i.onload=d,i.onerror=m}),i.addEventListener("load",function(){c.loading|=1}),i.addEventListener("error",function(){c.loading|=2}),c.loading|=4,Wn(f,t,a)}f={type:"stylesheet",instance:f,count:1,state:c},n.set(e,f)}}}function Wh(l,t){Tt.X(l,t);var u=ca;if(u&&l){var a=Qu(u).hoistableScripts,n=ia(l),e=a.get(n);e||(e=u.querySelector(mn(n)),e||(l=j({src:l,async:!0},t),(t=Kl.get(n))&&Ei(l,t),e=u.createElement("script"),el(e),vl(e,"link",l),u.head.appendChild(e)),e={type:"script",instance:e,count:1,state:null},a.set(n,e))}}function $h(l,t){Tt.M(l,t);var u=ca;if(u&&l){var a=Qu(u).hoistableScripts,n=ia(l),e=a.get(n);e||(e=u.querySelector(mn(n)),e||(l=j({src:l,async:!0,type:"module"},t),(t=Kl.get(n))&&Ei(l,t),e=u.createElement("script"),el(e),vl(e,"link",l),u.head.appendChild(e)),e={type:"script",instance:e,count:1,state:null},a.set(n,e))}}function o1(l,t,u,a){var n=(n=Xt.current)?ze(n):null;if(!n)throw Error(b(446));switch(l){case"meta":case"title":return null;case"style":return typeof u.precedence=="string"&&typeof u.href=="string"?(t=ua(u.href),u=Qu(n).hoistableStyles,a=u.get(t),a||(a={type:"style",instance:null,count:0,state:null},u.set(t,a)),a):{type:"void",instance:null,count:0,state:null};case"link":if(u.rel==="stylesheet"&&typeof u.href=="string"&&typeof u.precedence=="string"){l=ua(u.href);var e=Qu(n).hoistableStyles,f=e.get(l);if(f||(n=n.ownerDocument||n,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},e.set(l,f),(e=n.querySelector(on(l)))&&!e._p&&(f.instance=e,f.state.loading=5),Kl.has(l)||(u={rel:"preload",as:"style",href:u.href,crossOrigin:u.crossOrigin,integrity:u.integrity,media:u.media,hrefLang:u.hrefLang,referrerPolicy:u.referrerPolicy},Kl.set(l,u),e||kh(n,l,u,f.state))),t&&a===null)throw Error(b(528,""));return f}if(t&&a!==null)throw Error(b(529,""));return null;case"script":return t=u.async,u=u.src,typeof u=="string"&&t&&typeof t!="function"&&typeof t!="symbol"?(t=ia(u),u=Qu(n).hoistableScripts,a=u.get(t),a||(a={type:"script",instance:null,count:0,state:null},u.set(t,a)),a):{type:"void",instance:null,count:0,state:null};default:throw Error(b(444,l))}}function ua(l){return'href="'+xl(l)+'"'}function on(l){return'link[rel="stylesheet"]['+l+"]"}function $v(l){return j({},l,{"data-precedence":l.precedence,precedence:null})}function kh(l,t,u,a){l.querySelector('link[rel="preload"][as="style"]['+t+"]")?a.loading=1:(t=l.createElement("link"),a.preload=t,t.addEventListener("load",function(){return a.loading|=1}),t.addEventListener("error",function(){return a.loading|=2}),vl(t,"link",u),el(t),l.head.appendChild(t))}function ia(l){return'[src="'+xl(l)+'"]'}function mn(l){return"script[async]"+l}function m1(l,t,u){if(t.count++,t.instance===null)switch(t.type){case"style":var a=l.querySelector('style[data-href~="'+xl(u.href)+'"]');if(a)return t.instance=a,el(a),a;var n=j({},u,{"data-href":u.href,"data-precedence":u.precedence,href:null,precedence:null});return a=(l.ownerDocument||l).createElement("style"),el(a),vl(a,"style",n),Wn(a,u.precedence,l),t.instance=a;case"stylesheet":n=ua(u.href);var e=l.querySelector(on(n));if(e)return t.state.loading|=4,t.instance=e,el(e),e;a=$v(u),(n=Kl.get(n))&&Ti(a,n),e=(l.ownerDocument||l).createElement("link"),el(e);var f=e;return f._p=new Promise(function(c,i){f.onload=c,f.onerror=i}),vl(e,"link",a),t.state.loading|=4,Wn(e,u.precedence,l),t.instance=e;case"script":return e=ia(u.src),(n=l.querySelector(mn(e)))?(t.instance=n,el(n),n):(a=u,(n=Kl.get(e))&&(a=j({},u),Ei(a,n)),l=l.ownerDocument||l,n=l.createElement("script"),el(n),vl(n,"link",a),l.head.appendChild(n),t.instance=n);case"void":return null;default:throw Error(b(443,t.type))}else t.type==="stylesheet"&&(t.state.loading&4)===0&&(a=t.instance,t.state.loading|=4,Wn(a,u.precedence,l));return t.instance}function Wn(l,t,u){for(var a=u.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),n=a.length?a[a.length-1]:null,e=n,f=0;f<a.length;f++){var c=a[f];if(c.dataset.precedence===t)e=c;else if(e!==n)break}e?e.parentNode.insertBefore(l,e.nextSibling):(t=u.nodeType===9?u.head:u,t.insertBefore(l,t.firstChild))}function Ti(l,t){l.crossOrigin==null&&(l.crossOrigin=t.crossOrigin),l.referrerPolicy==null&&(l.referrerPolicy=t.referrerPolicy),l.title==null&&(l.title=t.title)}function Ei(l,t){l.crossOrigin==null&&(l.crossOrigin=t.crossOrigin),l.referrerPolicy==null&&(l.referrerPolicy=t.referrerPolicy),l.integrity==null&&(l.integrity=t.integrity)}var $n=null;function S1(l,t,u){if($n===null){var a=new Map,n=$n=new Map;n.set(u,a)}else n=$n,a=n.get(u),a||(a=new Map,n.set(u,a));if(a.has(l))return a;for(a.set(l,null),u=u.getElementsByTagName(l),n=0;n<u.length;n++){var e=u[n];if(!(e[an]||e[hl]||l==="link"&&e.getAttribute("rel")==="stylesheet")&&e.namespaceURI!=="http://www.w3.org/2000/svg"){var f=e.getAttribute(t)||"";f=l+f;var c=a.get(f);c?c.push(e):a.set(f,[e])}}return a}function g1(l,t,u){l=l.ownerDocument||l,l.head.insertBefore(u,t==="title"?l.querySelector("head > title"):null)}function Fh(l,t,u){if(u===1||t.itemProp!=null)return!1;switch(l){case"meta":case"title":return!0;case"style":if(typeof t.precedence!="string"||typeof t.href!="string"||t.href==="")break;return!0;case"link":if(typeof t.rel!="string"||typeof t.href!="string"||t.href===""||t.onLoad||t.onError)break;switch(t.rel){case"stylesheet":return l=t.disabled,typeof t.precedence=="string"&&l==null;default:return!0}case"script":if(t.async&&typeof t.async!="function"&&typeof t.async!="symbol"&&!t.onLoad&&!t.onError&&t.src&&typeof t.src=="string")return!0}return!1}function kv(l){return!(l.type==="stylesheet"&&(l.state.loading&3)===0)}var Wa=null;function Ih(){}function Ph(l,t,u){if(Wa===null)throw Error(b(475));var a=Wa;if(t.type==="stylesheet"&&(typeof u.media!="string"||matchMedia(u.media).matches!==!1)&&(t.state.loading&4)===0){if(t.instance===null){var n=ua(u.href),e=l.querySelector(on(n));if(e){l=e._p,l!==null&&typeof l=="object"&&typeof l.then=="function"&&(a.count++,a=Oe.bind(a),l.then(a,a)),t.state.loading|=4,t.instance=e,el(e);return}e=l.ownerDocument||l,u=$v(u),(n=Kl.get(n))&&Ti(u,n),e=e.createElement("link"),el(e);var f=e;f._p=new Promise(function(c,i){f.onload=c,f.onerror=i}),vl(e,"link",u),t.instance=e}a.stylesheets===null&&(a.stylesheets=new Map),a.stylesheets.set(t,l),(l=t.state.preload)&&(t.state.loading&3)===0&&(a.count++,t=Oe.bind(a),l.addEventListener("load",t),l.addEventListener("error",t))}}function lo(){if(Wa===null)throw Error(b(475));var l=Wa;return l.stylesheets&&l.count===0&&Uc(l,l.stylesheets),0<l.count?function(t){var u=setTimeout(function(){if(l.stylesheets&&Uc(l,l.stylesheets),l.unsuspend){var a=l.unsuspend;l.unsuspend=null,a()}},6e4);return l.unsuspend=t,function(){l.unsuspend=null,clearTimeout(u)}}:null}function Oe(){if(this.count--,this.count===0){if(this.stylesheets)Uc(this,this.stylesheets);else if(this.unsuspend){var l=this.unsuspend;this.unsuspend=null,l()}}}var re=null;function Uc(l,t){l.stylesheets=null,l.unsuspend!==null&&(l.count++,re=new Map,t.forEach(to,l),re=null,Oe.call(l))}function to(l,t){if(!(t.state.loading&4)){var u=re.get(l);if(u)var a=u.get(null);else{u=new Map,re.set(l,u);for(var n=l.querySelectorAll("link[data-precedence],style[data-precedence]"),e=0;e<n.length;e++){var f=n[e];(f.nodeName==="LINK"||f.getAttribute("media")!=="not all")&&(u.set(f.dataset.precedence,f),a=f)}a&&u.set(null,a)}n=t.instance,f=n.getAttribute("data-precedence"),e=u.get(f)||a,e===a&&u.set(null,n),u.set(f,n),this.count++,a=Oe.bind(this),n.addEventListener("load",a),n.addEventListener("error",a),e?e.parentNode.insertBefore(n,e.nextSibling):(l=l.nodeType===9?l.head:l,l.insertBefore(n,l.firstChild)),t.state.loading|=4}}var $a={$$typeof:it,Provider:null,Consumer:null,_currentValue:lu,_currentValue2:lu,_threadCount:0};function uo(l,t,u,a,n,e,f,c){this.tag=1,this.containerInfo=l,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=ef(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ef(0),this.hiddenUpdates=ef(null),this.identifierPrefix=a,this.onUncaughtError=n,this.onCaughtError=e,this.onRecoverableError=f,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=c,this.incompleteTransitions=new Map}function Fv(l,t,u,a,n,e,f,c,i,d,m,g){return l=new uo(l,t,u,f,c,i,d,g),t=1,e===!0&&(t|=24),e=Nl(3,null,null,t),l.current=e,e.stateNode=l,t=Wc(),t.refCount++,l.pooledCache=t,t.refCount++,e.memoizedState={element:a,isDehydrated:u,cache:t},kc(e),l}function Iv(l){return l?(l=Ru,l):Ru}function Pv(l,t,u,a,n,e){n=Iv(n),a.context===null?a.context=n:a.pendingContext=n,a=Qt(t),a.payload={element:u},e=e===void 0?null:e,e!==null&&(a.callback=e),u=Zt(l,a,t),u!==null&&(Yl(u,l,t),Ha(u,l,t))}function b1(l,t){if(l=l.memoizedState,l!==null&&l.dehydrated!==null){var u=l.retryLane;l.retryLane=u!==0&&u<t?u:t}}function Ai(l,t){b1(l,t),(l=l.alternate)&&b1(l,t)}function ld(l){if(l.tag===13){var t=ea(l,67108864);t!==null&&Yl(t,l,67108864),Ai(l,67108864)}}var Me=!0;function ao(l,t,u,a){var n=r.T;r.T=null;var e=Y.p;try{Y.p=2,zi(l,t,u,a)}finally{Y.p=e,r.T=n}}function no(l,t,u,a){var n=r.T;r.T=null;var e=Y.p;try{Y.p=8,zi(l,t,u,a)}finally{Y.p=e,r.T=n}}function zi(l,t,u,a){if(Me){var n=Nc(a);if(n===null)Rf(l,t,a,_e,u),T1(l,a);else if(fo(n,l,t,u,a))a.stopPropagation();else if(T1(l,a),t&4&&-1<eo.indexOf(l)){for(;n!==null;){var e=na(n);if(e!==null)switch(e.tag){case 3:if(e=e.stateNode,e.current.memoizedState.isDehydrated){var f=Ft(e.pendingLanes);if(f!==0){var c=e;for(c.pendingLanes|=2,c.entangledLanes|=2;f;){var i=1<<31-ql(f);c.entanglements[1]|=i,f&=~i}ut(e),(B&6)===0&&(Se=Pl()+500,hn(0,!1))}}break;case 13:c=ea(e,2),c!==null&&Yl(c,e,2),Xe(),Ai(e,2)}if(e=Nc(a),e===null&&Rf(l,t,a,_e,u),e===n)break;n=e}n!==null&&a.stopPropagation()}else Rf(l,t,a,null,u)}}function Nc(l){return l=Qc(l),Oi(l)}var _e=null;function Oi(l){if(_e=null,l=Uu(l),l!==null){var t=Pa(l);if(t===null)l=null;else{var u=t.tag;if(u===13){if(l=M1(t),l!==null)return l;l=null}else if(u===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;l=null}else t!==l&&(l=null)}}return _e=l,null}function td(l){switch(l){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(Jd()){case N1:return 2;case H1:return 8;case le:case wd:return 32;case q1:return 268435456;default:return 32}default:return 32}}var Hc=!1,Ct=null,Vt=null,Kt=null,ka=new Map,Fa=new Map,pt=[],eo="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function T1(l,t){switch(l){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Vt=null;break;case"mouseover":case"mouseout":Kt=null;break;case"pointerover":case"pointerout":ka.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Fa.delete(t.pointerId)}}function Ta(l,t,u,a,n,e){return l===null||l.nativeEvent!==e?(l={blockedOn:t,domEventName:u,eventSystemFlags:a,nativeEvent:e,targetContainers:[n]},t!==null&&(t=na(t),t!==null&&ld(t)),l):(l.eventSystemFlags|=a,t=l.targetContainers,n!==null&&t.indexOf(n)===-1&&t.push(n),l)}function fo(l,t,u,a,n){switch(t){case"focusin":return Ct=Ta(Ct,l,t,u,a,n),!0;case"dragenter":return Vt=Ta(Vt,l,t,u,a,n),!0;case"mouseover":return Kt=Ta(Kt,l,t,u,a,n),!0;case"pointerover":var e=n.pointerId;return ka.set(e,Ta(ka.get(e)||null,l,t,u,a,n)),!0;case"gotpointercapture":return e=n.pointerId,Fa.set(e,Ta(Fa.get(e)||null,l,t,u,a,n)),!0}return!1}function ud(l){var t=Uu(l.target);if(t!==null){var u=Pa(t);if(u!==null){if(t=u.tag,t===13){if(t=M1(u),t!==null){l.blockedOn=t,ts(l.priority,function(){if(u.tag===13){var a=pl();a=Rc(a);var n=ea(u,a);n!==null&&Yl(n,u,a),Ai(u,a)}});return}}else if(t===3&&u.stateNode.current.memoizedState.isDehydrated){l.blockedOn=u.tag===3?u.stateNode.containerInfo:null;return}}}l.blockedOn=null}function kn(l){if(l.blockedOn!==null)return!1;for(var t=l.targetContainers;0<t.length;){var u=Nc(l.nativeEvent);if(u===null){u=l.nativeEvent;var a=new u.constructor(u.type,u);wf=a,u.target.dispatchEvent(a),wf=null}else return t=na(u),t!==null&&ld(t),l.blockedOn=u,!1;t.shift()}return!0}function E1(l,t,u){kn(l)&&u.delete(t)}function co(){Hc=!1,Ct!==null&&kn(Ct)&&(Ct=null),Vt!==null&&kn(Vt)&&(Vt=null),Kt!==null&&kn(Kt)&&(Kt=null),ka.forEach(E1),Fa.forEach(E1)}function Gn(l,t){l.blockedOn===t&&(l.blockedOn=null,Hc||(Hc=!0,ul.unstable_scheduleCallback(ul.unstable_NormalPriority,co)))}var Xn=null;function A1(l){Xn!==l&&(Xn=l,ul.unstable_scheduleCallback(ul.unstable_NormalPriority,function(){Xn===l&&(Xn=null);for(var t=0;t<l.length;t+=3){var u=l[t],a=l[t+1],n=l[t+2];if(typeof a!="function"){if(Oi(a||u)===null)continue;break}var e=na(u);e!==null&&(l.splice(t,3),t-=3,yc(e,{pending:!0,data:n,method:u.method,action:a},a,n))}}))}function Ia(l){function t(i){return Gn(i,l)}Ct!==null&&Gn(Ct,l),Vt!==null&&Gn(Vt,l),Kt!==null&&Gn(Kt,l),ka.forEach(t),Fa.forEach(t);for(var u=0;u<pt.length;u++){var a=pt[u];a.blockedOn===l&&(a.blockedOn=null)}for(;0<pt.length&&(u=pt[0],u.blockedOn===null);)ud(u),u.blockedOn===null&&pt.shift();if(u=(l.ownerDocument||l).$$reactFormReplay,u!=null)for(a=0;a<u.length;a+=3){var n=u[a],e=u[a+1],f=n[Ol]||null;if(typeof e=="function")f||A1(u);else if(f){var c=null;if(e&&e.hasAttribute("formAction")){if(n=e,f=e[Ol]||null)c=f.formAction;else if(Oi(n)!==null)continue}else c=f.action;typeof c=="function"?u[a+1]=c:(u.splice(a,3),a-=3),A1(u)}}}function ri(l){this._internalRoot=l}je.prototype.render=ri.prototype.render=function(l){var t=this._internalRoot;if(t===null)throw Error(b(409));var u=t.current,a=pl();Pv(u,a,l,t,null,null)};je.prototype.unmount=ri.prototype.unmount=function(){var l=this._internalRoot;if(l!==null){this._internalRoot=null;var t=l.containerInfo;Pv(l.current,2,null,l,null,null),Xe(),t[aa]=null}};function je(l){this._internalRoot=l}je.prototype.unstable_scheduleHydration=function(l){if(l){var t=G1();l={blockedOn:null,target:l,priority:t};for(var u=0;u<pt.length&&t!==0&&t<pt[u].priority;u++);pt.splice(u,0,l),u===0&&ud(l)}};var z1=O1.version;if(z1!=="19.1.1")throw Error(b(527,z1,"19.1.1"));Y.findDOMNode=function(l){var t=l._reactInternals;if(t===void 0)throw typeof l.render=="function"?Error(b(188)):(l=Object.keys(l).join(","),Error(b(268,l)));return l=Zd(t),l=l!==null?_1(l):null,l=l===null?null:l.stateNode,l};var io={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:r,reconcilerVersion:"19.1.1"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&(Ea=__REACT_DEVTOOLS_GLOBAL_HOOK__,!Ea.isDisabled&&Ea.supportsFiber))try{ln=Ea.inject(io),Hl=Ea}catch{}var Ea;Ce.createRoot=function(l,t){if(!r1(l))throw Error(b(299));var u=!1,a="",n=Fy,e=Iy,f=Py,c=null;return t!=null&&(t.unstable_strictMode===!0&&(u=!0),t.identifierPrefix!==void 0&&(a=t.identifierPrefix),t.onUncaughtError!==void 0&&(n=t.onUncaughtError),t.onCaughtError!==void 0&&(e=t.onCaughtError),t.onRecoverableError!==void 0&&(f=t.onRecoverableError),t.unstable_transitionCallbacks!==void 0&&(c=t.unstable_transitionCallbacks)),t=Fv(l,1,!1,null,null,u,a,n,e,f,c,null),l[aa]=t.current,bi(l),new ri(t)};Ce.hydrateRoot=function(l,t,u){if(!r1(l))throw Error(b(299));var a=!1,n="",e=Fy,f=Iy,c=Py,i=null,d=null;return u!=null&&(u.unstable_strictMode===!0&&(a=!0),u.identifierPrefix!==void 0&&(n=u.identifierPrefix),u.onUncaughtError!==void 0&&(e=u.onUncaughtError),u.onCaughtError!==void 0&&(f=u.onCaughtError),u.onRecoverableError!==void 0&&(c=u.onRecoverableError),u.unstable_transitionCallbacks!==void 0&&(i=u.unstable_transitionCallbacks),u.formState!==void 0&&(d=u.formState)),t=Fv(l,1,!0,t,u??null,a,n,e,f,c,i,d),t.context=Iv(null),u=t.current,a=pl(),a=Rc(a),n=Qt(a),n.callback=null,Zt(u,n,a),u=a,t.current.lanes=u,un(t,u),ut(t),l[aa]=t.current,bi(l),new je(t)};Ce.version="19.1.1"});var fd=At((Ao,ed)=>{"use strict";function nd(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(nd)}catch(l){console.error(l)}}nd(),ed.exports=ad()});var J=mu(zt(),1),dd=mu(fd(),1);var ml=mu(zt(),1),cd=()=>((0,ml.useEffect)(()=>{},[]),ml.default.createElement(ml.default.Fragment,null,ml.default.createElement("section",null,ml.default.createElement("h1",null,"Dashboard")),ml.default.createElement("section",{className:"grid"},ml.default.createElement("article",null,ml.default.createElement("a",{href:"/medications",className:"contrast"},ml.default.createElement("span",{className:"material-symbols-outlined"},"medication"),ml.default.createElement("span",null,"Medications"))),ml.default.createElement("article",null,ml.default.createElement("a",{href:"/patients",className:"contrast"},ml.default.createElement("span",{className:"material-symbols-outlined"},"groups"),ml.default.createElement("span",null,"Patients"))))));var Sl=mu(zt(),1),id=()=>{let[l,t]=(0,Sl.useState)([]);return(0,Sl.useEffect)(()=>{fetch("/api/patients",{method:"GET"}).then(u=>u.json()).then(u=>t(u))},[]),Sl.default.createElement(Sl.default.Fragment,null,Sl.default.createElement("section",null,Sl.default.createElement("h1",null,"Patients")),Sl.default.createElement("section",null,Sl.default.createElement("ul",null,l.map(u=>Sl.default.createElement(Sl.default.Fragment,null,Sl.default.createElement("li",{className:"grid"},Sl.default.createElement("span",{className:"material-symbols-outlined"},"account_circle"),Sl.default.createElement("a",{role:"button",className:"outline",href:`/patient?id=${u.id}`},u.firstName," ",u.lastName)))))))};var dl=mu(zt(),1),yd=()=>{let[l,t]=(0,dl.useState)([]);return(0,dl.useEffect)(()=>{fetch("/api/medications",{method:"GET"}).then(u=>u.json()).then(t)},[]),dl.default.createElement(dl.default.Fragment,null,dl.default.createElement("section",null,dl.default.createElement("h1",null,"Medications")),dl.default.createElement("section",null,l.map(u=>dl.default.createElement(dl.default.Fragment,null,dl.default.createElement("details",null,dl.default.createElement("summary",null,dl.default.createElement("span",null,u.title)),dl.default.createElement("p",null,"...")),dl.default.createElement("hr",null)))))};var Ml=mu(zt(),1),vd=()=>{let[l,t]=(0,Ml.useState)({});return(0,Ml.useEffect)(()=>{let{id:u}=Object.fromEntries(new URLSearchParams(location.search));fetch(`/api/patient?id=${u}`,{method:"GET"}).then(a=>a.json()).then(a=>t(a))},[]),Ml.default.createElement(Ml.default.Fragment,null,Ml.default.createElement("section",null,Ml.default.createElement("h1",null,"Patient")),Ml.default.createElement("section",null,Ml.default.createElement("article",null,Ml.default.createElement("header",null,l?.firstName," ",l?.lastName))),Ml.default.createElement("section",null,Ml.default.createElement("article",null)))};var yo=()=>J.default.createElement("h1",null,"Not Found"),Ve=window.location.pathname.replace(/\/(Stage|Pro)\/?/,"/"),vo=document.querySelector(".container"),so=J.default.createElement(J.default.Fragment,null,J.default.createElement("header",null,J.default.createElement("nav",null,J.default.createElement("ul",null,J.default.createElement("li",null,J.default.createElement("a",{href:"/",className:"secondary"},J.default.createElement("span",{className:"material-symbols-outlined"},"home")))),J.default.createElement("ul",null,J.default.createElement("li",null,J.default.createElement("strong",null,"Medication Manager"))),J.default.createElement("ul",null,J.default.createElement("li",null,J.default.createElement("a",{href:"#",className:"secondary"},J.default.createElement("span",{className:"material-symbols-outlined"},"help")))))),J.default.createElement("main",null,Ve==="/"?J.default.createElement(cd,null):Ve==="/patient"?J.default.createElement(vd,null):Ve==="/patients"?J.default.createElement(id,null):Ve==="/medications"?J.default.createElement(yd,null):J.default.createElement(yo,null)),J.default.createElement("footer",null));(0,dd.createRoot)(vo).render(so);
/*! Bundled license information:

react/cjs/react.production.js:
  (**
   * @license React
   * react.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.js:
  (**
   * @license React
   * scheduler.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.js:
  (**
   * @license React
   * react-dom.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.production.js:
  (**
   * @license React
   * react-dom-client.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwgIi4uL2NsaWVudC9jbGllbnQudHN4IiwgIi4uL2NsaWVudC9yb290LnRzeCIsICIuLi9jbGllbnQvcGF0aWVudHMudHN4IiwgIi4uL2NsaWVudC9tZWRpY2F0aW9ucy50c3giLCAiLi4vY2xpZW50L3BhdGllbnQudHN4Il0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnRcIiksXG4gIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxcbiAgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxcbiAgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxcbiAgUkVBQ1RfQ09OU1VNRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKSxcbiAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSxcbiAgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IFwib2JqZWN0XCIgIT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlKSByZXR1cm4gbnVsbDtcbiAgbWF5YmVJdGVyYWJsZSA9XG4gICAgKE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgbWF5YmVJdGVyYWJsZVtcIkBAaXRlcmF0b3JcIl07XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlID8gbWF5YmVJdGVyYWJsZSA6IG51bGw7XG59XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfSxcbiAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKCkge31cbiAgfSxcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbixcbiAgZW1wdHlPYmplY3QgPSB7fTtcbmZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBwYXJ0aWFsU3RhdGUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwYXJ0aWFsU3RhdGUgJiZcbiAgICBudWxsICE9IHBhcnRpYWxTdGF0ZVxuICApXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcInRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiXG4gICAgKTtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBcInNldFN0YXRlXCIpO1xufTtcbkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLCBjYWxsYmFjaywgXCJmb3JjZVVwZGF0ZVwiKTtcbn07XG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuZnVuY3Rpb24gUHVyZUNvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxudmFyIHB1cmVDb21wb25lbnRQcm90b3R5cGUgPSAoUHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50RHVtbXkoKSk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHVyZUNvbXBvbmVudDtcbmFzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSAhMDtcbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXksXG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzID0geyBIOiBudWxsLCBBOiBudWxsLCBUOiBudWxsLCBTOiBudWxsLCBWOiBudWxsIH0sXG4gIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gIHNlbGYgPSBwcm9wcy5yZWY7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogdm9pZCAwICE9PSBzZWxmID8gc2VsZiA6IG51bGwsXG4gICAgcHJvcHM6IHByb3BzXG4gIH07XG59XG5mdW5jdGlvbiBjbG9uZUFuZFJlcGxhY2VLZXkob2xkRWxlbWVudCwgbmV3S2V5KSB7XG4gIHJldHVybiBSZWFjdEVsZW1lbnQoXG4gICAgb2xkRWxlbWVudC50eXBlLFxuICAgIG5ld0tleSxcbiAgICB2b2lkIDAsXG4gICAgdm9pZCAwLFxuICAgIHZvaWQgMCxcbiAgICBvbGRFbGVtZW50LnByb3BzXG4gICk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2JqZWN0ICYmXG4gICAgbnVsbCAhPT0gb2JqZWN0ICYmXG4gICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbiAgKTtcbn1cbmZ1bmN0aW9uIGVzY2FwZShrZXkpIHtcbiAgdmFyIGVzY2FwZXJMb29rdXAgPSB7IFwiPVwiOiBcIj0wXCIsIFwiOlwiOiBcIj0yXCIgfTtcbiAgcmV0dXJuIChcbiAgICBcIiRcIiArXG4gICAga2V5LnJlcGxhY2UoL1s9Ol0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gICAgfSlcbiAgKTtcbn1cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9cXC8rL2c7XG5mdW5jdGlvbiBnZXRFbGVtZW50S2V5KGVsZW1lbnQsIGluZGV4KSB7XG4gIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgZWxlbWVudCAmJiBudWxsICE9PSBlbGVtZW50ICYmIG51bGwgIT0gZWxlbWVudC5rZXlcbiAgICA/IGVzY2FwZShcIlwiICsgZWxlbWVudC5rZXkpXG4gICAgOiBpbmRleC50b1N0cmluZygzNik7XG59XG5mdW5jdGlvbiBub29wJDEoKSB7fVxuZnVuY3Rpb24gcmVzb2x2ZVRoZW5hYmxlKHRoZW5hYmxlKSB7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhyb3cgdGhlbmFibGUucmVhc29uO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzd2l0Y2ggKFxuICAgICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHRoZW5hYmxlLnN0YXR1c1xuICAgICAgICAgID8gdGhlbmFibGUudGhlbihub29wJDEsIG5vb3AkMSlcbiAgICAgICAgICA6ICgodGhlbmFibGUuc3RhdHVzID0gXCJwZW5kaW5nXCIpLFxuICAgICAgICAgICAgdGhlbmFibGUudGhlbihcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiKSxcbiAgICAgICAgICAgICAgICAgICh0aGVuYWJsZS52YWx1ZSA9IGZ1bGZpbGxlZFZhbHVlKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICgodGhlbmFibGUuc3RhdHVzID0gXCJyZWplY3RlZFwiKSwgKHRoZW5hYmxlLnJlYXNvbiA9IGVycm9yKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkpLFxuICAgICAgICB0aGVuYWJsZS5zdGF0dXMpXG4gICAgICApIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhyb3cgdGhlbmFibGUucmVhc29uO1xuICAgICAgfVxuICB9XG4gIHRocm93IHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gbWFwSW50b0FycmF5KGNoaWxkcmVuLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgbmFtZVNvRmFyLCBjYWxsYmFjaykge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGUgfHwgXCJib29sZWFuXCIgPT09IHR5cGUpIGNoaWxkcmVuID0gbnVsbDtcbiAgdmFyIGludm9rZUNhbGxiYWNrID0gITE7XG4gIGlmIChudWxsID09PSBjaGlsZHJlbikgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgZWxzZVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICBpbnZva2VDYWxsYmFjayA9ICEwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgc3dpdGNoIChjaGlsZHJlbi4kJHR5cGVvZikge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgICBpbnZva2VDYWxsYmFjayA9ICEwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoaW52b2tlQ2FsbGJhY2sgPSBjaGlsZHJlbi5faW5pdCksXG4gICAgICAgICAgICAgIG1hcEludG9BcnJheShcbiAgICAgICAgICAgICAgICBpbnZva2VDYWxsYmFjayhjaGlsZHJlbi5fcGF5bG9hZCksXG4gICAgICAgICAgICAgICAgYXJyYXksXG4gICAgICAgICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgaWYgKGludm9rZUNhbGxiYWNrKVxuICAgIHJldHVybiAoXG4gICAgICAoY2FsbGJhY2sgPSBjYWxsYmFjayhjaGlsZHJlbikpLFxuICAgICAgKGludm9rZUNhbGxiYWNrID1cbiAgICAgICAgXCJcIiA9PT0gbmFtZVNvRmFyID8gXCIuXCIgKyBnZXRFbGVtZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0ZhciksXG4gICAgICBpc0FycmF5SW1wbChjYWxsYmFjaylcbiAgICAgICAgPyAoKGVzY2FwZWRQcmVmaXggPSBcIlwiKSxcbiAgICAgICAgICBudWxsICE9IGludm9rZUNhbGxiYWNrICYmXG4gICAgICAgICAgICAoZXNjYXBlZFByZWZpeCA9XG4gICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsIFwiJCYvXCIpICsgXCIvXCIpLFxuICAgICAgICAgIG1hcEludG9BcnJheShjYWxsYmFjaywgYXJyYXksIGVzY2FwZWRQcmVmaXgsIFwiXCIsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9KSlcbiAgICAgICAgOiBudWxsICE9IGNhbGxiYWNrICYmXG4gICAgICAgICAgKGlzVmFsaWRFbGVtZW50KGNhbGxiYWNrKSAmJlxuICAgICAgICAgICAgKGNhbGxiYWNrID0gY2xvbmVBbmRSZXBsYWNlS2V5KFxuICAgICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgICAgZXNjYXBlZFByZWZpeCArXG4gICAgICAgICAgICAgICAgKG51bGwgPT0gY2FsbGJhY2sua2V5IHx8XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmtleSA9PT0gY2FsbGJhY2sua2V5KVxuICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICA6IChcIlwiICsgY2FsbGJhY2sua2V5KS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LFxuICAgICAgICAgICAgICAgICAgICAgIFwiJCYvXCJcbiAgICAgICAgICAgICAgICAgICAgKSArIFwiL1wiKSArXG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2tcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIGFycmF5LnB1c2goY2FsbGJhY2spKSxcbiAgICAgIDFcbiAgICApO1xuICBpbnZva2VDYWxsYmFjayA9IDA7XG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IFwiXCIgPT09IG5hbWVTb0ZhciA/IFwiLlwiIDogbmFtZVNvRmFyICsgXCI6XCI7XG4gIGlmIChpc0FycmF5SW1wbChjaGlsZHJlbikpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKylcbiAgICAgIChuYW1lU29GYXIgPSBjaGlsZHJlbltpXSksXG4gICAgICAgICh0eXBlID0gbmV4dE5hbWVQcmVmaXggKyBnZXRFbGVtZW50S2V5KG5hbWVTb0ZhciwgaSkpLFxuICAgICAgICAoaW52b2tlQ2FsbGJhY2sgKz0gbWFwSW50b0FycmF5KFxuICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICBhcnJheSxcbiAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKSk7XG4gIGVsc2UgaWYgKCgoaSA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pKSwgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaSkpXG4gICAgZm9yIChcbiAgICAgIGNoaWxkcmVuID0gaS5jYWxsKGNoaWxkcmVuKSwgaSA9IDA7XG4gICAgICAhKG5hbWVTb0ZhciA9IGNoaWxkcmVuLm5leHQoKSkuZG9uZTtcblxuICAgIClcbiAgICAgIChuYW1lU29GYXIgPSBuYW1lU29GYXIudmFsdWUpLFxuICAgICAgICAodHlwZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShuYW1lU29GYXIsIGkrKykpLFxuICAgICAgICAoaW52b2tlQ2FsbGJhY2sgKz0gbWFwSW50b0FycmF5KFxuICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICBhcnJheSxcbiAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKSk7XG4gIGVsc2UgaWYgKFwib2JqZWN0XCIgPT09IHR5cGUpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2hpbGRyZW4udGhlbilcbiAgICAgIHJldHVybiBtYXBJbnRvQXJyYXkoXG4gICAgICAgIHJlc29sdmVUaGVuYWJsZShjaGlsZHJlbiksXG4gICAgICAgIGFycmF5LFxuICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApO1xuICAgIGFycmF5ID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIiArXG4gICAgICAgIChcIltvYmplY3QgT2JqZWN0XVwiID09PSBhcnJheVxuICAgICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICAgIDogYXJyYXkpICtcbiAgICAgICAgXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCJcbiAgICApO1xuICB9XG4gIHJldHVybiBpbnZva2VDYWxsYmFjaztcbn1cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChudWxsID09IGNoaWxkcmVuKSByZXR1cm4gY2hpbGRyZW47XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICBjb3VudCA9IDA7XG4gIG1hcEludG9BcnJheShjaGlsZHJlbiwgcmVzdWx0LCBcIlwiLCBcIlwiLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBjb3VudCsrKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBsYXp5SW5pdGlhbGl6ZXIocGF5bG9hZCkge1xuICBpZiAoLTEgPT09IHBheWxvYWQuX3N0YXR1cykge1xuICAgIHZhciBjdG9yID0gcGF5bG9hZC5fcmVzdWx0O1xuICAgIGN0b3IgPSBjdG9yKCk7XG4gICAgY3Rvci50aGVuKFxuICAgICAgZnVuY3Rpb24gKG1vZHVsZU9iamVjdCkge1xuICAgICAgICBpZiAoMCA9PT0gcGF5bG9hZC5fc3RhdHVzIHx8IC0xID09PSBwYXlsb2FkLl9zdGF0dXMpXG4gICAgICAgICAgKHBheWxvYWQuX3N0YXR1cyA9IDEpLCAocGF5bG9hZC5fcmVzdWx0ID0gbW9kdWxlT2JqZWN0KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKDAgPT09IHBheWxvYWQuX3N0YXR1cyB8fCAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKVxuICAgICAgICAgIChwYXlsb2FkLl9zdGF0dXMgPSAyKSwgKHBheWxvYWQuX3Jlc3VsdCA9IGVycm9yKTtcbiAgICAgIH1cbiAgICApO1xuICAgIC0xID09PSBwYXlsb2FkLl9zdGF0dXMgJiYgKChwYXlsb2FkLl9zdGF0dXMgPSAwKSwgKHBheWxvYWQuX3Jlc3VsdCA9IGN0b3IpKTtcbiAgfVxuICBpZiAoMSA9PT0gcGF5bG9hZC5fc3RhdHVzKSByZXR1cm4gcGF5bG9hZC5fcmVzdWx0LmRlZmF1bHQ7XG4gIHRocm93IHBheWxvYWQuX3Jlc3VsdDtcbn1cbnZhciByZXBvcnRHbG9iYWxFcnJvciA9XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlcG9ydEVycm9yXG4gICAgPyByZXBvcnRFcnJvclxuICAgIDogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygd2luZG93ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd2luZG93LkVycm9yRXZlbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IHdpbmRvdy5FcnJvckV2ZW50KFwiZXJyb3JcIiwge1xuICAgICAgICAgICAgYnViYmxlczogITAsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiAhMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlcnJvciAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBlcnJvciAmJlxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCF3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCkpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvY2VzcyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByb2Nlc3MuZW1pdFxuICAgICAgICApIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoXCJ1bmNhdWdodEV4Y2VwdGlvblwiLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZXhwb3J0cy5DaGlsZHJlbiA9IHtcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgZm9yRWFjaDogZnVuY3Rpb24gKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgICBtYXBDaGlsZHJlbihcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3JFYWNoRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSxcbiAgICAgIGZvckVhY2hDb250ZXh0XG4gICAgKTtcbiAgfSxcbiAgY291bnQ6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHZhciBuID0gMDtcbiAgICBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuY3Rpb24gKCkge1xuICAgICAgbisrO1xuICAgIH0pO1xuICAgIHJldHVybiBuO1xuICB9LFxuICB0b0FycmF5OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gKFxuICAgICAgbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KSB8fCBbXVxuICAgICk7XG4gIH0sXG4gIG9ubHk6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKVxuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCJcbiAgICAgICk7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG59O1xuZXhwb3J0cy5Db21wb25lbnQgPSBDb21wb25lbnQ7XG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xuZXhwb3J0cy5QdXJlQ29tcG9uZW50ID0gUHVyZUNvbXBvbmVudDtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG5leHBvcnRzLlN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbmV4cG9ydHMuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFID1cbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHM7XG5leHBvcnRzLl9fQ09NUElMRVJfUlVOVElNRSA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBjOiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU1lbW9DYWNoZShzaXplKTtcbiAgfVxufTtcbmV4cG9ydHMuY2FjaGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09PSBlbGVtZW50IHx8IHZvaWQgMCA9PT0gZWxlbWVudClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIiArIGVsZW1lbnQgKyBcIi5cIlxuICAgICk7XG4gIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcyksXG4gICAga2V5ID0gZWxlbWVudC5rZXksXG4gICAgb3duZXIgPSB2b2lkIDA7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5yZWYgJiYgKG93bmVyID0gdm9pZCAwKSxcbiAgICB2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSxcbiAgICBjb25maWcpKVxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgfHxcbiAgICAgICAgXCJrZXlcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NlbGZcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NvdXJjZVwiID09PSBwcm9wTmFtZSB8fFxuICAgICAgICAoXCJyZWZcIiA9PT0gcHJvcE5hbWUgJiYgdm9pZCAwID09PSBjb25maWcucmVmKSB8fFxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBwcm9wTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gcHJvcE5hbWUpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBwcm9wTmFtZSkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShwcm9wTmFtZSksIGkgPSAwOyBpIDwgcHJvcE5hbWU7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgb3duZXIsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoZGVmYXVsdFZhbHVlKSB7XG4gIGRlZmF1bHRWYWx1ZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIF9jdXJyZW50VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlMjogZGVmYXVsdFZhbHVlLFxuICAgIF90aHJlYWRDb3VudDogMCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBDb25zdW1lcjogbnVsbFxuICB9O1xuICBkZWZhdWx0VmFsdWUuUHJvdmlkZXIgPSBkZWZhdWx0VmFsdWU7XG4gIGRlZmF1bHRWYWx1ZS5Db25zdW1lciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OU1VNRVJfVFlQRSxcbiAgICBfY29udGV4dDogZGVmYXVsdFZhbHVlXG4gIH07XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lLFxuICAgIHByb3BzID0ge30sXG4gICAga2V5ID0gbnVsbDtcbiAgaWYgKG51bGwgIT0gY29uZmlnKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKHZvaWQgMCAhPT0gY29uZmlnLmtleSAmJiAoa2V5ID0gXCJcIiArIGNvbmZpZy5rZXkpLCBjb25maWcpKVxuICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJlxuICAgICAgICBcImtleVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc2VsZlwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc291cmNlXCIgIT09IHByb3BOYW1lICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdKTtcbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmICgxID09PSBjaGlsZHJlbkxlbmd0aCkgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgZWxzZSBpZiAoMSA8IGNoaWxkcmVuTGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKSwgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKVxuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKChjaGlsZHJlbkxlbmd0aCA9IHR5cGUuZGVmYXVsdFByb3BzKSwgY2hpbGRyZW5MZW5ndGgpKVxuICAgICAgdm9pZCAwID09PSBwcm9wc1twcm9wTmFtZV0gJiZcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNoaWxkcmVuTGVuZ3RoW3Byb3BOYW1lXSk7XG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgbnVsbCwgcHJvcHMpO1xufTtcbmV4cG9ydHMuY3JlYXRlUmVmID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBjdXJyZW50OiBudWxsIH07XG59O1xuZXhwb3J0cy5mb3J3YXJkUmVmID0gZnVuY3Rpb24gKHJlbmRlcikge1xuICByZXR1cm4geyAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSwgcmVuZGVyOiByZW5kZXIgfTtcbn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50ID0gaXNWYWxpZEVsZW1lbnQ7XG5leHBvcnRzLmxhenkgPSBmdW5jdGlvbiAoY3Rvcikge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX3BheWxvYWQ6IHsgX3N0YXR1czogLTEsIF9yZXN1bHQ6IGN0b3IgfSxcbiAgICBfaW5pdDogbGF6eUluaXRpYWxpemVyXG4gIH07XG59O1xuZXhwb3J0cy5tZW1vID0gZnVuY3Rpb24gKHR5cGUsIGNvbXBhcmUpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTUVNT19UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgY29tcGFyZTogdm9pZCAwID09PSBjb21wYXJlID8gbnVsbCA6IGNvbXBhcmVcbiAgfTtcbn07XG5leHBvcnRzLnN0YXJ0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChzY29wZSkge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIGN1cnJlbnRUcmFuc2l0aW9uID0ge307XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBzY29wZSgpLFxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICAgICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICAgIHJldHVyblZhbHVlLnRoZW4obm9vcCwgcmVwb3J0R2xvYmFsRXJyb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ2FjaGVSZWZyZXNoKCk7XG59O1xuZXhwb3J0cy51c2UgPSBmdW5jdGlvbiAodXNhYmxlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZSh1c2FibGUpO1xufTtcbmV4cG9ydHMudXNlQWN0aW9uU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VBY3Rpb25TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUNhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUNvbnRleHQgPSBmdW5jdGlvbiAoQ29udGV4dCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDb250ZXh0KENvbnRleHQpO1xufTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbn07XG5leHBvcnRzLnVzZUVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGNyZWF0ZURlcHMsIHVwZGF0ZSkge1xuICB2YXIgZGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkg7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB1cGRhdGUpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcInVzZUVmZmVjdCBDUlVEIG92ZXJsb2FkIGlzIG5vdCBlbmFibGVkIGluIHRoaXMgYnVpbGQgb2YgUmVhY3QuXCJcbiAgICApO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VFZmZlY3QoY3JlYXRlLCBjcmVhdGVEZXBzKTtcbn07XG5leHBvcnRzLnVzZUlkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VJZCgpO1xufTtcbmV4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZSA9IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTWVtbyA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlTWVtbyhjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlT3B0aW1pc3RpYyA9IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VPcHRpbWlzdGljKHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbn07XG5leHBvcnRzLnVzZVJlZHVjZXIgPSBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xufTtcbmV4cG9ydHMudXNlUmVmID0gZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VSZWYoaW5pdGlhbFZhbHVlKTtcbn07XG5leHBvcnRzLnVzZVN0YXRlID0gZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VTdGF0ZShpbml0aWFsU3RhdGUpO1xufTtcbmV4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmUgPSBmdW5jdGlvbiAoXG4gIHN1YnNjcmliZSxcbiAgZ2V0U25hcHNob3QsXG4gIGdldFNlcnZlclNuYXBzaG90XG4pIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3luY0V4dGVybmFsU3RvcmUoXG4gICAgc3Vic2NyaWJlLFxuICAgIGdldFNuYXBzaG90LFxuICAgIGdldFNlcnZlclNuYXBzaG90XG4gICk7XG59O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VUcmFuc2l0aW9uKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4xLjFcIjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHB1c2goaGVhcCwgbm9kZSkge1xuICB2YXIgaW5kZXggPSBoZWFwLmxlbmd0aDtcbiAgaGVhcC5wdXNoKG5vZGUpO1xuICBhOiBmb3IgKDsgMCA8IGluZGV4OyApIHtcbiAgICB2YXIgcGFyZW50SW5kZXggPSAoaW5kZXggLSAxKSA+Pj4gMSxcbiAgICAgIHBhcmVudCA9IGhlYXBbcGFyZW50SW5kZXhdO1xuICAgIGlmICgwIDwgY29tcGFyZShwYXJlbnQsIG5vZGUpKVxuICAgICAgKGhlYXBbcGFyZW50SW5kZXhdID0gbm9kZSksIChoZWFwW2luZGV4XSA9IHBhcmVudCksIChpbmRleCA9IHBhcmVudEluZGV4KTtcbiAgICBlbHNlIGJyZWFrIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIHBlZWsoaGVhcCkge1xuICByZXR1cm4gMCA9PT0gaGVhcC5sZW5ndGggPyBudWxsIDogaGVhcFswXTtcbn1cbmZ1bmN0aW9uIHBvcChoZWFwKSB7XG4gIGlmICgwID09PSBoZWFwLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIHZhciBmaXJzdCA9IGhlYXBbMF0sXG4gICAgbGFzdCA9IGhlYXAucG9wKCk7XG4gIGlmIChsYXN0ICE9PSBmaXJzdCkge1xuICAgIGhlYXBbMF0gPSBsYXN0O1xuICAgIGE6IGZvciAoXG4gICAgICB2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBoZWFwLmxlbmd0aCwgaGFsZkxlbmd0aCA9IGxlbmd0aCA+Pj4gMTtcbiAgICAgIGluZGV4IDwgaGFsZkxlbmd0aDtcblxuICAgICkge1xuICAgICAgdmFyIGxlZnRJbmRleCA9IDIgKiAoaW5kZXggKyAxKSAtIDEsXG4gICAgICAgIGxlZnQgPSBoZWFwW2xlZnRJbmRleF0sXG4gICAgICAgIHJpZ2h0SW5kZXggPSBsZWZ0SW5kZXggKyAxLFxuICAgICAgICByaWdodCA9IGhlYXBbcmlnaHRJbmRleF07XG4gICAgICBpZiAoMCA+IGNvbXBhcmUobGVmdCwgbGFzdCkpXG4gICAgICAgIHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxlZnQpXG4gICAgICAgICAgPyAoKGhlYXBbaW5kZXhdID0gcmlnaHQpLFxuICAgICAgICAgICAgKGhlYXBbcmlnaHRJbmRleF0gPSBsYXN0KSxcbiAgICAgICAgICAgIChpbmRleCA9IHJpZ2h0SW5kZXgpKVxuICAgICAgICAgIDogKChoZWFwW2luZGV4XSA9IGxlZnQpLFxuICAgICAgICAgICAgKGhlYXBbbGVmdEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gbGVmdEluZGV4KSk7XG4gICAgICBlbHNlIGlmIChyaWdodEluZGV4IDwgbGVuZ3RoICYmIDAgPiBjb21wYXJlKHJpZ2h0LCBsYXN0KSlcbiAgICAgICAgKGhlYXBbaW5kZXhdID0gcmlnaHQpLCAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLCAoaW5kZXggPSByaWdodEluZGV4KTtcbiAgICAgIGVsc2UgYnJlYWsgYTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpcnN0O1xufVxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIHZhciBkaWZmID0gYS5zb3J0SW5kZXggLSBiLnNvcnRJbmRleDtcbiAgcmV0dXJuIDAgIT09IGRpZmYgPyBkaWZmIDogYS5pZCAtIGIuaWQ7XG59XG5leHBvcnRzLnVuc3RhYmxlX25vdyA9IHZvaWQgMDtcbmlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2UgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2Uubm93KSB7XG4gIHZhciBsb2NhbFBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbFBlcmZvcm1hbmNlLm5vdygpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIGxvY2FsRGF0ZSA9IERhdGUsXG4gICAgaW5pdGlhbFRpbWUgPSBsb2NhbERhdGUubm93KCk7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbERhdGUubm93KCkgLSBpbml0aWFsVGltZTtcbiAgfTtcbn1cbnZhciB0YXNrUXVldWUgPSBbXSxcbiAgdGltZXJRdWV1ZSA9IFtdLFxuICB0YXNrSWRDb3VudGVyID0gMSxcbiAgY3VycmVudFRhc2sgPSBudWxsLFxuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IDMsXG4gIGlzUGVyZm9ybWluZ1dvcmsgPSAhMSxcbiAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMSxcbiAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExLFxuICBuZWVkc1BhaW50ID0gITEsXG4gIGxvY2FsU2V0VGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHNldFRpbWVvdXQgPyBzZXRUaW1lb3V0IDogbnVsbCxcbiAgbG9jYWxDbGVhclRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiBudWxsLFxuICBsb2NhbFNldEltbWVkaWF0ZSA9IFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBzZXRJbW1lZGlhdGUgPyBzZXRJbW1lZGlhdGUgOiBudWxsO1xuZnVuY3Rpb24gYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSkge1xuICBmb3IgKHZhciB0aW1lciA9IHBlZWsodGltZXJRdWV1ZSk7IG51bGwgIT09IHRpbWVyOyApIHtcbiAgICBpZiAobnVsbCA9PT0gdGltZXIuY2FsbGJhY2spIHBvcCh0aW1lclF1ZXVlKTtcbiAgICBlbHNlIGlmICh0aW1lci5zdGFydFRpbWUgPD0gY3VycmVudFRpbWUpXG4gICAgICBwb3AodGltZXJRdWV1ZSksXG4gICAgICAgICh0aW1lci5zb3J0SW5kZXggPSB0aW1lci5leHBpcmF0aW9uVGltZSksXG4gICAgICAgIHB1c2godGFza1F1ZXVlLCB0aW1lcik7XG4gICAgZWxzZSBicmVhaztcbiAgICB0aW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoY3VycmVudFRpbWUpIHtcbiAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExO1xuICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgaWYgKCFpc0hvc3RDYWxsYmFja1NjaGVkdWxlZClcbiAgICBpZiAobnVsbCAhPT0gcGVlayh0YXNrUXVldWUpKVxuICAgICAgKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLFxuICAgICAgICBpc01lc3NhZ2VMb29wUnVubmluZyB8fFxuICAgICAgICAgICgoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMCksIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKCkpO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGZpcnN0VGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICAgICAgbnVsbCAhPT0gZmlyc3RUaW1lciAmJlxuICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoaGFuZGxlVGltZW91dCwgZmlyc3RUaW1lci5zdGFydFRpbWUgLSBjdXJyZW50VGltZSk7XG4gICAgfVxufVxudmFyIGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITEsXG4gIHRhc2tUaW1lb3V0SUQgPSAtMSxcbiAgZnJhbWVJbnRlcnZhbCA9IDUsXG4gIHN0YXJ0VGltZSA9IC0xO1xuZnVuY3Rpb24gc2hvdWxkWWllbGRUb0hvc3QoKSB7XG4gIHJldHVybiBuZWVkc1BhaW50XG4gICAgPyAhMFxuICAgIDogZXhwb3J0cy51bnN0YWJsZV9ub3coKSAtIHN0YXJ0VGltZSA8IGZyYW1lSW50ZXJ2YWxcbiAgICAgID8gITFcbiAgICAgIDogITA7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSB7XG4gIG5lZWRzUGFpbnQgPSAhMTtcbiAgaWYgKGlzTWVzc2FnZUxvb3BSdW5uaW5nKSB7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICBzdGFydFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB2YXIgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICB0cnkge1xuICAgICAgYToge1xuICAgICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExO1xuICAgICAgICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkICYmXG4gICAgICAgICAgKChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEpLFxuICAgICAgICAgIGxvY2FsQ2xlYXJUaW1lb3V0KHRhc2tUaW1lb3V0SUQpLFxuICAgICAgICAgICh0YXNrVGltZW91dElEID0gLTEpKTtcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayA9ICEwO1xuICAgICAgICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYjoge1xuICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBjdXJyZW50VGFzayA9IHBlZWsodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFRhc2sgJiZcbiAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA+IGN1cnJlbnRUaW1lICYmIHNob3VsZFlpZWxkVG9Ib3N0KClcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGN1cnJlbnRUYXNrLmNhbGxiYWNrO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5jYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBjdXJyZW50VGFzay5wcmlvcml0eUxldmVsO1xuICAgICAgICAgICAgICAgIHZhciBjb250aW51YXRpb25DYWxsYmFjayA9IGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2suZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmNhbGxiYWNrID0gY29udGludWF0aW9uQ2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgIGhhc01vcmVXb3JrID0gITA7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzayA9PT0gcGVlayh0YXNrUXVldWUpICYmIHBvcCh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgcG9wKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRUYXNrID0gcGVlayh0YXNrUXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRUYXNrKSBoYXNNb3JlV29yayA9ICEwO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBmaXJzdFRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmlyc3RUaW1lciAmJlxuICAgICAgICAgICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChcbiAgICAgICAgICAgICAgICAgIGhhbmRsZVRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaGFzTW9yZVdvcmsgPSAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAoY3VycmVudFRhc2sgPSBudWxsKSxcbiAgICAgICAgICAgIChjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbCksXG4gICAgICAgICAgICAoaXNQZXJmb3JtaW5nV29yayA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNNb3JlV29yayA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaGFzTW9yZVdvcmtcbiAgICAgICAgPyBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpXG4gICAgICAgIDogKGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITEpO1xuICAgIH1cbiAgfVxufVxudmFyIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lO1xuaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxvY2FsU2V0SW1tZWRpYXRlKVxuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2NhbFNldEltbWVkaWF0ZShwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUpO1xuICB9O1xuZWxzZSBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIE1lc3NhZ2VDaGFubmVsKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCksXG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gcGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lO1xuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKG51bGwpO1xuICB9O1xufSBlbHNlXG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvY2FsU2V0VGltZW91dChwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUsIDApO1xuICB9O1xuZnVuY3Rpb24gcmVxdWVzdEhvc3RUaW1lb3V0KGNhbGxiYWNrLCBtcykge1xuICB0YXNrVGltZW91dElEID0gbG9jYWxTZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayhleHBvcnRzLnVuc3RhYmxlX25vdygpKTtcbiAgfSwgbXMpO1xufVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHkgPSA1O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSA9IDE7XG5leHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5ID0gNDtcbmV4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHkgPSAzO1xuZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmcgPSBudWxsO1xuZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSA9IDI7XG5leHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgdGFzay5jYWxsYmFjayA9IG51bGw7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSA9IGZ1bmN0aW9uIChmcHMpIHtcbiAgMCA+IGZwcyB8fCAxMjUgPCBmcHNcbiAgICA/IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCJcbiAgICAgIClcbiAgICA6IChmcmFtZUludGVydmFsID0gMCA8IGZwcyA/IE1hdGguZmxvb3IoMWUzIC8gZnBzKSA6IDUpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX25leHQgPSBmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gIHN3aXRjaCAoY3VycmVudFByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBwcmlvcml0eUxldmVsID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIH1cbiAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByaW9yaXR5TGV2ZWw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2ZW50SGFuZGxlcigpO1xuICB9IGZpbmFsbHkge1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQgPSBmdW5jdGlvbiAoKSB7XG4gIG5lZWRzUGFpbnQgPSAhMDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSA9IGZ1bmN0aW9uIChwcmlvcml0eUxldmVsLCBldmVudEhhbmRsZXIpIHtcbiAgc3dpdGNoIChwcmlvcml0eUxldmVsKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgNTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcmlvcml0eUxldmVsID0gMztcbiAgfVxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoXG4gIHByaW9yaXR5TGV2ZWwsXG4gIGNhbGxiYWNrLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgbnVsbCAhPT0gb3B0aW9uc1xuICAgID8gKChvcHRpb25zID0gb3B0aW9ucy5kZWxheSksXG4gICAgICAob3B0aW9ucyA9XG4gICAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBvcHRpb25zICYmIDAgPCBvcHRpb25zXG4gICAgICAgICAgPyBjdXJyZW50VGltZSArIG9wdGlvbnNcbiAgICAgICAgICA6IGN1cnJlbnRUaW1lKSlcbiAgICA6IChvcHRpb25zID0gY3VycmVudFRpbWUpO1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdGltZW91dCA9IC0xO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdGltZW91dCA9IDI1MDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHRpbWVvdXQgPSAxMDczNzQxODIzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdGltZW91dCA9IDFlNDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aW1lb3V0ID0gNWUzO1xuICB9XG4gIHRpbWVvdXQgPSBvcHRpb25zICsgdGltZW91dDtcbiAgcHJpb3JpdHlMZXZlbCA9IHtcbiAgICBpZDogdGFza0lkQ291bnRlcisrLFxuICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICBwcmlvcml0eUxldmVsOiBwcmlvcml0eUxldmVsLFxuICAgIHN0YXJ0VGltZTogb3B0aW9ucyxcbiAgICBleHBpcmF0aW9uVGltZTogdGltZW91dCxcbiAgICBzb3J0SW5kZXg6IC0xXG4gIH07XG4gIG9wdGlvbnMgPiBjdXJyZW50VGltZVxuICAgID8gKChwcmlvcml0eUxldmVsLnNvcnRJbmRleCA9IG9wdGlvbnMpLFxuICAgICAgcHVzaCh0aW1lclF1ZXVlLCBwcmlvcml0eUxldmVsKSxcbiAgICAgIG51bGwgPT09IHBlZWsodGFza1F1ZXVlKSAmJlxuICAgICAgICBwcmlvcml0eUxldmVsID09PSBwZWVrKHRpbWVyUXVldWUpICYmXG4gICAgICAgIChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkXG4gICAgICAgICAgPyAobG9jYWxDbGVhclRpbWVvdXQodGFza1RpbWVvdXRJRCksICh0YXNrVGltZW91dElEID0gLTEpKVxuICAgICAgICAgIDogKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMCksXG4gICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChoYW5kbGVUaW1lb3V0LCBvcHRpb25zIC0gY3VycmVudFRpbWUpKSlcbiAgICA6ICgocHJpb3JpdHlMZXZlbC5zb3J0SW5kZXggPSB0aW1lb3V0KSxcbiAgICAgIHB1c2godGFza1F1ZXVlLCBwcmlvcml0eUxldmVsKSxcbiAgICAgIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIHx8XG4gICAgICAgIGlzUGVyZm9ybWluZ1dvcmsgfHxcbiAgICAgICAgKChpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICEwKSxcbiAgICAgICAgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgfHxcbiAgICAgICAgICAoKGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITApLCBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpKSkpO1xuICByZXR1cm4gcHJpb3JpdHlMZXZlbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkID0gc2hvdWxkWWllbGRUb0hvc3Q7XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgcGFyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHBhcmVudFByaW9yaXR5TGV2ZWw7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICB9XG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgdmFyIHVybCA9IFwiaHR0cHM6Ly9yZWFjdC5kZXYvZXJyb3JzL1wiICsgY29kZTtcbiAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdXJsICs9IFwiP2FyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgdXJsICs9IFwiJmFyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAoXG4gICAgXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIgK1xuICAgIGNvZGUgK1xuICAgIFwiOyB2aXNpdCBcIiArXG4gICAgdXJsICtcbiAgICBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxudmFyIEludGVybmFscyA9IHtcbiAgICBkOiB7XG4gICAgICBmOiBub29wLFxuICAgICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyMikpO1xuICAgICAgfSxcbiAgICAgIEQ6IG5vb3AsXG4gICAgICBDOiBub29wLFxuICAgICAgTDogbm9vcCxcbiAgICAgIG06IG5vb3AsXG4gICAgICBYOiBub29wLFxuICAgICAgUzogbm9vcCxcbiAgICAgIE06IG5vb3BcbiAgICB9LFxuICAgIHA6IDAsXG4gICAgZmluZERPTU5vZGU6IG51bGxcbiAgfSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpO1xuZnVuY3Rpb24gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lckluZm8sIGltcGxlbWVudGF0aW9uKSB7XG4gIHZhciBrZXkgPVxuICAgIDMgPCBhcmd1bWVudHMubGVuZ3RoICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzNdID8gYXJndW1lbnRzWzNdIDogbnVsbDtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUE9SVEFMX1RZUEUsXG4gICAga2V5OiBudWxsID09IGtleSA/IG51bGwgOiBcIlwiICsga2V5LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICB9O1xufVxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgUmVhY3QuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFO1xuZnVuY3Rpb24gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgaW5wdXQpIHtcbiAgaWYgKFwiZm9udFwiID09PSBhcykgcmV0dXJuIFwiXCI7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaW5wdXQpXG4gICAgcmV0dXJuIFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IGlucHV0ID8gaW5wdXQgOiBcIlwiO1xufVxuZXhwb3J0cy5fX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUgPVxuICBJbnRlcm5hbHM7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbCA9IGZ1bmN0aW9uIChjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPVxuICAgIDIgPCBhcmd1bWVudHMubGVuZ3RoICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzJdID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgaWYgKFxuICAgICFjb250YWluZXIgfHxcbiAgICAoMSAhPT0gY29udGFpbmVyLm5vZGVUeXBlICYmXG4gICAgICA5ICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDExICE9PSBjb250YWluZXIubm9kZVR5cGUpXG4gIClcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICByZXR1cm4gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lciwgbnVsbCwga2V5KTtcbn07XG5leHBvcnRzLmZsdXNoU3luYyA9IGZ1bmN0aW9uIChmbikge1xuICB2YXIgcHJldmlvdXNUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1VwZGF0ZVByaW9yaXR5ID0gSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgaWYgKCgoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGwpLCAoSW50ZXJuYWxzLnAgPSAyKSwgZm4pKSByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZpb3VzVHJhbnNpdGlvbiksXG4gICAgICAoSW50ZXJuYWxzLnAgPSBwcmV2aW91c1VwZGF0ZVByaW9yaXR5KSxcbiAgICAgIEludGVybmFscy5kLmYoKTtcbiAgfVxufTtcbmV4cG9ydHMucHJlY29ubmVjdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmXG4gICAgKG9wdGlvbnNcbiAgICAgID8gKChvcHRpb25zID0gb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICAgIChvcHRpb25zID1cbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9uc1xuICAgICAgICAgICAgPyBcInVzZS1jcmVkZW50aWFsc1wiID09PSBvcHRpb25zXG4gICAgICAgICAgICAgID8gb3B0aW9uc1xuICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgIDogdm9pZCAwKSlcbiAgICAgIDogKG9wdGlvbnMgPSBudWxsKSxcbiAgICBJbnRlcm5hbHMuZC5DKGhyZWYsIG9wdGlvbnMpKTtcbn07XG5leHBvcnRzLnByZWZldGNoRE5TID0gZnVuY3Rpb24gKGhyZWYpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgSW50ZXJuYWxzLmQuRChocmVmKTtcbn07XG5leHBvcnRzLnByZWluaXQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgb3B0aW9ucyAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcykge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgaW50ZWdyaXR5ID1cbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBmZXRjaFByaW9yaXR5ID1cbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgID8gb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgOiB2b2lkIDA7XG4gICAgXCJzdHlsZVwiID09PSBhc1xuICAgICAgPyBJbnRlcm5hbHMuZC5TKFxuICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMucHJlY2VkZW5jZSA/IG9wdGlvbnMucHJlY2VkZW5jZSA6IHZvaWQgMCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICBpbnRlZ3JpdHk6IGludGVncml0eSxcbiAgICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHlcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIDogXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgSW50ZXJuYWxzLmQuWChocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHksXG4gICAgICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlaW5pdE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgbnVsbCAhPT0gb3B0aW9ucykge1xuICAgICAgaWYgKG51bGwgPT0gb3B0aW9ucy5hcyB8fCBcInNjcmlwdFwiID09PSBvcHRpb25zLmFzKSB7XG4gICAgICAgIHZhciBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoXG4gICAgICAgICAgb3B0aW9ucy5hcyxcbiAgICAgICAgICBvcHRpb25zLmNyb3NzT3JpZ2luXG4gICAgICAgICk7XG4gICAgICAgIEludGVybmFscy5kLk0oaHJlZiwge1xuICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBudWxsID09IG9wdGlvbnMgJiYgSW50ZXJuYWxzLmQuTShocmVmKTtcbn07XG5leHBvcnRzLnByZWxvYWQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJlxuICAgIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hc1xuICApIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zLmFzLFxuICAgICAgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICBJbnRlcm5hbHMuZC5MKGhyZWYsIGFzLCB7XG4gICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICBpbnRlZ3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMCxcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnR5cGUgPyBvcHRpb25zLnR5cGUgOiB2b2lkIDAsXG4gICAgICBmZXRjaFByaW9yaXR5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgIHJlZmVycmVyUG9saWN5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgID8gb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgaW1hZ2VTcmNTZXQ6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU3JjU2V0ID8gb3B0aW9ucy5pbWFnZVNyY1NldCA6IHZvaWQgMCxcbiAgICAgIGltYWdlU2l6ZXM6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXMgPyBvcHRpb25zLmltYWdlU2l6ZXMgOiB2b2lkIDAsXG4gICAgICBtZWRpYTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubWVkaWEgPyBvcHRpb25zLm1lZGlhIDogdm9pZCAwXG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnRzLnByZWxvYWRNb2R1bGUgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYpXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMob3B0aW9ucy5hcywgb3B0aW9ucy5jcm9zc09yaWdpbik7XG4gICAgICBJbnRlcm5hbHMuZC5tKGhyZWYsIHtcbiAgICAgICAgYXM6XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgJiYgXCJzY3JpcHRcIiAhPT0gb3B0aW9ucy5hc1xuICAgICAgICAgICAgPyBvcHRpb25zLmFzXG4gICAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBJbnRlcm5hbHMuZC5tKGhyZWYpO1xufTtcbmV4cG9ydHMucmVxdWVzdEZvcm1SZXNldCA9IGZ1bmN0aW9uIChmb3JtKSB7XG4gIEludGVybmFscy5kLnIoZm9ybSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uIChmbiwgYSkge1xuICByZXR1cm4gZm4oYSk7XG59O1xuZXhwb3J0cy51c2VGb3JtU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VGb3JtU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluayk7XG59O1xuZXhwb3J0cy51c2VGb3JtU3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VIb3N0VHJhbnNpdGlvblN0YXR1cygpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMS4xXCI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cblwidXNlIHN0cmljdFwiO1xudmFyIFNjaGVkdWxlciA9IHJlcXVpcmUoXCJzY2hlZHVsZXJcIiksXG4gIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICBSZWFjdERPTSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgdmFyIHVybCA9IFwiaHR0cHM6Ly9yZWFjdC5kZXYvZXJyb3JzL1wiICsgY29kZTtcbiAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdXJsICs9IFwiP2FyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgdXJsICs9IFwiJmFyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAoXG4gICAgXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIgK1xuICAgIGNvZGUgK1xuICAgIFwiOyB2aXNpdCBcIiArXG4gICAgdXJsICtcbiAgICBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRDb250YWluZXIobm9kZSkge1xuICByZXR1cm4gIShcbiAgICAhbm9kZSB8fFxuICAgICgxICE9PSBub2RlLm5vZGVUeXBlICYmIDkgIT09IG5vZGUubm9kZVR5cGUgJiYgMTEgIT09IG5vZGUubm9kZVR5cGUpXG4gICk7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSB7XG4gIHZhciBub2RlID0gZmliZXIsXG4gICAgbmVhcmVzdE1vdW50ZWQgPSBmaWJlcjtcbiAgaWYgKGZpYmVyLmFsdGVybmF0ZSkgZm9yICg7IG5vZGUucmV0dXJuOyApIG5vZGUgPSBub2RlLnJldHVybjtcbiAgZWxzZSB7XG4gICAgZmliZXIgPSBub2RlO1xuICAgIGRvXG4gICAgICAobm9kZSA9IGZpYmVyKSxcbiAgICAgICAgMCAhPT0gKG5vZGUuZmxhZ3MgJiA0MDk4KSAmJiAobmVhcmVzdE1vdW50ZWQgPSBub2RlLnJldHVybiksXG4gICAgICAgIChmaWJlciA9IG5vZGUucmV0dXJuKTtcbiAgICB3aGlsZSAoZmliZXIpO1xuICB9XG4gIHJldHVybiAzID09PSBub2RlLnRhZyA/IG5lYXJlc3RNb3VudGVkIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIoZmliZXIpIHtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgbnVsbCA9PT0gc3VzcGVuc2VTdGF0ZSAmJlxuICAgICAgKChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBmaWJlciAmJiAoc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGUpKTtcbiAgICBpZiAobnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSkgcmV0dXJuIHN1c3BlbnNlU3RhdGUuZGVoeWRyYXRlZDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGFzc2VydElzTW91bnRlZChmaWJlcikge1xuICBpZiAoZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikgIT09IGZpYmVyKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG59XG5mdW5jdGlvbiBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoIWFsdGVybmF0ZSkge1xuICAgIGFsdGVybmF0ZSA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpO1xuICAgIGlmIChudWxsID09PSBhbHRlcm5hdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgcmV0dXJuIGFsdGVybmF0ZSAhPT0gZmliZXIgPyBudWxsIDogZmliZXI7XG4gIH1cbiAgZm9yICh2YXIgYSA9IGZpYmVyLCBiID0gYWx0ZXJuYXRlOyA7ICkge1xuICAgIHZhciBwYXJlbnRBID0gYS5yZXR1cm47XG4gICAgaWYgKG51bGwgPT09IHBhcmVudEEpIGJyZWFrO1xuICAgIHZhciBwYXJlbnRCID0gcGFyZW50QS5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgPT09IHBhcmVudEIpIHtcbiAgICAgIGIgPSBwYXJlbnRBLnJldHVybjtcbiAgICAgIGlmIChudWxsICE9PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xuICAgICAgZm9yIChwYXJlbnRCID0gcGFyZW50QS5jaGlsZDsgcGFyZW50QjsgKSB7XG4gICAgICAgIGlmIChwYXJlbnRCID09PSBhKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBmaWJlcjtcbiAgICAgICAgaWYgKHBhcmVudEIgPT09IGIpIHJldHVybiBhc3NlcnRJc01vdW50ZWQocGFyZW50QSksIGFsdGVybmF0ZTtcbiAgICAgICAgcGFyZW50QiA9IHBhcmVudEIuc2libGluZztcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgfVxuICAgIGlmIChhLnJldHVybiAhPT0gYi5yZXR1cm4pIChhID0gcGFyZW50QSksIChiID0gcGFyZW50Qik7XG4gICAgZWxzZSB7XG4gICAgICBmb3IgKHZhciBkaWRGaW5kQ2hpbGQgPSAhMSwgY2hpbGQkMCA9IHBhcmVudEEuY2hpbGQ7IGNoaWxkJDA7ICkge1xuICAgICAgICBpZiAoY2hpbGQkMCA9PT0gYSkge1xuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCQwID09PSBiKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQkMCA9IGNoaWxkJDAuc2libGluZztcbiAgICAgIH1cbiAgICAgIGlmICghZGlkRmluZENoaWxkKSB7XG4gICAgICAgIGZvciAoY2hpbGQkMCA9IHBhcmVudEIuY2hpbGQ7IGNoaWxkJDA7ICkge1xuICAgICAgICAgIGlmIChjaGlsZCQwID09PSBhKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoaWxkJDAgPT09IGIpIHtcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZCQwID0gY2hpbGQkMC5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlkRmluZENoaWxkKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYS5hbHRlcm5hdGUgIT09IGIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTkwKSk7XG4gIH1cbiAgaWYgKDMgIT09IGEudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICByZXR1cm4gYS5zdGF0ZU5vZGUuY3VycmVudCA9PT0gYSA/IGZpYmVyIDogYWx0ZXJuYXRlO1xufVxuZnVuY3Rpb24gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKG5vZGUpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBub2RlO1xuICBmb3IgKG5vZGUgPSBub2RlLmNoaWxkOyBudWxsICE9PSBub2RlOyApIHtcbiAgICB0YWcgPSBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSk7XG4gICAgaWYgKG51bGwgIT09IHRhZykgcmV0dXJuIHRhZztcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sXG4gIFJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxcbiAgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksXG4gIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksXG4gIFJFQUNUX0NPTlNVTUVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29uc3VtZXJcIiksXG4gIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLFxuICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLFxuICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLFxuICBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxcbiAgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksXG4gIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1xudmFyIFJFQUNUX0FDVElWSVRZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuYWN0aXZpdHlcIik7XG5TeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTtcbnZhciBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIik7XG5TeW1ib2wuZm9yKFwicmVhY3Qudmlld190cmFuc2l0aW9uXCIpO1xudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobnVsbCA9PT0gbWF5YmVJdGVyYWJsZSB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gIG1heWJlSXRlcmFibGUgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xufVxudmFyIFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKFwicmVhY3QuY2xpZW50LnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKSB7XG4gIGlmIChudWxsID09IHR5cGUpIHJldHVybiBudWxsO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSlcbiAgICByZXR1cm4gdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRVxuICAgICAgPyBudWxsXG4gICAgICA6IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdHlwZSkgcmV0dXJuIHR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgIHJldHVybiBcIkZyYWdtZW50XCI7XG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuIFwiUHJvZmlsZXJcIjtcbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdHJpY3RNb2RlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlTGlzdFwiO1xuICAgIGNhc2UgUkVBQ1RfQUNUSVZJVFlfVFlQRTpcbiAgICAgIHJldHVybiBcIkFjdGl2aXR5XCI7XG4gIH1cbiAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuIFwiUG9ydGFsXCI7XG4gICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgcmV0dXJuICh0eXBlLmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLlByb3ZpZGVyXCI7XG4gICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgIHJldHVybiAodHlwZS5fY29udGV4dC5kaXNwbGF5TmFtZSB8fCBcIkNvbnRleHRcIikgKyBcIi5Db25zdW1lclwiO1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICB2YXIgaW5uZXJUeXBlID0gdHlwZS5yZW5kZXI7XG4gICAgICAgIHR5cGUgPSB0eXBlLmRpc3BsYXlOYW1lO1xuICAgICAgICB0eXBlIHx8XG4gICAgICAgICAgKCh0eXBlID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8IFwiXCIpLFxuICAgICAgICAgICh0eXBlID0gXCJcIiAhPT0gdHlwZSA/IFwiRm9yd2FyZFJlZihcIiArIHR5cGUgKyBcIilcIiA6IFwiRm9yd2FyZFJlZlwiKSk7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGlubmVyVHlwZSA9IHR5cGUuZGlzcGxheU5hbWUgfHwgbnVsbCksXG4gICAgICAgICAgbnVsbCAhPT0gaW5uZXJUeXBlXG4gICAgICAgICAgICA/IGlubmVyVHlwZVxuICAgICAgICAgICAgOiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZS50eXBlKSB8fCBcIk1lbW9cIlxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIGlubmVyVHlwZSA9IHR5cGUuX3BheWxvYWQ7XG4gICAgICAgIHR5cGUgPSB0eXBlLl9pbml0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZShpbm5lclR5cGUpKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheSxcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0Ll9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0RE9NLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgc2hhcmVkTm90UGVuZGluZ09iamVjdCA9IHtcbiAgICBwZW5kaW5nOiAhMSxcbiAgICBkYXRhOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBhY3Rpb246IG51bGxcbiAgfSxcbiAgdmFsdWVTdGFjayA9IFtdLFxuICBpbmRleCA9IC0xO1xuZnVuY3Rpb24gY3JlYXRlQ3Vyc29yKGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4geyBjdXJyZW50OiBkZWZhdWx0VmFsdWUgfTtcbn1cbmZ1bmN0aW9uIHBvcChjdXJzb3IpIHtcbiAgMCA+IGluZGV4IHx8XG4gICAgKChjdXJzb3IuY3VycmVudCA9IHZhbHVlU3RhY2tbaW5kZXhdKSwgKHZhbHVlU3RhY2tbaW5kZXhdID0gbnVsbCksIGluZGV4LS0pO1xufVxuZnVuY3Rpb24gcHVzaChjdXJzb3IsIHZhbHVlKSB7XG4gIGluZGV4Kys7XG4gIHZhbHVlU3RhY2tbaW5kZXhdID0gY3Vyc29yLmN1cnJlbnQ7XG4gIGN1cnNvci5jdXJyZW50ID0gdmFsdWU7XG59XG52YXIgY29udGV4dFN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBjb250ZXh0RmliZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCk7XG5mdW5jdGlvbiBwdXNoSG9zdENvbnRhaW5lcihmaWJlciwgbmV4dFJvb3RJbnN0YW5jZSkge1xuICBwdXNoKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLCBuZXh0Um9vdEluc3RhbmNlKTtcbiAgcHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbnVsbCk7XG4gIHN3aXRjaCAobmV4dFJvb3RJbnN0YW5jZS5ub2RlVHlwZSkge1xuICAgIGNhc2UgOTpcbiAgICBjYXNlIDExOlxuICAgICAgZmliZXIgPSAoZmliZXIgPSBuZXh0Um9vdEluc3RhbmNlLmRvY3VtZW50RWxlbWVudClcbiAgICAgICAgPyAoZmliZXIgPSBmaWJlci5uYW1lc3BhY2VVUkkpXG4gICAgICAgICAgPyBnZXRPd25Ib3N0Q29udGV4dChmaWJlcilcbiAgICAgICAgICA6IDBcbiAgICAgICAgOiAwO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgKChmaWJlciA9IG5leHRSb290SW5zdGFuY2UudGFnTmFtZSksXG4gICAgICAgIChuZXh0Um9vdEluc3RhbmNlID0gbmV4dFJvb3RJbnN0YW5jZS5uYW1lc3BhY2VVUkkpKVxuICAgICAgKVxuICAgICAgICAobmV4dFJvb3RJbnN0YW5jZSA9IGdldE93bkhvc3RDb250ZXh0KG5leHRSb290SW5zdGFuY2UpKSxcbiAgICAgICAgICAoZmliZXIgPSBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChuZXh0Um9vdEluc3RhbmNlLCBmaWJlcikpO1xuICAgICAgZWxzZVxuICAgICAgICBzd2l0Y2ggKGZpYmVyKSB7XG4gICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgZmliZXIgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgICAgIGZpYmVyID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBmaWJlciA9IDA7XG4gICAgICAgIH1cbiAgfVxuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHBvcEhvc3RDb250YWluZXIoKSB7XG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IpO1xuICBwb3AoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IpO1xuICBwb3Aocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IpO1xufVxuZnVuY3Rpb24gcHVzaEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gIG51bGwgIT09IGZpYmVyLm1lbW9pemVkU3RhdGUgJiYgcHVzaChob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLCBmaWJlcik7XG4gIHZhciBjb250ZXh0ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChjb250ZXh0LCBmaWJlci50eXBlKTtcbiAgY29udGV4dCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgKHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyKSxcbiAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSk7XG59XG5mdW5jdGlvbiBwb3BIb3N0Q29udGV4dChmaWJlcikge1xuICBjb250ZXh0RmliZXJTdGFja0N1cnNvci5jdXJyZW50ID09PSBmaWJlciAmJlxuICAgIChwb3AoY29udGV4dFN0YWNrQ3Vyc29yKSwgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yKSk7XG4gIGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiZcbiAgICAocG9wKGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IpLFxuICAgIChIb3N0VHJhbnNpdGlvbkNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QpKTtcbn1cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gIHNjaGVkdWxlQ2FsbGJhY2skMyA9IFNjaGVkdWxlci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFxuICBjYW5jZWxDYWxsYmFjayQxID0gU2NoZWR1bGVyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFxuICBzaG91bGRZaWVsZCA9IFNjaGVkdWxlci51bnN0YWJsZV9zaG91bGRZaWVsZCxcbiAgcmVxdWVzdFBhaW50ID0gU2NoZWR1bGVyLnVuc3RhYmxlX3JlcXVlc3RQYWludCxcbiAgbm93ID0gU2NoZWR1bGVyLnVuc3RhYmxlX25vdyxcbiAgZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwgPSBTY2hlZHVsZXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsXG4gIEltbWVkaWF0ZVByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFxuICBVc2VyQmxvY2tpbmdQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxcbiAgTm9ybWFsUHJpb3JpdHkkMSA9IFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgTG93UHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfTG93UHJpb3JpdHksXG4gIElkbGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JZGxlUHJpb3JpdHksXG4gIGxvZyQxID0gU2NoZWR1bGVyLmxvZyxcbiAgdW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUgPSBTY2hlZHVsZXIudW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUsXG4gIHJlbmRlcmVySUQgPSBudWxsLFxuICBpbmplY3RlZEhvb2sgPSBudWxsO1xuZnVuY3Rpb24gc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMobmV3SXNTdHJpY3RNb2RlKSB7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxvZyQxICYmIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlKG5ld0lzU3RyaWN0TW9kZSk7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUpXG4gICAgdHJ5IHtcbiAgICAgIGluamVjdGVkSG9vay5zZXRTdHJpY3RNb2RlKHJlbmRlcmVySUQsIG5ld0lzU3RyaWN0TW9kZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxudmFyIGNsejMyID0gTWF0aC5jbHozMiA/IE1hdGguY2x6MzIgOiBjbHozMkZhbGxiYWNrLFxuICBsb2cgPSBNYXRoLmxvZyxcbiAgTE4yID0gTWF0aC5MTjI7XG5mdW5jdGlvbiBjbHozMkZhbGxiYWNrKHgpIHtcbiAgeCA+Pj49IDA7XG4gIHJldHVybiAwID09PSB4ID8gMzIgOiAoMzEgLSAoKGxvZyh4KSAvIExOMikgfCAwKSkgfCAwO1xufVxudmFyIG5leHRUcmFuc2l0aW9uTGFuZSA9IDI1NixcbiAgbmV4dFJldHJ5TGFuZSA9IDQxOTQzMDQ7XG5mdW5jdGlvbiBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhsYW5lcykge1xuICB2YXIgcGVuZGluZ1N5bmNMYW5lcyA9IGxhbmVzICYgNDI7XG4gIGlmICgwICE9PSBwZW5kaW5nU3luY0xhbmVzKSByZXR1cm4gcGVuZGluZ1N5bmNMYW5lcztcbiAgc3dpdGNoIChsYW5lcyAmIC1sYW5lcykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiA0O1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gMTY7XG4gICAgY2FzZSAzMjpcbiAgICAgIHJldHVybiAzMjtcbiAgICBjYXNlIDY0OlxuICAgICAgcmV0dXJuIDY0O1xuICAgIGNhc2UgMTI4OlxuICAgICAgcmV0dXJuIDEyODtcbiAgICBjYXNlIDI1NjpcbiAgICBjYXNlIDUxMjpcbiAgICBjYXNlIDEwMjQ6XG4gICAgY2FzZSAyMDQ4OlxuICAgIGNhc2UgNDA5NjpcbiAgICBjYXNlIDgxOTI6XG4gICAgY2FzZSAxNjM4NDpcbiAgICBjYXNlIDMyNzY4OlxuICAgIGNhc2UgNjU1MzY6XG4gICAgY2FzZSAxMzEwNzI6XG4gICAgY2FzZSAyNjIxNDQ6XG4gICAgY2FzZSA1MjQyODg6XG4gICAgY2FzZSAxMDQ4NTc2OlxuICAgIGNhc2UgMjA5NzE1MjpcbiAgICAgIHJldHVybiBsYW5lcyAmIDQxOTQwNDg7XG4gICAgY2FzZSA0MTk0MzA0OlxuICAgIGNhc2UgODM4ODYwODpcbiAgICBjYXNlIDE2Nzc3MjE2OlxuICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICByZXR1cm4gbGFuZXMgJiA2MjkxNDU2MDtcbiAgICBjYXNlIDY3MTA4ODY0OlxuICAgICAgcmV0dXJuIDY3MTA4ODY0O1xuICAgIGNhc2UgMTM0MjE3NzI4OlxuICAgICAgcmV0dXJuIDEzNDIxNzcyODtcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICAgIHJldHVybiAyNjg0MzU0NTY7XG4gICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgICByZXR1cm4gNTM2ODcwOTEyO1xuICAgIGNhc2UgMTA3Mzc0MTgyNDpcbiAgICAgIHJldHVybiAwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbGFuZXM7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE5leHRMYW5lcyhyb290LCB3aXBMYW5lcywgcm9vdEhhc1BlbmRpbmdDb21taXQpIHtcbiAgdmFyIHBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSByZXR1cm4gMDtcbiAgdmFyIG5leHRMYW5lcyA9IDAsXG4gICAgc3VzcGVuZGVkTGFuZXMgPSByb290LnN1c3BlbmRlZExhbmVzLFxuICAgIHBpbmdlZExhbmVzID0gcm9vdC5waW5nZWRMYW5lcztcbiAgcm9vdCA9IHJvb3Qud2FybUxhbmVzO1xuICB2YXIgbm9uSWRsZVBlbmRpbmdMYW5lcyA9IHBlbmRpbmdMYW5lcyAmIDEzNDIxNzcyNztcbiAgMCAhPT0gbm9uSWRsZVBlbmRpbmdMYW5lc1xuICAgID8gKChwZW5kaW5nTGFuZXMgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgfnN1c3BlbmRlZExhbmVzKSxcbiAgICAgIDAgIT09IHBlbmRpbmdMYW5lc1xuICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwZW5kaW5nTGFuZXMpKVxuICAgICAgICA6ICgocGluZ2VkTGFuZXMgJj0gbm9uSWRsZVBlbmRpbmdMYW5lcyksXG4gICAgICAgICAgMCAhPT0gcGluZ2VkTGFuZXNcbiAgICAgICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHBpbmdlZExhbmVzKSlcbiAgICAgICAgICAgIDogcm9vdEhhc1BlbmRpbmdDb21taXQgfHxcbiAgICAgICAgICAgICAgKChyb290SGFzUGVuZGluZ0NvbW1pdCA9IG5vbklkbGVQZW5kaW5nTGFuZXMgJiB+cm9vdCksXG4gICAgICAgICAgICAgIDAgIT09IHJvb3RIYXNQZW5kaW5nQ29tbWl0ICYmXG4gICAgICAgICAgICAgICAgKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHJvb3RIYXNQZW5kaW5nQ29tbWl0KSkpKSlcbiAgICA6ICgobm9uSWRsZVBlbmRpbmdMYW5lcyA9IHBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBub25JZGxlUGVuZGluZ0xhbmVzXG4gICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKG5vbklkbGVQZW5kaW5nTGFuZXMpKVxuICAgICAgICA6IDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGluZ2VkTGFuZXMpKVxuICAgICAgICAgIDogcm9vdEhhc1BlbmRpbmdDb21taXQgfHxcbiAgICAgICAgICAgICgocm9vdEhhc1BlbmRpbmdDb21taXQgPSBwZW5kaW5nTGFuZXMgJiB+cm9vdCksXG4gICAgICAgICAgICAwICE9PSByb290SGFzUGVuZGluZ0NvbW1pdCAmJlxuICAgICAgICAgICAgICAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocm9vdEhhc1BlbmRpbmdDb21taXQpKSkpO1xuICByZXR1cm4gMCA9PT0gbmV4dExhbmVzXG4gICAgPyAwXG4gICAgOiAwICE9PSB3aXBMYW5lcyAmJlxuICAgICAgICB3aXBMYW5lcyAhPT0gbmV4dExhbmVzICYmXG4gICAgICAgIDAgPT09ICh3aXBMYW5lcyAmIHN1c3BlbmRlZExhbmVzKSAmJlxuICAgICAgICAoKHN1c3BlbmRlZExhbmVzID0gbmV4dExhbmVzICYgLW5leHRMYW5lcyksXG4gICAgICAgIChyb290SGFzUGVuZGluZ0NvbW1pdCA9IHdpcExhbmVzICYgLXdpcExhbmVzKSxcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPj0gcm9vdEhhc1BlbmRpbmdDb21taXQgfHxcbiAgICAgICAgICAoMzIgPT09IHN1c3BlbmRlZExhbmVzICYmIDAgIT09IChyb290SGFzUGVuZGluZ0NvbW1pdCAmIDQxOTQwNDgpKSlcbiAgICAgID8gd2lwTGFuZXNcbiAgICAgIDogbmV4dExhbmVzO1xufVxuZnVuY3Rpb24gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCByZW5kZXJMYW5lcykge1xuICByZXR1cm4gKFxuICAgIDAgPT09XG4gICAgKHJvb3QucGVuZGluZ0xhbmVzICZcbiAgICAgIH4ocm9vdC5zdXNwZW5kZWRMYW5lcyAmIH5yb290LnBpbmdlZExhbmVzKSAmXG4gICAgICByZW5kZXJMYW5lcylcbiAgKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVFeHBpcmF0aW9uVGltZShsYW5lLCBjdXJyZW50VGltZSkge1xuICBzd2l0Y2ggKGxhbmUpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDg6XG4gICAgY2FzZSA2NDpcbiAgICAgIHJldHVybiBjdXJyZW50VGltZSArIDI1MDtcbiAgICBjYXNlIDE2OlxuICAgIGNhc2UgMzI6XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyA1ZTM7XG4gICAgY2FzZSA0MTk0MzA0OlxuICAgIGNhc2UgODM4ODYwODpcbiAgICBjYXNlIDE2Nzc3MjE2OlxuICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICByZXR1cm4gLTE7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gLTE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAtMTtcbiAgfVxufVxuZnVuY3Rpb24gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFRyYW5zaXRpb25MYW5lO1xuICBuZXh0VHJhbnNpdGlvbkxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0VHJhbnNpdGlvbkxhbmUgJiA0MTk0MDQ4KSAmJiAobmV4dFRyYW5zaXRpb25MYW5lID0gMjU2KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjbGFpbU5leHRSZXRyeUxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFJldHJ5TGFuZTtcbiAgbmV4dFJldHJ5TGFuZSA8PD0gMTtcbiAgMCA9PT0gKG5leHRSZXRyeUxhbmUgJiA2MjkxNDU2MCkgJiYgKG5leHRSZXRyeUxhbmUgPSA0MTk0MzA0KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVMYW5lTWFwKGluaXRpYWwpIHtcbiAgZm9yICh2YXIgbGFuZU1hcCA9IFtdLCBpID0gMDsgMzEgPiBpOyBpKyspIGxhbmVNYXAucHVzaChpbml0aWFsKTtcbiAgcmV0dXJuIGxhbmVNYXA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCB1cGRhdGVMYW5lKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHVwZGF0ZUxhbmU7XG4gIDI2ODQzNTQ1NiAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICgocm9vdC5zdXNwZW5kZWRMYW5lcyA9IDApLCAocm9vdC5waW5nZWRMYW5lcyA9IDApLCAocm9vdC53YXJtTGFuZXMgPSAwKSk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEZpbmlzaGVkKFxuICByb290LFxuICBmaW5pc2hlZExhbmVzLFxuICByZW1haW5pbmdMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lc1xuKSB7XG4gIHZhciBwcmV2aW91c2x5UGVuZGluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIHJvb3QucGVuZGluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwO1xuICByb290LnBpbmdlZExhbmVzID0gMDtcbiAgcm9vdC53YXJtTGFuZXMgPSAwO1xuICByb290LmV4cGlyZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyID0gMDtcbiAgdmFyIGVudGFuZ2xlbWVudHMgPSByb290LmVudGFuZ2xlbWVudHMsXG4gICAgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXMsXG4gICAgaGlkZGVuVXBkYXRlcyA9IHJvb3QuaGlkZGVuVXBkYXRlcztcbiAgZm9yIChcbiAgICByZW1haW5pbmdMYW5lcyA9IHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+cmVtYWluaW5nTGFuZXM7XG4gICAgMCA8IHJlbWFpbmluZ0xhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ1ID0gMzEgLSBjbHozMihyZW1haW5pbmdMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ1O1xuICAgIGVudGFuZ2xlbWVudHNbaW5kZXgkNV0gPSAwO1xuICAgIGV4cGlyYXRpb25UaW1lc1tpbmRleCQ1XSA9IC0xO1xuICAgIHZhciBoaWRkZW5VcGRhdGVzRm9yTGFuZSA9IGhpZGRlblVwZGF0ZXNbaW5kZXgkNV07XG4gICAgaWYgKG51bGwgIT09IGhpZGRlblVwZGF0ZXNGb3JMYW5lKVxuICAgICAgZm9yIChcbiAgICAgICAgaGlkZGVuVXBkYXRlc1tpbmRleCQ1XSA9IG51bGwsIGluZGV4JDUgPSAwO1xuICAgICAgICBpbmRleCQ1IDwgaGlkZGVuVXBkYXRlc0ZvckxhbmUubGVuZ3RoO1xuICAgICAgICBpbmRleCQ1KytcbiAgICAgICkge1xuICAgICAgICB2YXIgdXBkYXRlID0gaGlkZGVuVXBkYXRlc0ZvckxhbmVbaW5kZXgkNV07XG4gICAgICAgIG51bGwgIT09IHVwZGF0ZSAmJiAodXBkYXRlLmxhbmUgJj0gLTUzNjg3MDkxMyk7XG4gICAgICB9XG4gICAgcmVtYWluaW5nTGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiYgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIDApO1xuICAwICE9PSBzdXNwZW5kZWRSZXRyeUxhbmVzICYmXG4gICAgMCA9PT0gdXBkYXRlZExhbmVzICYmXG4gICAgMCAhPT0gcm9vdC50YWcgJiZcbiAgICAocm9vdC5zdXNwZW5kZWRMYW5lcyB8PVxuICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyAmIH4ocHJldmlvdXNseVBlbmRpbmdMYW5lcyAmIH5maW5pc2hlZExhbmVzKSk7XG59XG5mdW5jdGlvbiBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgZW50YW5nbGVkTGFuZXMpIHtcbiAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gc3Bhd25lZExhbmU7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgJj0gfnNwYXduZWRMYW5lO1xuICB2YXIgc3Bhd25lZExhbmVJbmRleCA9IDMxIC0gY2x6MzIoc3Bhd25lZExhbmUpO1xuICByb290LmVudGFuZ2xlZExhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gPVxuICAgIHJvb3QuZW50YW5nbGVtZW50c1tzcGF3bmVkTGFuZUluZGV4XSB8XG4gICAgMTA3Mzc0MTgyNCB8XG4gICAgKGVudGFuZ2xlZExhbmVzICYgNDE5NDA5MCk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBlbnRhbmdsZWRMYW5lcykge1xuICB2YXIgcm9vdEVudGFuZ2xlZExhbmVzID0gKHJvb3QuZW50YW5nbGVkTGFuZXMgfD0gZW50YW5nbGVkTGFuZXMpO1xuICBmb3IgKHJvb3QgPSByb290LmVudGFuZ2xlbWVudHM7IHJvb3RFbnRhbmdsZWRMYW5lczsgKSB7XG4gICAgdmFyIGluZGV4JDYgPSAzMSAtIGNsejMyKHJvb3RFbnRhbmdsZWRMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ2O1xuICAgIChsYW5lICYgZW50YW5nbGVkTGFuZXMpIHwgKHJvb3RbaW5kZXgkNl0gJiBlbnRhbmdsZWRMYW5lcykgJiZcbiAgICAgIChyb290W2luZGV4JDZdIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgICByb290RW50YW5nbGVkTGFuZXMgJj0gfmxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUobGFuZSkge1xuICBzd2l0Y2ggKGxhbmUpIHtcbiAgICBjYXNlIDI6XG4gICAgICBsYW5lID0gMTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIGxhbmUgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzMjpcbiAgICAgIGxhbmUgPSAxNjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgbGFuZSA9IDEyODtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgbGFuZSA9IDEzNDIxNzcyODtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsYW5lID0gMDtcbiAgfVxuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGxhbmVzVG9FdmVudFByaW9yaXR5KGxhbmVzKSB7XG4gIGxhbmVzICY9IC1sYW5lcztcbiAgcmV0dXJuIDIgPCBsYW5lc1xuICAgID8gOCA8IGxhbmVzXG4gICAgICA/IDAgIT09IChsYW5lcyAmIDEzNDIxNzcyNylcbiAgICAgICAgPyAzMlxuICAgICAgICA6IDI2ODQzNTQ1NlxuICAgICAgOiA4XG4gICAgOiAyO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCkge1xuICB2YXIgdXBkYXRlUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICBpZiAoMCAhPT0gdXBkYXRlUHJpb3JpdHkpIHJldHVybiB1cGRhdGVQcmlvcml0eTtcbiAgdXBkYXRlUHJpb3JpdHkgPSB3aW5kb3cuZXZlbnQ7XG4gIHJldHVybiB2b2lkIDAgPT09IHVwZGF0ZVByaW9yaXR5ID8gMzIgOiBnZXRFdmVudFByaW9yaXR5KHVwZGF0ZVByaW9yaXR5LnR5cGUpO1xufVxuZnVuY3Rpb24gcnVuV2l0aFByaW9yaXR5KHByaW9yaXR5LCBmbikge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgcmV0dXJuIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJpb3JpdHkpLCBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5O1xuICB9XG59XG52YXIgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksXG4gIGludGVybmFsSW5zdGFuY2VLZXkgPSBcIl9fcmVhY3RGaWJlciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxQcm9wc0tleSA9IFwiX19yZWFjdFByb3BzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5ID0gXCJfX3JlYWN0Q29udGFpbmVyJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkgPSBcIl9fcmVhY3RFdmVudHMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5ID0gXCJfX3JlYWN0TGlzdGVuZXJzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleSA9IFwiX19yZWFjdEhhbmRsZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXkgPSBcIl9fcmVhY3RSZXNvdXJjZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsSG9pc3RhYmxlTWFya2VyID0gXCJfX3JlYWN0TWFya2VyJFwiICsgcmFuZG9tS2V5O1xuZnVuY3Rpb24gZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpIHtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsUHJvcHNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5XTtcbn1cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpIHtcbiAgdmFyIHRhcmdldEluc3QgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAodGFyZ2V0SW5zdCkgcmV0dXJuIHRhcmdldEluc3Q7XG4gIGZvciAodmFyIHBhcmVudE5vZGUgPSB0YXJnZXROb2RlLnBhcmVudE5vZGU7IHBhcmVudE5vZGU7ICkge1xuICAgIGlmIChcbiAgICAgICh0YXJnZXRJbnN0ID1cbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSB8fFxuICAgICAgICBwYXJlbnROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKVxuICAgICkge1xuICAgICAgcGFyZW50Tm9kZSA9IHRhcmdldEluc3QuYWx0ZXJuYXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSB0YXJnZXRJbnN0LmNoaWxkIHx8XG4gICAgICAgIChudWxsICE9PSBwYXJlbnROb2RlICYmIG51bGwgIT09IHBhcmVudE5vZGUuY2hpbGQpXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgbnVsbCAhPT0gdGFyZ2V0Tm9kZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoKHBhcmVudE5vZGUgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSkgcmV0dXJuIHBhcmVudE5vZGU7XG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICAgIH1cbiAgICB0YXJnZXROb2RlID0gcGFyZW50Tm9kZTtcbiAgICBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGlmIChcbiAgICAobm9kZSA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHwgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgIDUgPT09IHRhZyB8fFxuICAgICAgNiA9PT0gdGFnIHx8XG4gICAgICAxMyA9PT0gdGFnIHx8XG4gICAgICAyNiA9PT0gdGFnIHx8XG4gICAgICAyNyA9PT0gdGFnIHx8XG4gICAgICAzID09PSB0YWdcbiAgICApXG4gICAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICB2YXIgdGFnID0gaW5zdC50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIGluc3Quc3RhdGVOb2RlO1xuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMzKSk7XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZXNGcm9tUm9vdChyb290KSB7XG4gIHZhciByZXNvdXJjZXMgPSByb290W2ludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXldO1xuICByZXNvdXJjZXMgfHxcbiAgICAocmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XSA9XG4gICAgICB7IGhvaXN0YWJsZVN0eWxlczogbmV3IE1hcCgpLCBob2lzdGFibGVTY3JpcHRzOiBuZXcgTWFwKCkgfSk7XG4gIHJldHVybiByZXNvdXJjZXM7XG59XG5mdW5jdGlvbiBtYXJrTm9kZUFzSG9pc3RhYmxlKG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gPSAhMDtcbn1cbnZhciBhbGxOYXRpdmVFdmVudHMgPSBuZXcgU2V0KCksXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSB7fTtcbmZ1bmN0aW9uIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpIHtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpO1xuICByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUgKyBcIkNhcHR1cmVcIiwgZGVwZW5kZW5jaWVzKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBkZXBlbmRlbmNpZXM7XG4gIGZvciAoXG4gICAgcmVnaXN0cmF0aW9uTmFtZSA9IDA7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSsrXG4gIClcbiAgICBhbGxOYXRpdmVFdmVudHMuYWRkKGRlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSk7XG59XG52YXIgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSBSZWdFeHAoXG4gICAgXCJeWzpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRdWzpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MF0qJFwiXG4gICksXG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fSxcbiAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSlcbiAgICByZXR1cm4gITA7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKSByZXR1cm4gITE7XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKVxuICAgIHJldHVybiAodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gITApO1xuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gITA7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKVxuICAgIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgIHZhciBwcmVmaXgkOCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICBpZiAoXCJkYXRhLVwiICE9PSBwcmVmaXgkOCAmJiBcImFyaWEtXCIgIT09IHByZWZpeCQ4KSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBcIlwiICsgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKG5vZGUsIG5hbWVzcGFjZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gIH1cbn1cbnZhciBwcmVmaXgsIHN1ZmZpeDtcbmZ1bmN0aW9uIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKG5hbWUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gcHJlZml4KVxuICAgIHRyeSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIHZhciBtYXRjaCA9IHguc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7XG4gICAgICBwcmVmaXggPSAobWF0Y2ggJiYgbWF0Y2hbMV0pIHx8IFwiXCI7XG4gICAgICBzdWZmaXggPVxuICAgICAgICAtMSA8IHguc3RhY2suaW5kZXhPZihcIlxcbiAgICBhdFwiKVxuICAgICAgICAgID8gXCIgKDxhbm9ueW1vdXM+KVwiXG4gICAgICAgICAgOiAtMSA8IHguc3RhY2suaW5kZXhPZihcIkBcIilcbiAgICAgICAgICAgID8gXCJAdW5rbm93bjowOjBcIlxuICAgICAgICAgICAgOiBcIlwiO1xuICAgIH1cbiAgcmV0dXJuIFwiXFxuXCIgKyBwcmVmaXggKyBuYW1lICsgc3VmZml4O1xufVxudmFyIHJlZW50cnkgPSAhMTtcbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICBpZiAoIWZuIHx8IHJlZW50cnkpIHJldHVybiBcIlwiO1xuICByZWVudHJ5ID0gITA7XG4gIHZhciBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7XG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gdm9pZCAwO1xuICB0cnkge1xuICAgIHZhciBSdW5JblJvb3RGcmFtZSA9IHtcbiAgICAgIERldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChjb25zdHJ1Y3QpIHtcbiAgICAgICAgICAgIHZhciBGYWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWtlLnByb3RvdHlwZSwgXCJwcm9wc1wiLCB7XG4gICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBSZWZsZWN0ICYmIFJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoRmFrZSwgW10pO1xuICAgICAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2wgPSB4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEZha2UuY2FsbCgpO1xuICAgICAgICAgICAgICB9IGNhdGNoICh4JDkpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sID0geCQ5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZuLmNhbGwoRmFrZS5wcm90b3R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCQxMCkge1xuICAgICAgICAgICAgICBjb250cm9sID0geCQxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChGYWtlID0gZm4oKSkgJiZcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgRmFrZS5jYXRjaCAmJlxuICAgICAgICAgICAgICBGYWtlLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKHNhbXBsZSkge1xuICAgICAgICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygc2FtcGxlLnN0YWNrKVxuICAgICAgICAgICAgcmV0dXJuIFtzYW1wbGUuc3RhY2ssIGNvbnRyb2wuc3RhY2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgICB9XG4gICAgfTtcbiAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QuZGlzcGxheU5hbWUgPVxuICAgICAgXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIjtcbiAgICB2YXIgbmFtZVByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCxcbiAgICAgIFwibmFtZVwiXG4gICAgKTtcbiAgICBuYW1lUHJvcERlc2NyaXB0b3IgJiZcbiAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci5jb25maWd1cmFibGUgJiZcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LFxuICAgICAgICBcIm5hbWVcIixcbiAgICAgICAgeyB2YWx1ZTogXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIiB9XG4gICAgICApO1xuICAgIHZhciBfUnVuSW5Sb290RnJhbWUkRGV0ZXIgPSBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QoKSxcbiAgICAgIHNhbXBsZVN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzBdLFxuICAgICAgY29udHJvbFN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzFdO1xuICAgIGlmIChzYW1wbGVTdGFjayAmJiBjb250cm9sU3RhY2spIHtcbiAgICAgIHZhciBzYW1wbGVMaW5lcyA9IHNhbXBsZVN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuICAgICAgICBjb250cm9sTGluZXMgPSBjb250cm9sU3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgICBmb3IgKFxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPSBSdW5JblJvb3RGcmFtZSA9IDA7XG4gICAgICAgIFJ1bkluUm9vdEZyYW1lIDwgc2FtcGxlTGluZXMubGVuZ3RoICYmXG4gICAgICAgICFzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0uaW5jbHVkZXMoXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIik7XG5cbiAgICAgIClcbiAgICAgICAgUnVuSW5Sb290RnJhbWUrKztcbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yIDwgY29udHJvbExpbmVzLmxlbmd0aCAmJlxuICAgICAgICAhY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0uaW5jbHVkZXMoXG4gICAgICAgICAgXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIlxuICAgICAgICApO1xuXG4gICAgICApXG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvcisrO1xuICAgICAgaWYgKFxuICAgICAgICBSdW5JblJvb3RGcmFtZSA9PT0gc2FtcGxlTGluZXMubGVuZ3RoIHx8XG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9PT0gY29udHJvbExpbmVzLmxlbmd0aFxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIFJ1bkluUm9vdEZyYW1lID0gc2FtcGxlTGluZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICAgIDEgPD0gUnVuSW5Sb290RnJhbWUgJiZcbiAgICAgICAgICAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT0gY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl07XG5cbiAgICAgICAgKVxuICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci0tO1xuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICAxIDw9IFJ1bkluUm9vdEZyYW1lICYmIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yO1xuICAgICAgICBSdW5JblJvb3RGcmFtZS0tLCBuYW1lUHJvcERlc2NyaXB0b3ItLVxuICAgICAgKVxuICAgICAgICBpZiAoc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PSBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXSkge1xuICAgICAgICAgIGlmICgxICE9PSBSdW5JblJvb3RGcmFtZSB8fCAxICE9PSBuYW1lUHJvcERlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoUnVuSW5Sb290RnJhbWUtLSxcbiAgICAgICAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3ItLSxcbiAgICAgICAgICAgICAgICAwID4gbmFtZVByb3BEZXNjcmlwdG9yIHx8XG4gICAgICAgICAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWUgPVxuICAgICAgICAgICAgICAgICAgXCJcXG5cIiArXG4gICAgICAgICAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0ucmVwbGFjZShcIiBhdCBuZXcgXCIsIFwiIGF0IFwiKTtcbiAgICAgICAgICAgICAgICBmbi5kaXNwbGF5TmFtZSAmJlxuICAgICAgICAgICAgICAgICAgZnJhbWUuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSAmJlxuICAgICAgICAgICAgICAgICAgKGZyYW1lID0gZnJhbWUucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsIGZuLmRpc3BsYXlOYW1lKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoMSA8PSBSdW5JblJvb3RGcmFtZSAmJiAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIChyZWVudHJ5ID0gITEpLCAoRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlKTtcbiAgfVxuICByZXR1cm4gKHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBmbiA/IGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUgOiBcIlwiKVxuICAgID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUocHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSlcbiAgICA6IFwiXCI7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShmaWJlci50eXBlKTtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiTGF6eVwiKTtcbiAgICBjYXNlIDEzOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiU3VzcGVuc2VcIik7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIlN1c3BlbnNlTGlzdFwiKTtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUsICExKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZS5yZW5kZXIsICExKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmaWJlci50eXBlLCAhMCk7XG4gICAgY2FzZSAzMTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIkFjdGl2aXR5XCIpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHdvcmtJblByb2dyZXNzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBcIlwiO1xuICAgIGRvXG4gICAgICAoaW5mbyArPSBkZXNjcmliZUZpYmVyKHdvcmtJblByb2dyZXNzKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLnJldHVybik7XG4gICAgd2hpbGUgKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfSBjYXRjaCAoeCkge1xuICAgIHJldHVybiBcIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiICsgeC5tZXNzYWdlICsgXCJcXG5cIiArIHguc3RhY2s7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5mdW5jdGlvbiBpc0NoZWNrYWJsZShlbGVtKSB7XG4gIHZhciB0eXBlID0gZWxlbS50eXBlO1xuICByZXR1cm4gKFxuICAgIChlbGVtID0gZWxlbS5ub2RlTmFtZSkgJiZcbiAgICBcImlucHV0XCIgPT09IGVsZW0udG9Mb3dlckNhc2UoKSAmJlxuICAgIChcImNoZWNrYm94XCIgPT09IHR5cGUgfHwgXCJyYWRpb1wiID09PSB0eXBlKVxuICApO1xufVxuZnVuY3Rpb24gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZUZpZWxkID0gaXNDaGVja2FibGUobm9kZSkgPyBcImNoZWNrZWRcIiA6IFwidmFsdWVcIixcbiAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIG5vZGUuY29uc3RydWN0b3IucHJvdG90eXBlLFxuICAgICAgdmFsdWVGaWVsZFxuICAgICksXG4gICAgY3VycmVudFZhbHVlID0gXCJcIiArIG5vZGVbdmFsdWVGaWVsZF07XG4gIGlmIChcbiAgICAhbm9kZS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZUZpZWxkKSAmJlxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkZXNjcmlwdG9yICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci5nZXQgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZXNjcmlwdG9yLnNldFxuICApIHtcbiAgICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXQsXG4gICAgICBzZXQgPSBkZXNjcmlwdG9yLnNldDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0LmNhbGwodGhpcyk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gXCJcIiArIHZhbHVlO1xuICAgICAgICBzZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gXCJcIiArIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHN0b3BUcmFja2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBub2RlLl92YWx1ZVRyYWNrZXIgPSBudWxsO1xuICAgICAgICBkZWxldGUgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiB0cmFjayhub2RlKSB7XG4gIG5vZGUuX3ZhbHVlVHJhY2tlciB8fCAobm9kZS5fdmFsdWVUcmFja2VyID0gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChub2RlKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuICExO1xuICB2YXIgdHJhY2tlciA9IG5vZGUuX3ZhbHVlVHJhY2tlcjtcbiAgaWYgKCF0cmFja2VyKSByZXR1cm4gITA7XG4gIHZhciBsYXN0VmFsdWUgPSB0cmFja2VyLmdldFZhbHVlKCk7XG4gIHZhciB2YWx1ZSA9IFwiXCI7XG4gIG5vZGUgJiZcbiAgICAodmFsdWUgPSBpc0NoZWNrYWJsZShub2RlKVxuICAgICAgPyBub2RlLmNoZWNrZWRcbiAgICAgICAgPyBcInRydWVcIlxuICAgICAgICA6IFwiZmFsc2VcIlxuICAgICAgOiBub2RlLnZhbHVlKTtcbiAgbm9kZSA9IHZhbHVlO1xuICByZXR1cm4gbm9kZSAhPT0gbGFzdFZhbHVlID8gKHRyYWNrZXIuc2V0VmFsdWUobm9kZSksICEwKSA6ICExO1xufVxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8IChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IHZvaWQgMCk7XG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZG9jKSByZXR1cm4gbnVsbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cbnZhciBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXggPSAvW1xcblwiXFxcXF0vZztcbmZ1bmN0aW9uIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoXG4gICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4LFxuICAgIGZ1bmN0aW9uIChjaCkge1xuICAgICAgcmV0dXJuIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikgKyBcIiBcIjtcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbnB1dChcbiAgZWxlbWVudCxcbiAgdmFsdWUsXG4gIGRlZmF1bHRWYWx1ZSxcbiAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgY2hlY2tlZCxcbiAgZGVmYXVsdENoZWNrZWQsXG4gIHR5cGUsXG4gIG5hbWVcbikge1xuICBlbGVtZW50Lm5hbWUgPSBcIlwiO1xuICBudWxsICE9IHR5cGUgJiZcbiAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIHR5cGVcbiAgICA/IChlbGVtZW50LnR5cGUgPSB0eXBlKVxuICAgIDogZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICBpZiAobnVsbCAhPSB2YWx1ZSlcbiAgICBpZiAoXCJudW1iZXJcIiA9PT0gdHlwZSkge1xuICAgICAgaWYgKCgwID09PSB2YWx1ZSAmJiBcIlwiID09PSBlbGVtZW50LnZhbHVlKSB8fCBlbGVtZW50LnZhbHVlICE9IHZhbHVlKVxuICAgICAgICBlbGVtZW50LnZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZVxuICAgICAgZWxlbWVudC52YWx1ZSAhPT0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpICYmXG4gICAgICAgIChlbGVtZW50LnZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKTtcbiAgZWxzZVxuICAgIChcInN1Ym1pdFwiICE9PSB0eXBlICYmIFwicmVzZXRcIiAhPT0gdHlwZSkgfHwgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgbnVsbCAhPSB2YWx1ZVxuICAgID8gc2V0RGVmYXVsdFZhbHVlKGVsZW1lbnQsIHR5cGUsIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKVxuICAgIDogbnVsbCAhPSBkZWZhdWx0VmFsdWVcbiAgICAgID8gc2V0RGVmYXVsdFZhbHVlKGVsZW1lbnQsIHR5cGUsIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSlcbiAgICAgIDogbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlICYmIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7XG4gIG51bGwgPT0gY2hlY2tlZCAmJlxuICAgIG51bGwgIT0gZGVmYXVsdENoZWNrZWQgJiZcbiAgICAoZWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9ICEhZGVmYXVsdENoZWNrZWQpO1xuICBudWxsICE9IGNoZWNrZWQgJiZcbiAgICAoZWxlbWVudC5jaGVja2VkID1cbiAgICAgIGNoZWNrZWQgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgY2hlY2tlZCk7XG4gIG51bGwgIT0gbmFtZSAmJlxuICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gIFwic3ltYm9sXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgbmFtZVxuICAgID8gKGVsZW1lbnQubmFtZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKG5hbWUpKVxuICAgIDogZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJuYW1lXCIpO1xufVxuZnVuY3Rpb24gaW5pdElucHV0KFxuICBlbGVtZW50LFxuICB2YWx1ZSxcbiAgZGVmYXVsdFZhbHVlLFxuICBjaGVja2VkLFxuICBkZWZhdWx0Q2hlY2tlZCxcbiAgdHlwZSxcbiAgbmFtZSxcbiAgaXNIeWRyYXRpbmdcbikge1xuICBudWxsICE9IHR5cGUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICAoZWxlbWVudC50eXBlID0gdHlwZSk7XG4gIGlmIChudWxsICE9IHZhbHVlIHx8IG51bGwgIT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgKFwic3VibWl0XCIgIT09IHR5cGUgJiYgXCJyZXNldFwiICE9PSB0eXBlKSB8fFxuICAgICAgICAodm9pZCAwICE9PSB2YWx1ZSAmJiBudWxsICE9PSB2YWx1ZSlcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdFZhbHVlID1cbiAgICAgIG51bGwgIT0gZGVmYXVsdFZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSA6IFwiXCI7XG4gICAgdmFsdWUgPSBudWxsICE9IHZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpIDogZGVmYXVsdFZhbHVlO1xuICAgIGlzSHlkcmF0aW5nIHx8IHZhbHVlID09PSBlbGVtZW50LnZhbHVlIHx8IChlbGVtZW50LnZhbHVlID0gdmFsdWUpO1xuICAgIGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY2hlY2tlZCA9IG51bGwgIT0gY2hlY2tlZCA/IGNoZWNrZWQgOiBkZWZhdWx0Q2hlY2tlZDtcbiAgY2hlY2tlZCA9XG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiAhIWNoZWNrZWQ7XG4gIGVsZW1lbnQuY2hlY2tlZCA9IGlzSHlkcmF0aW5nID8gZWxlbWVudC5jaGVja2VkIDogISFjaGVja2VkO1xuICBlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gISFjaGVja2VkO1xuICBudWxsICE9IG5hbWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICAoZWxlbWVudC5uYW1lID0gbmFtZSk7XG59XG5mdW5jdGlvbiBzZXREZWZhdWx0VmFsdWUobm9kZSwgdHlwZSwgdmFsdWUpIHtcbiAgKFwibnVtYmVyXCIgPT09IHR5cGUgJiYgZ2V0QWN0aXZlRWxlbWVudChub2RlLm93bmVyRG9jdW1lbnQpID09PSBub2RlKSB8fFxuICAgIG5vZGUuZGVmYXVsdFZhbHVlID09PSBcIlwiICsgdmFsdWUgfHxcbiAgICAobm9kZS5kZWZhdWx0VmFsdWUgPSBcIlwiICsgdmFsdWUpO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhub2RlLCBtdWx0aXBsZSwgcHJvcFZhbHVlLCBzZXREZWZhdWx0U2VsZWN0ZWQpIHtcbiAgbm9kZSA9IG5vZGUub3B0aW9ucztcbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgbXVsdGlwbGUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKylcbiAgICAgIG11bHRpcGxlW1wiJFwiICsgcHJvcFZhbHVlW2ldXSA9ICEwO1xuICAgIGZvciAocHJvcFZhbHVlID0gMDsgcHJvcFZhbHVlIDwgbm9kZS5sZW5ndGg7IHByb3BWYWx1ZSsrKVxuICAgICAgKGkgPSBtdWx0aXBsZS5oYXNPd25Qcm9wZXJ0eShcIiRcIiArIG5vZGVbcHJvcFZhbHVlXS52YWx1ZSkpLFxuICAgICAgICBub2RlW3Byb3BWYWx1ZV0uc2VsZWN0ZWQgIT09IGkgJiYgKG5vZGVbcHJvcFZhbHVlXS5zZWxlY3RlZCA9IGkpLFxuICAgICAgICBpICYmIHNldERlZmF1bHRTZWxlY3RlZCAmJiAobm9kZVtwcm9wVmFsdWVdLmRlZmF1bHRTZWxlY3RlZCA9ICEwKTtcbiAgfSBlbHNlIHtcbiAgICBwcm9wVmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShwcm9wVmFsdWUpO1xuICAgIG11bHRpcGxlID0gbnVsbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG5vZGVbaV0udmFsdWUgPT09IHByb3BWYWx1ZSkge1xuICAgICAgICBub2RlW2ldLnNlbGVjdGVkID0gITA7XG4gICAgICAgIHNldERlZmF1bHRTZWxlY3RlZCAmJiAobm9kZVtpXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IG11bHRpcGxlIHx8IG5vZGVbaV0uZGlzYWJsZWQgfHwgKG11bHRpcGxlID0gbm9kZVtpXSk7XG4gICAgfVxuICAgIG51bGwgIT09IG11bHRpcGxlICYmIChtdWx0aXBsZS5zZWxlY3RlZCA9ICEwKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlVGV4dGFyZWEoZWxlbWVudCwgdmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoXG4gICAgbnVsbCAhPSB2YWx1ZSAmJlxuICAgICgodmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpLFxuICAgIHZhbHVlICE9PSBlbGVtZW50LnZhbHVlICYmIChlbGVtZW50LnZhbHVlID0gdmFsdWUpLFxuICAgIG51bGwgPT0gZGVmYXVsdFZhbHVlKVxuICApIHtcbiAgICBlbGVtZW50LmRlZmF1bHRWYWx1ZSAhPT0gdmFsdWUgJiYgKGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9XG4gICAgbnVsbCAhPSBkZWZhdWx0VmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGluaXRUZXh0YXJlYShlbGVtZW50LCB2YWx1ZSwgZGVmYXVsdFZhbHVlLCBjaGlsZHJlbikge1xuICBpZiAobnVsbCA9PSB2YWx1ZSkge1xuICAgIGlmIChudWxsICE9IGNoaWxkcmVuKSB7XG4gICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTIpKTtcbiAgICAgIGlmIChpc0FycmF5SW1wbChjaGlsZHJlbikpIHtcbiAgICAgICAgaWYgKDEgPCBjaGlsZHJlbi5sZW5ndGgpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTMpKTtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHRWYWx1ZSA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBudWxsID09IGRlZmF1bHRWYWx1ZSAmJiAoZGVmYXVsdFZhbHVlID0gXCJcIik7XG4gICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIH1cbiAgZGVmYXVsdFZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gIGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICBjaGlsZHJlbiA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gIGNoaWxkcmVuID09PSBkZWZhdWx0VmFsdWUgJiZcbiAgICBcIlwiICE9PSBjaGlsZHJlbiAmJlxuICAgIG51bGwgIT09IGNoaWxkcmVuICYmXG4gICAgKGVsZW1lbnQudmFsdWUgPSBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudChub2RlLCB0ZXh0KSB7XG4gIGlmICh0ZXh0KSB7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgaWYgKFxuICAgICAgZmlyc3RDaGlsZCAmJlxuICAgICAgZmlyc3RDaGlsZCA9PT0gbm9kZS5sYXN0Q2hpbGQgJiZcbiAgICAgIDMgPT09IGZpcnN0Q2hpbGQubm9kZVR5cGVcbiAgICApIHtcbiAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG52YXIgdW5pdGxlc3NOdW1iZXJzID0gbmV3IFNldChcbiAgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudCBhc3BlY3RSYXRpbyBib3JkZXJJbWFnZU91dHNldCBib3JkZXJJbWFnZVNsaWNlIGJvcmRlckltYWdlV2lkdGggYm94RmxleCBib3hGbGV4R3JvdXAgYm94T3JkaW5hbEdyb3VwIGNvbHVtbkNvdW50IGNvbHVtbnMgZmxleCBmbGV4R3JvdyBmbGV4UG9zaXRpdmUgZmxleFNocmluayBmbGV4TmVnYXRpdmUgZmxleE9yZGVyIGdyaWRBcmVhIGdyaWRSb3cgZ3JpZFJvd0VuZCBncmlkUm93U3BhbiBncmlkUm93U3RhcnQgZ3JpZENvbHVtbiBncmlkQ29sdW1uRW5kIGdyaWRDb2x1bW5TcGFuIGdyaWRDb2x1bW5TdGFydCBmb250V2VpZ2h0IGxpbmVDbGFtcCBsaW5lSGVpZ2h0IG9wYWNpdHkgb3JkZXIgb3JwaGFucyBzY2FsZSB0YWJTaXplIHdpZG93cyB6SW5kZXggem9vbSBmaWxsT3BhY2l0eSBmbG9vZE9wYWNpdHkgc3RvcE9wYWNpdHkgc3Ryb2tlRGFzaGFycmF5IHN0cm9rZURhc2hvZmZzZXQgc3Ryb2tlTWl0ZXJsaW1pdCBzdHJva2VPcGFjaXR5IHN0cm9rZVdpZHRoIE1vekFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IE1vekJveEZsZXggTW96Qm94RmxleEdyb3VwIE1vekxpbmVDbGFtcCBtc0FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IG1zRmxleCBtc1pvb20gbXNGbGV4R3JvdyBtc0ZsZXhOZWdhdGl2ZSBtc0ZsZXhPcmRlciBtc0ZsZXhQb3NpdGl2ZSBtc0ZsZXhTaHJpbmsgbXNHcmlkQ29sdW1uIG1zR3JpZENvbHVtblNwYW4gbXNHcmlkUm93IG1zR3JpZFJvd1NwYW4gV2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgV2Via2l0Qm94RmxleCBXZWJLaXRCb3hGbGV4R3JvdXAgV2Via2l0Qm94T3JkaW5hbEdyb3VwIFdlYmtpdENvbHVtbkNvdW50IFdlYmtpdENvbHVtbnMgV2Via2l0RmxleCBXZWJraXRGbGV4R3JvdyBXZWJraXRGbGV4UG9zaXRpdmUgV2Via2l0RmxleFNocmluayBXZWJraXRMaW5lQ2xhbXBcIi5zcGxpdChcbiAgICBcIiBcIlxuICApXG4pO1xuZnVuY3Rpb24gc2V0VmFsdWVGb3JTdHlsZShzdHlsZSwgc3R5bGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IDAgPT09IHN0eWxlTmFtZS5pbmRleE9mKFwiLS1cIik7XG4gIG51bGwgPT0gdmFsdWUgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcIlwiID09PSB2YWx1ZVxuICAgID8gaXNDdXN0b21Qcm9wZXJ0eVxuICAgICAgPyBzdHlsZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIFwiXCIpXG4gICAgICA6IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgID8gKHN0eWxlLmNzc0Zsb2F0ID0gXCJcIilcbiAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IFwiXCIpXG4gICAgOiBpc0N1c3RvbVByb3BlcnR5XG4gICAgICA/IHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgdmFsdWUpXG4gICAgICA6IFwibnVtYmVyXCIgIT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICAgIDAgPT09IHZhbHVlIHx8XG4gICAgICAgICAgdW5pdGxlc3NOdW1iZXJzLmhhcyhzdHlsZU5hbWUpXG4gICAgICAgID8gXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgICA/IChzdHlsZS5jc3NGbG9hdCA9IHZhbHVlKVxuICAgICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSAoXCJcIiArIHZhbHVlKS50cmltKCkpXG4gICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSB2YWx1ZSArIFwicHhcIik7XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMsIHByZXZTdHlsZXMpIHtcbiAgaWYgKG51bGwgIT0gc3R5bGVzICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiBzdHlsZXMpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MikpO1xuICBub2RlID0gbm9kZS5zdHlsZTtcbiAgaWYgKG51bGwgIT0gcHJldlN0eWxlcykge1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBwcmV2U3R5bGVzKVxuICAgICAgIXByZXZTdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSB8fFxuICAgICAgICAobnVsbCAhPSBzdHlsZXMgJiYgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHx8XG4gICAgICAgICgwID09PSBzdHlsZU5hbWUuaW5kZXhPZihcIi0tXCIpXG4gICAgICAgICAgPyBub2RlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgXCJcIilcbiAgICAgICAgICA6IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgICAgICA/IChub2RlLmNzc0Zsb2F0ID0gXCJcIilcbiAgICAgICAgICAgIDogKG5vZGVbc3R5bGVOYW1lXSA9IFwiXCIpKTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUkMTYgaW4gc3R5bGVzKVxuICAgICAgKHN0eWxlTmFtZSA9IHN0eWxlc1tzdHlsZU5hbWUkMTZdKSxcbiAgICAgICAgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSQxNikgJiZcbiAgICAgICAgICBwcmV2U3R5bGVzW3N0eWxlTmFtZSQxNl0gIT09IHN0eWxlTmFtZSAmJlxuICAgICAgICAgIHNldFZhbHVlRm9yU3R5bGUobm9kZSwgc3R5bGVOYW1lJDE2LCBzdHlsZU5hbWUpO1xuICB9IGVsc2VcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUkMTcgaW4gc3R5bGVzKVxuICAgICAgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSQxNykgJiZcbiAgICAgICAgc2V0VmFsdWVGb3JTdHlsZShub2RlLCBzdHlsZU5hbWUkMTcsIHN0eWxlc1tzdHlsZU5hbWUkMTddKTtcbn1cbmZ1bmN0aW9uIGlzQ3VzdG9tRWxlbWVudCh0YWdOYW1lKSB7XG4gIGlmICgtMSA9PT0gdGFnTmFtZS5pbmRleE9mKFwiLVwiKSkgcmV0dXJuICExO1xuICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICBjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpcbiAgICBjYXNlIFwiY29sb3ItcHJvZmlsZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2VcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLXNyY1wiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtdXJpXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpcbiAgICBjYXNlIFwibWlzc2luZy1nbHlwaFwiOlxuICAgICAgcmV0dXJuICExO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITA7XG4gIH1cbn1cbnZhciBhbGlhc2VzID0gbmV3IE1hcChbXG4gICAgW1wiYWNjZXB0Q2hhcnNldFwiLCBcImFjY2VwdC1jaGFyc2V0XCJdLFxuICAgIFtcImh0bWxGb3JcIiwgXCJmb3JcIl0sXG4gICAgW1wiaHR0cEVxdWl2XCIsIFwiaHR0cC1lcXVpdlwiXSxcbiAgICBbXCJjcm9zc09yaWdpblwiLCBcImNyb3Nzb3JpZ2luXCJdLFxuICAgIFtcImFjY2VudEhlaWdodFwiLCBcImFjY2VudC1oZWlnaHRcIl0sXG4gICAgW1wiYWxpZ25tZW50QmFzZWxpbmVcIiwgXCJhbGlnbm1lbnQtYmFzZWxpbmVcIl0sXG4gICAgW1wiYXJhYmljRm9ybVwiLCBcImFyYWJpYy1mb3JtXCJdLFxuICAgIFtcImJhc2VsaW5lU2hpZnRcIiwgXCJiYXNlbGluZS1zaGlmdFwiXSxcbiAgICBbXCJjYXBIZWlnaHRcIiwgXCJjYXAtaGVpZ2h0XCJdLFxuICAgIFtcImNsaXBQYXRoXCIsIFwiY2xpcC1wYXRoXCJdLFxuICAgIFtcImNsaXBSdWxlXCIsIFwiY2xpcC1ydWxlXCJdLFxuICAgIFtcImNvbG9ySW50ZXJwb2xhdGlvblwiLCBcImNvbG9yLWludGVycG9sYXRpb25cIl0sXG4gICAgW1wiY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc1wiLCBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiXSxcbiAgICBbXCJjb2xvclByb2ZpbGVcIiwgXCJjb2xvci1wcm9maWxlXCJdLFxuICAgIFtcImNvbG9yUmVuZGVyaW5nXCIsIFwiY29sb3ItcmVuZGVyaW5nXCJdLFxuICAgIFtcImRvbWluYW50QmFzZWxpbmVcIiwgXCJkb21pbmFudC1iYXNlbGluZVwiXSxcbiAgICBbXCJlbmFibGVCYWNrZ3JvdW5kXCIsIFwiZW5hYmxlLWJhY2tncm91bmRcIl0sXG4gICAgW1wiZmlsbE9wYWNpdHlcIiwgXCJmaWxsLW9wYWNpdHlcIl0sXG4gICAgW1wiZmlsbFJ1bGVcIiwgXCJmaWxsLXJ1bGVcIl0sXG4gICAgW1wiZmxvb2RDb2xvclwiLCBcImZsb29kLWNvbG9yXCJdLFxuICAgIFtcImZsb29kT3BhY2l0eVwiLCBcImZsb29kLW9wYWNpdHlcIl0sXG4gICAgW1wiZm9udEZhbWlseVwiLCBcImZvbnQtZmFtaWx5XCJdLFxuICAgIFtcImZvbnRTaXplXCIsIFwiZm9udC1zaXplXCJdLFxuICAgIFtcImZvbnRTaXplQWRqdXN0XCIsIFwiZm9udC1zaXplLWFkanVzdFwiXSxcbiAgICBbXCJmb250U3RyZXRjaFwiLCBcImZvbnQtc3RyZXRjaFwiXSxcbiAgICBbXCJmb250U3R5bGVcIiwgXCJmb250LXN0eWxlXCJdLFxuICAgIFtcImZvbnRWYXJpYW50XCIsIFwiZm9udC12YXJpYW50XCJdLFxuICAgIFtcImZvbnRXZWlnaHRcIiwgXCJmb250LXdlaWdodFwiXSxcbiAgICBbXCJnbHlwaE5hbWVcIiwgXCJnbHlwaC1uYW1lXCJdLFxuICAgIFtcImdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsXCIsIFwiZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbFwiXSxcbiAgICBbXCJnbHlwaE9yaWVudGF0aW9uVmVydGljYWxcIiwgXCJnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbFwiXSxcbiAgICBbXCJob3JpekFkdlhcIiwgXCJob3Jpei1hZHYteFwiXSxcbiAgICBbXCJob3Jpek9yaWdpblhcIiwgXCJob3Jpei1vcmlnaW4teFwiXSxcbiAgICBbXCJpbWFnZVJlbmRlcmluZ1wiLCBcImltYWdlLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJsZXR0ZXJTcGFjaW5nXCIsIFwibGV0dGVyLXNwYWNpbmdcIl0sXG4gICAgW1wibGlnaHRpbmdDb2xvclwiLCBcImxpZ2h0aW5nLWNvbG9yXCJdLFxuICAgIFtcIm1hcmtlckVuZFwiLCBcIm1hcmtlci1lbmRcIl0sXG4gICAgW1wibWFya2VyTWlkXCIsIFwibWFya2VyLW1pZFwiXSxcbiAgICBbXCJtYXJrZXJTdGFydFwiLCBcIm1hcmtlci1zdGFydFwiXSxcbiAgICBbXCJvdmVybGluZVBvc2l0aW9uXCIsIFwib3ZlcmxpbmUtcG9zaXRpb25cIl0sXG4gICAgW1wib3ZlcmxpbmVUaGlja25lc3NcIiwgXCJvdmVybGluZS10aGlja25lc3NcIl0sXG4gICAgW1wicGFpbnRPcmRlclwiLCBcInBhaW50LW9yZGVyXCJdLFxuICAgIFtcInBhbm9zZS0xXCIsIFwicGFub3NlLTFcIl0sXG4gICAgW1wicG9pbnRlckV2ZW50c1wiLCBcInBvaW50ZXItZXZlbnRzXCJdLFxuICAgIFtcInJlbmRlcmluZ0ludGVudFwiLCBcInJlbmRlcmluZy1pbnRlbnRcIl0sXG4gICAgW1wic2hhcGVSZW5kZXJpbmdcIiwgXCJzaGFwZS1yZW5kZXJpbmdcIl0sXG4gICAgW1wic3RvcENvbG9yXCIsIFwic3RvcC1jb2xvclwiXSxcbiAgICBbXCJzdG9wT3BhY2l0eVwiLCBcInN0b3Atb3BhY2l0eVwiXSxcbiAgICBbXCJzdHJpa2V0aHJvdWdoUG9zaXRpb25cIiwgXCJzdHJpa2V0aHJvdWdoLXBvc2l0aW9uXCJdLFxuICAgIFtcInN0cmlrZXRocm91Z2hUaGlja25lc3NcIiwgXCJzdHJpa2V0aHJvdWdoLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJzdHJva2VEYXNoYXJyYXlcIiwgXCJzdHJva2UtZGFzaGFycmF5XCJdLFxuICAgIFtcInN0cm9rZURhc2hvZmZzZXRcIiwgXCJzdHJva2UtZGFzaG9mZnNldFwiXSxcbiAgICBbXCJzdHJva2VMaW5lY2FwXCIsIFwic3Ryb2tlLWxpbmVjYXBcIl0sXG4gICAgW1wic3Ryb2tlTGluZWpvaW5cIiwgXCJzdHJva2UtbGluZWpvaW5cIl0sXG4gICAgW1wic3Ryb2tlTWl0ZXJsaW1pdFwiLCBcInN0cm9rZS1taXRlcmxpbWl0XCJdLFxuICAgIFtcInN0cm9rZU9wYWNpdHlcIiwgXCJzdHJva2Utb3BhY2l0eVwiXSxcbiAgICBbXCJzdHJva2VXaWR0aFwiLCBcInN0cm9rZS13aWR0aFwiXSxcbiAgICBbXCJ0ZXh0QW5jaG9yXCIsIFwidGV4dC1hbmNob3JcIl0sXG4gICAgW1widGV4dERlY29yYXRpb25cIiwgXCJ0ZXh0LWRlY29yYXRpb25cIl0sXG4gICAgW1widGV4dFJlbmRlcmluZ1wiLCBcInRleHQtcmVuZGVyaW5nXCJdLFxuICAgIFtcInRyYW5zZm9ybU9yaWdpblwiLCBcInRyYW5zZm9ybS1vcmlnaW5cIl0sXG4gICAgW1widW5kZXJsaW5lUG9zaXRpb25cIiwgXCJ1bmRlcmxpbmUtcG9zaXRpb25cIl0sXG4gICAgW1widW5kZXJsaW5lVGhpY2tuZXNzXCIsIFwidW5kZXJsaW5lLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJ1bmljb2RlQmlkaVwiLCBcInVuaWNvZGUtYmlkaVwiXSxcbiAgICBbXCJ1bmljb2RlUmFuZ2VcIiwgXCJ1bmljb2RlLXJhbmdlXCJdLFxuICAgIFtcInVuaXRzUGVyRW1cIiwgXCJ1bml0cy1wZXItZW1cIl0sXG4gICAgW1widkFscGhhYmV0aWNcIiwgXCJ2LWFscGhhYmV0aWNcIl0sXG4gICAgW1widkhhbmdpbmdcIiwgXCJ2LWhhbmdpbmdcIl0sXG4gICAgW1widklkZW9ncmFwaGljXCIsIFwidi1pZGVvZ3JhcGhpY1wiXSxcbiAgICBbXCJ2TWF0aGVtYXRpY2FsXCIsIFwidi1tYXRoZW1hdGljYWxcIl0sXG4gICAgW1widmVjdG9yRWZmZWN0XCIsIFwidmVjdG9yLWVmZmVjdFwiXSxcbiAgICBbXCJ2ZXJ0QWR2WVwiLCBcInZlcnQtYWR2LXlcIl0sXG4gICAgW1widmVydE9yaWdpblhcIiwgXCJ2ZXJ0LW9yaWdpbi14XCJdLFxuICAgIFtcInZlcnRPcmlnaW5ZXCIsIFwidmVydC1vcmlnaW4teVwiXSxcbiAgICBbXCJ3b3JkU3BhY2luZ1wiLCBcIndvcmQtc3BhY2luZ1wiXSxcbiAgICBbXCJ3cml0aW5nTW9kZVwiLCBcIndyaXRpbmctbW9kZVwiXSxcbiAgICBbXCJ4bWxuc1hsaW5rXCIsIFwieG1sbnM6eGxpbmtcIl0sXG4gICAgW1wieEhlaWdodFwiLCBcIngtaGVpZ2h0XCJdXG4gIF0pLFxuICBpc0phdmFTY3JpcHRQcm90b2NvbCA9XG4gICAgL15bXFx1MDAwMC1cXHUwMDFGIF0qaltcXHJcXG5cXHRdKmFbXFxyXFxuXFx0XSp2W1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnNbXFxyXFxuXFx0XSpjW1xcclxcblxcdF0qcltcXHJcXG5cXHRdKmlbXFxyXFxuXFx0XSpwW1xcclxcblxcdF0qdFtcXHJcXG5cXHRdKjovaTtcbmZ1bmN0aW9uIHNhbml0aXplVVJMKHVybCkge1xuICByZXR1cm4gaXNKYXZhU2NyaXB0UHJvdG9jb2wudGVzdChcIlwiICsgdXJsKVxuICAgID8gXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignUmVhY3QgaGFzIGJsb2NrZWQgYSBqYXZhc2NyaXB0OiBVUkwgYXMgYSBzZWN1cml0eSBwcmVjYXV0aW9uLicpXCJcbiAgICA6IHVybDtcbn1cbnZhciBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIG5hdGl2ZUV2ZW50LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50ICYmXG4gICAgKG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO1xuICByZXR1cm4gMyA9PT0gbmF0aXZlRXZlbnQubm9kZVR5cGUgPyBuYXRpdmVFdmVudC5wYXJlbnROb2RlIDogbmF0aXZlRXZlbnQ7XG59XG52YXIgcmVzdG9yZVRhcmdldCA9IG51bGwsXG4gIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5mdW5jdGlvbiByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlICYmICh0YXJnZXQgPSBpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSkpIHtcbiAgICB2YXIgcHJvcHMgPSB0YXJnZXRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICBhOiBzd2l0Y2ggKCgodGFyZ2V0ID0gaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUpLCBpbnRlcm5hbEluc3RhbmNlLnR5cGUpKSB7XG4gICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICAgIHByb3BzLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IHByb3BzLm5hbWU7XG4gICAgICAgIGlmIChcInJhZGlvXCIgPT09IHByb3BzLnR5cGUgJiYgbnVsbCAhPSBpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgZm9yIChwcm9wcyA9IHRhcmdldDsgcHJvcHMucGFyZW50Tm9kZTsgKSBwcm9wcyA9IHByb3BzLnBhcmVudE5vZGU7XG4gICAgICAgICAgcHJvcHMgPSBwcm9wcy5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgJ2lucHV0W25hbWU9XCInICtcbiAgICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgICBcIlwiICsgaW50ZXJuYWxJbnN0YW5jZVxuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiXVt0eXBlPVwicmFkaW9cIl0nXG4gICAgICAgICAgKTtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlIDwgcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXJOb2RlID0gcHJvcHNbaW50ZXJuYWxJbnN0YW5jZV07XG4gICAgICAgICAgICBpZiAob3RoZXJOb2RlICE9PSB0YXJnZXQgJiYgb3RoZXJOb2RlLmZvcm0gPT09IHRhcmdldC5mb3JtKSB7XG4gICAgICAgICAgICAgIHZhciBvdGhlclByb3BzID0gb3RoZXJOb2RlW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICAgICAgICAgIGlmICghb3RoZXJQcm9wcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MCkpO1xuICAgICAgICAgICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLnR5cGUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5uYW1lXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gMDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPCBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlKytcbiAgICAgICAgICApXG4gICAgICAgICAgICAob3RoZXJOb2RlID0gcHJvcHNbaW50ZXJuYWxJbnN0YW5jZV0pLFxuICAgICAgICAgICAgICBvdGhlck5vZGUuZm9ybSA9PT0gdGFyZ2V0LmZvcm0gJiYgdXBkYXRlVmFsdWVJZkNoYW5nZWQob3RoZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHVwZGF0ZVRleHRhcmVhKHRhcmdldCwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIChpbnRlcm5hbEluc3RhbmNlID0gcHJvcHMudmFsdWUpLFxuICAgICAgICAgIG51bGwgIT0gaW50ZXJuYWxJbnN0YW5jZSAmJlxuICAgICAgICAgICAgdXBkYXRlT3B0aW9ucyh0YXJnZXQsICEhcHJvcHMubXVsdGlwbGUsIGludGVybmFsSW5zdGFuY2UsICExKTtcbiAgICB9XG4gIH1cbn1cbnZhciBpc0luc2lkZUV2ZW50SGFuZGxlciA9ICExO1xuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMkMShmbiwgYSwgYikge1xuICBpZiAoaXNJbnNpZGVFdmVudEhhbmRsZXIpIHJldHVybiBmbihhLCBiKTtcbiAgaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMDtcbiAgdHJ5IHtcbiAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZm4oYSk7XG4gICAgcmV0dXJuIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoXG4gICAgICAoKGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITEpLFxuICAgICAgbnVsbCAhPT0gcmVzdG9yZVRhcmdldCB8fCBudWxsICE9PSByZXN0b3JlUXVldWUpXG4gICAgKVxuICAgICAgaWYgKFxuICAgICAgICAoZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgIHJlc3RvcmVUYXJnZXQgJiZcbiAgICAgICAgICAoKGEgPSByZXN0b3JlVGFyZ2V0KSxcbiAgICAgICAgICAoZm4gPSByZXN0b3JlUXVldWUpLFxuICAgICAgICAgIChyZXN0b3JlUXVldWUgPSByZXN0b3JlVGFyZ2V0ID0gbnVsbCksXG4gICAgICAgICAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQoYSksXG4gICAgICAgICAgZm4pKVxuICAgICAgKVxuICAgICAgICBmb3IgKGEgPSAwOyBhIDwgZm4ubGVuZ3RoOyBhKyspIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KGZuW2FdKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICB2YXIgc3RhdGVOb2RlID0gaW5zdC5zdGF0ZU5vZGU7XG4gIGlmIChudWxsID09PSBzdGF0ZU5vZGUpIHJldHVybiBudWxsO1xuICB2YXIgcHJvcHMgPSBzdGF0ZU5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgaWYgKG51bGwgPT09IHByb3BzKSByZXR1cm4gbnVsbDtcbiAgc3RhdGVOb2RlID0gcHJvcHNbcmVnaXN0cmF0aW9uTmFtZV07XG4gIGE6IHN3aXRjaCAocmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGNhc2UgXCJvbkNsaWNrXCI6XG4gICAgY2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZURvd25cIjpcbiAgICBjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VNb3ZlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBcIjpcbiAgICBjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRW50ZXJcIjpcbiAgICAgIChwcm9wcyA9ICFwcm9wcy5kaXNhYmxlZCkgfHxcbiAgICAgICAgKChpbnN0ID0gaW5zdC50eXBlKSxcbiAgICAgICAgKHByb3BzID0gIShcbiAgICAgICAgICBcImJ1dHRvblwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJpbnB1dFwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJzZWxlY3RcIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwidGV4dGFyZWFcIiA9PT0gaW5zdFxuICAgICAgICApKSk7XG4gICAgICBpbnN0ID0gIXByb3BzO1xuICAgICAgYnJlYWsgYTtcbiAgICBkZWZhdWx0OlxuICAgICAgaW5zdCA9ICExO1xuICB9XG4gIGlmIChpbnN0KSByZXR1cm4gbnVsbDtcbiAgaWYgKHN0YXRlTm9kZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBzdGF0ZU5vZGUpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIzMSwgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIHN0YXRlTm9kZSlcbiAgICApO1xuICByZXR1cm4gc3RhdGVOb2RlO1xufVxudmFyIGNhblVzZURPTSA9ICEoXG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdyB8fFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgfHxcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbiAgKSxcbiAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbmlmIChjYW5Vc2VET00pXG4gIHRyeSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucywgXCJwYXNzaXZlXCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICEwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICExO1xuICB9XG52YXIgcm9vdCA9IG51bGwsXG4gIHN0YXJ0VGV4dCA9IG51bGwsXG4gIGZhbGxiYWNrVGV4dCA9IG51bGw7XG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoZmFsbGJhY2tUZXh0KSByZXR1cm4gZmFsbGJhY2tUZXh0O1xuICB2YXIgc3RhcnQsXG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0VGV4dCxcbiAgICBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoLFxuICAgIGVuZCxcbiAgICBlbmRWYWx1ZSA9IFwidmFsdWVcIiBpbiByb290ID8gcm9vdC52YWx1ZSA6IHJvb3QudGV4dENvbnRlbnQsXG4gICAgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuICBmb3IgKFxuICAgIHN0YXJ0ID0gMDtcbiAgICBzdGFydCA8IHN0YXJ0TGVuZ3RoICYmIHN0YXJ0VmFsdWVbc3RhcnRdID09PSBlbmRWYWx1ZVtzdGFydF07XG4gICAgc3RhcnQrK1xuICApO1xuICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgZm9yIChcbiAgICBlbmQgPSAxO1xuICAgIGVuZCA8PSBtaW5FbmQgJiZcbiAgICBzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSA9PT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXTtcbiAgICBlbmQrK1xuICApO1xuICByZXR1cm4gKGZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCAxIDwgZW5kID8gMSAtIGVuZCA6IHZvaWQgMCkpO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gIFwiY2hhckNvZGVcIiBpbiBuYXRpdmVFdmVudFxuICAgID8gKChuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlKSxcbiAgICAgIDAgPT09IG5hdGl2ZUV2ZW50ICYmIDEzID09PSBrZXlDb2RlICYmIChuYXRpdmVFdmVudCA9IDEzKSlcbiAgICA6IChuYXRpdmVFdmVudCA9IGtleUNvZGUpO1xuICAxMCA9PT0gbmF0aXZlRXZlbnQgJiYgKG5hdGl2ZUV2ZW50ID0gMTMpO1xuICByZXR1cm4gMzIgPD0gbmF0aXZlRXZlbnQgfHwgMTMgPT09IG5hdGl2ZUV2ZW50ID8gbmF0aXZlRXZlbnQgOiAwO1xufVxuZnVuY3Rpb24gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUoKSB7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSgpIHtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ludGhldGljRXZlbnQoSW50ZXJmYWNlKSB7XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0Jhc2VFdmVudChcbiAgICByZWFjdE5hbWUsXG4gICAgcmVhY3RFdmVudFR5cGUsXG4gICAgdGFyZ2V0SW5zdCxcbiAgICBuYXRpdmVFdmVudCxcbiAgICBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB0aGlzLl9yZWFjdE5hbWUgPSByZWFjdE5hbWU7XG4gICAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgdGhpcy50eXBlID0gcmVhY3RFdmVudFR5cGU7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpXG4gICAgICBJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICgocmVhY3ROYW1lID0gSW50ZXJmYWNlW3Byb3BOYW1lXSksXG4gICAgICAgICh0aGlzW3Byb3BOYW1lXSA9IHJlYWN0TmFtZVxuICAgICAgICAgID8gcmVhY3ROYW1lKG5hdGl2ZUV2ZW50KVxuICAgICAgICAgIDogbmF0aXZlRXZlbnRbcHJvcE5hbWVdKSk7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSAoXG4gICAgICBudWxsICE9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgIDogITEgPT09IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlXG4gICAgKVxuICAgICAgPyBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICAgICAgOiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhc3NpZ24oU3ludGhldGljQmFzZUV2ZW50LnByb3RvdHlwZSwge1xuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMDtcbiAgICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICBldmVudCAmJlxuICAgICAgICAoZXZlbnQucHJldmVudERlZmF1bHRcbiAgICAgICAgICA/IGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgJiYgKGV2ZW50LnJldHVyblZhbHVlID0gITEpLFxuICAgICAgICAodGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnN0b3BQcm9wYWdhdGlvblxuICAgICAgICAgID8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICYmXG4gICAgICAgICAgICAoZXZlbnQuY2FuY2VsQnViYmxlID0gITApLFxuICAgICAgICAodGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKSk7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7fSxcbiAgICBpc1BlcnNpc3RlbnQ6IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlXG4gIH0pO1xuICByZXR1cm4gU3ludGhldGljQmFzZUV2ZW50O1xufVxudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICAgIGV2ZW50UGhhc2U6IDAsXG4gICAgYnViYmxlczogMCxcbiAgICBjYW5jZWxhYmxlOiAwLFxuICAgIHRpbWVTdGFtcDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgfSxcbiAgICBkZWZhdWx0UHJldmVudGVkOiAwLFxuICAgIGlzVHJ1c3RlZDogMFxuICB9LFxuICBTeW50aGV0aWNFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEV2ZW50SW50ZXJmYWNlKSxcbiAgVUlFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHsgdmlldzogMCwgZGV0YWlsOiAwIH0pLFxuICBTeW50aGV0aWNVSUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVUlFdmVudEludGVyZmFjZSksXG4gIGxhc3RNb3ZlbWVudFgsXG4gIGxhc3RNb3ZlbWVudFksXG4gIGxhc3RNb3VzZUV2ZW50LFxuICBNb3VzZUV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgc2NyZWVuWDogMCxcbiAgICBzY3JlZW5ZOiAwLFxuICAgIGNsaWVudFg6IDAsXG4gICAgY2xpZW50WTogMCxcbiAgICBwYWdlWDogMCxcbiAgICBwYWdlWTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBidXR0b246IDAsXG4gICAgYnV0dG9uczogMCxcbiAgICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGV2ZW50LnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgPyBldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudFxuICAgICAgICAgID8gZXZlbnQudG9FbGVtZW50XG4gICAgICAgICAgOiBldmVudC5mcm9tRWxlbWVudFxuICAgICAgICA6IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgfSxcbiAgICBtb3ZlbWVudFg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKFwibW92ZW1lbnRYXCIgaW4gZXZlbnQpIHJldHVybiBldmVudC5tb3ZlbWVudFg7XG4gICAgICBldmVudCAhPT0gbGFzdE1vdXNlRXZlbnQgJiZcbiAgICAgICAgKGxhc3RNb3VzZUV2ZW50ICYmIFwibW91c2Vtb3ZlXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/ICgobGFzdE1vdmVtZW50WCA9IGV2ZW50LnNjcmVlblggLSBsYXN0TW91c2VFdmVudC5zY3JlZW5YKSxcbiAgICAgICAgICAgIChsYXN0TW92ZW1lbnRZID0gZXZlbnQuc2NyZWVuWSAtIGxhc3RNb3VzZUV2ZW50LnNjcmVlblkpKVxuICAgICAgICAgIDogKGxhc3RNb3ZlbWVudFkgPSBsYXN0TW92ZW1lbnRYID0gMCksXG4gICAgICAgIChsYXN0TW91c2VFdmVudCA9IGV2ZW50KSk7XG4gICAgICByZXR1cm4gbGFzdE1vdmVtZW50WDtcbiAgICB9LFxuICAgIG1vdmVtZW50WTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJtb3ZlbWVudFlcIiBpbiBldmVudCA/IGV2ZW50Lm1vdmVtZW50WSA6IGxhc3RNb3ZlbWVudFk7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljTW91c2VFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KE1vdXNlRXZlbnRJbnRlcmZhY2UpLFxuICBEcmFnRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHsgZGF0YVRyYW5zZmVyOiAwIH0pLFxuICBTeW50aGV0aWNEcmFnRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChEcmFnRXZlbnRJbnRlcmZhY2UpLFxuICBGb2N1c0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7IHJlbGF0ZWRUYXJnZXQ6IDAgfSksXG4gIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChGb2N1c0V2ZW50SW50ZXJmYWNlKSxcbiAgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgYW5pbWF0aW9uTmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJjbGlwYm9hcmREYXRhXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5jbGlwYm9hcmREYXRhXG4gICAgICAgIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDbGlwYm9hcmRFdmVudEludGVyZmFjZSksXG4gIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IGRhdGE6IDAgfSksXG4gIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgbm9ybWFsaXplS2V5ID0ge1xuICAgIEVzYzogXCJFc2NhcGVcIixcbiAgICBTcGFjZWJhcjogXCIgXCIsXG4gICAgTGVmdDogXCJBcnJvd0xlZnRcIixcbiAgICBVcDogXCJBcnJvd1VwXCIsXG4gICAgUmlnaHQ6IFwiQXJyb3dSaWdodFwiLFxuICAgIERvd246IFwiQXJyb3dEb3duXCIsXG4gICAgRGVsOiBcIkRlbGV0ZVwiLFxuICAgIFdpbjogXCJPU1wiLFxuICAgIE1lbnU6IFwiQ29udGV4dE1lbnVcIixcbiAgICBBcHBzOiBcIkNvbnRleHRNZW51XCIsXG4gICAgU2Nyb2xsOiBcIlNjcm9sbExvY2tcIixcbiAgICBNb3pQcmludGFibGVLZXk6IFwiVW5pZGVudGlmaWVkXCJcbiAgfSxcbiAgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICAgODogXCJCYWNrc3BhY2VcIixcbiAgICA5OiBcIlRhYlwiLFxuICAgIDEyOiBcIkNsZWFyXCIsXG4gICAgMTM6IFwiRW50ZXJcIixcbiAgICAxNjogXCJTaGlmdFwiLFxuICAgIDE3OiBcIkNvbnRyb2xcIixcbiAgICAxODogXCJBbHRcIixcbiAgICAxOTogXCJQYXVzZVwiLFxuICAgIDIwOiBcIkNhcHNMb2NrXCIsXG4gICAgMjc6IFwiRXNjYXBlXCIsXG4gICAgMzI6IFwiIFwiLFxuICAgIDMzOiBcIlBhZ2VVcFwiLFxuICAgIDM0OiBcIlBhZ2VEb3duXCIsXG4gICAgMzU6IFwiRW5kXCIsXG4gICAgMzY6IFwiSG9tZVwiLFxuICAgIDM3OiBcIkFycm93TGVmdFwiLFxuICAgIDM4OiBcIkFycm93VXBcIixcbiAgICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gICAgNDA6IFwiQXJyb3dEb3duXCIsXG4gICAgNDU6IFwiSW5zZXJ0XCIsXG4gICAgNDY6IFwiRGVsZXRlXCIsXG4gICAgMTEyOiBcIkYxXCIsXG4gICAgMTEzOiBcIkYyXCIsXG4gICAgMTE0OiBcIkYzXCIsXG4gICAgMTE1OiBcIkY0XCIsXG4gICAgMTE2OiBcIkY1XCIsXG4gICAgMTE3OiBcIkY2XCIsXG4gICAgMTE4OiBcIkY3XCIsXG4gICAgMTE5OiBcIkY4XCIsXG4gICAgMTIwOiBcIkY5XCIsXG4gICAgMTIxOiBcIkYxMFwiLFxuICAgIDEyMjogXCJGMTFcIixcbiAgICAxMjM6IFwiRjEyXCIsXG4gICAgMTQ0OiBcIk51bUxvY2tcIixcbiAgICAxNDU6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIDIyNDogXCJNZXRhXCJcbiAgfSxcbiAgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICAgQWx0OiBcImFsdEtleVwiLFxuICAgIENvbnRyb2w6IFwiY3RybEtleVwiLFxuICAgIE1ldGE6IFwibWV0YUtleVwiLFxuICAgIFNoaWZ0OiBcInNoaWZ0S2V5XCJcbiAgfTtcbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBuYXRpdmVFdmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlXG4gICAgPyBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZylcbiAgICA6IChrZXlBcmcgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddKVxuICAgICAgPyAhIW5hdGl2ZUV2ZW50W2tleUFyZ11cbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUoKSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBrZXk6IGZ1bmN0aW9uIChuYXRpdmVFdmVudCkge1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgICAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgICAgICBpZiAoXCJVbmlkZW50aWZpZWRcIiAhPT0ga2V5KSByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwia2V5cHJlc3NcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICA/ICgobmF0aXZlRXZlbnQgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSksXG4gICAgICAgICAgMTMgPT09IG5hdGl2ZUV2ZW50ID8gXCJFbnRlclwiIDogU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudCkpXG4gICAgICAgIDogXCJrZXlkb3duXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBuYXRpdmVFdmVudC50eXBlXG4gICAgICAgICAgPyB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gICAgICAgICAgOiBcIlwiO1xuICAgIH0sXG4gICAgY29kZTogMCxcbiAgICBsb2NhdGlvbjogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIHJlcGVhdDogMCxcbiAgICBsb2NhbGU6IDAsXG4gICAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAgIGNoYXJDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGUgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KSA6IDA7XG4gICAgfSxcbiAgICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBldmVudC5rZXlDb2RlXG4gICAgICAgIDogMDtcbiAgICB9LFxuICAgIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBldmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gZXZlbnQudHlwZVxuICAgICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICAgIDogMDtcbiAgICB9XG4gIH0pLFxuICBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoS2V5Ym9hcmRFdmVudEludGVyZmFjZSksXG4gIFBvaW50ZXJFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgTW91c2VFdmVudEludGVyZmFjZSwge1xuICAgIHBvaW50ZXJJZDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgcHJlc3N1cmU6IDAsXG4gICAgdGFuZ2VudGlhbFByZXNzdXJlOiAwLFxuICAgIHRpbHRYOiAwLFxuICAgIHRpbHRZOiAwLFxuICAgIHR3aXN0OiAwLFxuICAgIHBvaW50ZXJUeXBlOiAwLFxuICAgIGlzUHJpbWFyeTogMFxuICB9KSxcbiAgU3ludGhldGljUG9pbnRlckV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoUG9pbnRlckV2ZW50SW50ZXJmYWNlKSxcbiAgVG91Y2hFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHRvdWNoZXM6IDAsXG4gICAgdGFyZ2V0VG91Y2hlczogMCxcbiAgICBjaGFuZ2VkVG91Y2hlczogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICB9KSxcbiAgU3ludGhldGljVG91Y2hFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRvdWNoRXZlbnRJbnRlcmZhY2UpLFxuICBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgcHJvcGVydHlOYW1lOiAwLFxuICAgIGVsYXBzZWRUaW1lOiAwLFxuICAgIHBzZXVkb0VsZW1lbnQ6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRyYW5zaXRpb25FdmVudEludGVyZmFjZSksXG4gIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVhcbiAgICAgICAgOiBcIndoZWVsRGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWFxuICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJkZWx0YVlcIiBpbiBldmVudFxuICAgICAgICA/IGV2ZW50LmRlbHRhWVxuICAgICAgICA6IFwid2hlZWxEZWx0YVlcIiBpbiBldmVudFxuICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFZXG4gICAgICAgICAgOiBcIndoZWVsRGVsdGFcIiBpbiBldmVudFxuICAgICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVxuICAgICAgICAgICAgOiAwO1xuICAgIH0sXG4gICAgZGVsdGFaOiAwLFxuICAgIGRlbHRhTW9kZTogMFxuICB9KSxcbiAgU3ludGhldGljV2hlZWxFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFdoZWVsRXZlbnRJbnRlcmZhY2UpLFxuICBUb2dnbGVFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBuZXdTdGF0ZTogMCxcbiAgICBvbGRTdGF0ZTogMFxuICB9KSxcbiAgU3ludGhldGljVG9nZ2xlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb2dnbGVFdmVudEludGVyZmFjZSksXG4gIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXSxcbiAgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IGNhblVzZURPTSAmJiBcIkNvbXBvc2l0aW9uRXZlbnRcIiBpbiB3aW5kb3csXG4gIGRvY3VtZW50TW9kZSA9IG51bGw7XG5jYW5Vc2VET00gJiZcbiAgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJlxuICAoZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IGNhblVzZURPTSAmJiBcIlRleHRFdmVudFwiIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlLFxuICB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA9XG4gICAgY2FuVXNlRE9NICYmXG4gICAgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8XG4gICAgICAoZG9jdW1lbnRNb2RlICYmIDggPCBkb2N1bWVudE1vZGUgJiYgMTEgPj0gZG9jdW1lbnRNb2RlKSksXG4gIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxcbiAgaGFzU3BhY2VLZXlwcmVzcyA9ICExO1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgIHJldHVybiAtMSAhPT0gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSk7XG4gICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgIHJldHVybiAyMjkgIT09IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgbmF0aXZlRXZlbnQgJiYgXCJkYXRhXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/IG5hdGl2ZUV2ZW50LmRhdGFcbiAgICA6IG51bGw7XG59XG52YXIgaXNDb21wb3NpbmcgPSAhMTtcbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgaWYgKDMyICE9PSBuYXRpdmVFdmVudC53aGljaCkgcmV0dXJuIG51bGw7XG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gITA7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZG9tRXZlbnROYW1lID0gbmF0aXZlRXZlbnQuZGF0YSksXG4gICAgICAgIGRvbUV2ZW50TmFtZSA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzID8gbnVsbCA6IGRvbUV2ZW50TmFtZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChpc0NvbXBvc2luZylcbiAgICByZXR1cm4gXCJjb21wb3NpdGlvbmVuZFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJlxuICAgICAgICBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICA/ICgoZG9tRXZlbnROYW1lID0gZ2V0RGF0YSgpKSxcbiAgICAgICAgKGZhbGxiYWNrVGV4dCA9IHN0YXJ0VGV4dCA9IHJvb3QgPSBudWxsKSxcbiAgICAgICAgKGlzQ29tcG9zaW5nID0gITEpLFxuICAgICAgICBkb21FdmVudE5hbWUpXG4gICAgICA6IG51bGw7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmIChcbiAgICAgICAgIShuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSB8fFxuICAgICAgICAobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmNoYXIgJiYgMSA8IG5hdGl2ZUV2ZW50LmNoYXIubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiBuYXRpdmVFdmVudC5jaGFyO1xuICAgICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmIFwia29cIiAhPT0gbmF0aXZlRXZlbnQubG9jYWxlXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgY29sb3I6ICEwLFxuICBkYXRlOiAhMCxcbiAgZGF0ZXRpbWU6ICEwLFxuICBcImRhdGV0aW1lLWxvY2FsXCI6ICEwLFxuICBlbWFpbDogITAsXG4gIG1vbnRoOiAhMCxcbiAgbnVtYmVyOiAhMCxcbiAgcGFzc3dvcmQ6ICEwLFxuICByYW5nZTogITAsXG4gIHNlYXJjaDogITAsXG4gIHRlbDogITAsXG4gIHRleHQ6ICEwLFxuICB0aW1lOiAhMCxcbiAgdXJsOiAhMCxcbiAgd2VlazogITBcbn07XG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gXCJpbnB1dFwiID09PSBub2RlTmFtZVxuICAgID8gISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV1cbiAgICA6IFwidGV4dGFyZWFcIiA9PT0gbm9kZU5hbWVcbiAgICAgID8gITBcbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRcbikge1xuICByZXN0b3JlVGFyZ2V0XG4gICAgPyByZXN0b3JlUXVldWVcbiAgICAgID8gcmVzdG9yZVF1ZXVlLnB1c2godGFyZ2V0KVxuICAgICAgOiAocmVzdG9yZVF1ZXVlID0gW3RhcmdldF0pXG4gICAgOiAocmVzdG9yZVRhcmdldCA9IHRhcmdldCk7XG4gIGluc3QgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoaW5zdCwgXCJvbkNoYW5nZVwiKTtcbiAgMCA8IGluc3QubGVuZ3RoICYmXG4gICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwib25DaGFuZ2VcIixcbiAgICAgIFwiY2hhbmdlXCIsXG4gICAgICBudWxsLFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICB0YXJnZXRcbiAgICApKSxcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogaW5zdCB9KSk7XG59XG52YXIgYWN0aXZlRWxlbWVudCQxID0gbnVsbCxcbiAgYWN0aXZlRWxlbWVudEluc3QkMSA9IG51bGw7XG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZGlzcGF0Y2hRdWV1ZSkge1xuICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCAwKTtcbn1cbmZ1bmN0aW9uIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KSB7XG4gIHZhciB0YXJnZXROb2RlID0gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KTtcbiAgaWYgKHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldE5vZGUpKSByZXR1cm4gdGFyZ2V0SW5zdDtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MjtcbiAgaWYgKGNhblVzZURPTSkge1xuICAgIHZhciBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxNyA9IFwib25pbnB1dFwiIGluIGRvY3VtZW50O1xuICAgIGlmICghaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTcpIHtcbiAgICAgIHZhciBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVsZW1lbnQkanNjb21wJGlubGluZV80MTguc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLCBcInJldHVybjtcIik7XG4gICAgICBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxNyA9XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGVsZW1lbnQkanNjb21wJGlubGluZV80MTgub25pbnB1dDtcbiAgICB9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODIgPSBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxNztcbiAgfSBlbHNlIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgyID0gITE7XG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODIgJiZcbiAgICAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA5IDwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbn1cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBhY3RpdmVFbGVtZW50JDEgJiZcbiAgICAoYWN0aXZlRWxlbWVudCQxLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSksXG4gICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBhY3RpdmVFbGVtZW50JDEgPSBudWxsKSk7XG59XG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAoXG4gICAgXCJ2YWx1ZVwiID09PSBuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgJiZcbiAgICBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSlcbiAgKSB7XG4gICAgdmFyIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpXG4gICAgKTtcbiAgICBiYXRjaGVkVXBkYXRlcyQxKHJ1bkV2ZW50SW5CYXRjaCwgZGlzcGF0Y2hRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbChkb21FdmVudE5hbWUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBcImZvY3VzaW5cIiA9PT0gZG9tRXZlbnROYW1lXG4gICAgPyAoc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSxcbiAgICAgIChhY3RpdmVFbGVtZW50JDEgPSB0YXJnZXQpLFxuICAgICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSB0YXJnZXRJbnN0KSxcbiAgICAgIGFjdGl2ZUVsZW1lbnQkMS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpKVxuICAgIDogXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiYgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lKSB7XG4gIGlmIChcbiAgICBcInNlbGVjdGlvbmNoYW5nZVwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleXVwXCIgPT09IGRvbUV2ZW50TmFtZSB8fFxuICAgIFwia2V5ZG93blwiID09PSBkb21FdmVudE5hbWVcbiAgKVxuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2xpY2tcIiA9PT0gZG9tRXZlbnROYW1lKSByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiaW5wdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSlcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4gKHggPT09IHkgJiYgKDAgIT09IHggfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG59XG52YXIgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcztcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmplY3RJcyhvYmpBLCBvYmpCKSkgcmV0dXJuICEwO1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakEgfHxcbiAgICBudWxsID09PSBvYmpBIHx8XG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakIgfHxcbiAgICBudWxsID09PSBvYmpCXG4gIClcbiAgICByZXR1cm4gITE7XG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpLFxuICAgIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuICExO1xuICBmb3IgKGtleXNCID0gMDsga2V5c0IgPCBrZXlzQS5sZW5ndGg7IGtleXNCKyspIHtcbiAgICB2YXIgY3VycmVudEtleSA9IGtleXNBW2tleXNCXTtcbiAgICBpZiAoXG4gICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBjdXJyZW50S2V5KSB8fFxuICAgICAgIW9iamVjdElzKG9iakFbY3VycmVudEtleV0sIG9iakJbY3VycmVudEtleV0pXG4gICAgKVxuICAgICAgcmV0dXJuICExO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgZm9yICg7IG5vZGUgJiYgbm9kZS5maXJzdENoaWxkOyApIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgcm9vdCA9IDA7XG4gIGZvciAodmFyIG5vZGVFbmQ7IG5vZGU7ICkge1xuICAgIGlmICgzID09PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICBub2RlRW5kID0gcm9vdCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgaWYgKHJvb3QgPD0gb2Zmc2V0ICYmIG5vZGVFbmQgPj0gb2Zmc2V0KVxuICAgICAgICByZXR1cm4geyBub2RlOiBub2RlLCBvZmZzZXQ6IG9mZnNldCAtIHJvb3QgfTtcbiAgICAgIHJvb3QgPSBub2RlRW5kO1xuICAgIH1cbiAgICBhOiB7XG4gICAgICBmb3IgKDsgbm9kZTsgKSB7XG4gICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IHZvaWQgMDtcbiAgICB9XG4gICAgbm9kZSA9IGdldExlYWZOb2RlKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgcmV0dXJuIG91dGVyTm9kZSAmJiBpbm5lck5vZGVcbiAgICA/IG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlXG4gICAgICA/ICEwXG4gICAgICA6IG91dGVyTm9kZSAmJiAzID09PSBvdXRlck5vZGUubm9kZVR5cGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IGlubmVyTm9kZSAmJiAzID09PSBpbm5lck5vZGUubm9kZVR5cGVcbiAgICAgICAgICA/IGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgIDogXCJjb250YWluc1wiIGluIG91dGVyTm9kZVxuICAgICAgICAgICAgPyBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKVxuICAgICAgICAgICAgOiBvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb25cbiAgICAgICAgICAgICAgPyAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KVxuICAgICAgICAgICAgICA6ICExXG4gICAgOiAhMTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnREZWVwKGNvbnRhaW5lckluZm8pIHtcbiAgY29udGFpbmVySW5mbyA9XG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBudWxsICE9IGNvbnRhaW5lckluZm8ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld1xuICAgICAgPyBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgIDogd2luZG93O1xuICBmb3IgKFxuICAgIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudChjb250YWluZXJJbmZvLmRvY3VtZW50KTtcbiAgICBlbGVtZW50IGluc3RhbmNlb2YgY29udGFpbmVySW5mby5IVE1MSUZyYW1lRWxlbWVudDtcblxuICApIHtcbiAgICB0cnkge1xuICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlbGVtZW50LmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgIH1cbiAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSBjb250YWluZXJJbmZvID0gZWxlbWVudC5jb250ZW50V2luZG93O1xuICAgIGVsc2UgYnJlYWs7XG4gICAgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKFxuICAgIG5vZGVOYW1lICYmXG4gICAgKChcImlucHV0XCIgPT09IG5vZGVOYW1lICYmXG4gICAgICAoXCJ0ZXh0XCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInNlYXJjaFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJ0ZWxcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidXJsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInBhc3N3b3JkXCIgPT09IGVsZW0udHlwZSkpIHx8XG4gICAgICBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICBcInRydWVcIiA9PT0gZWxlbS5jb250ZW50RWRpdGFibGUpXG4gICk7XG59XG52YXIgc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50ID1cbiAgICBjYW5Vc2VET00gJiYgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJiAxMSA+PSBkb2N1bWVudC5kb2N1bWVudE1vZGUsXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsLFxuICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGwsXG4gIGxhc3RTZWxlY3Rpb24gPSBudWxsLFxuICBtb3VzZURvd24gPSAhMTtcbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZG9jID1cbiAgICBuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICA/IG5hdGl2ZUV2ZW50VGFyZ2V0LmRvY3VtZW50XG4gICAgICA6IDkgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0Lm5vZGVUeXBlXG4gICAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgOiBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICBtb3VzZURvd24gfHxcbiAgICBudWxsID09IGFjdGl2ZUVsZW1lbnQgfHxcbiAgICBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KGRvYykgfHxcbiAgICAoKGRvYyA9IGFjdGl2ZUVsZW1lbnQpLFxuICAgIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBkb2MgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGRvYylcbiAgICAgID8gKGRvYyA9IHsgc3RhcnQ6IGRvYy5zZWxlY3Rpb25TdGFydCwgZW5kOiBkb2Muc2VsZWN0aW9uRW5kIH0pXG4gICAgICA6ICgoZG9jID0gKFxuICAgICAgICAgIChkb2Mub3duZXJEb2N1bWVudCAmJiBkb2Mub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3dcbiAgICAgICAgKS5nZXRTZWxlY3Rpb24oKSksXG4gICAgICAgIChkb2MgPSB7XG4gICAgICAgICAgYW5jaG9yTm9kZTogZG9jLmFuY2hvck5vZGUsXG4gICAgICAgICAgYW5jaG9yT2Zmc2V0OiBkb2MuYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgIGZvY3VzTm9kZTogZG9jLmZvY3VzTm9kZSxcbiAgICAgICAgICBmb2N1c09mZnNldDogZG9jLmZvY3VzT2Zmc2V0XG4gICAgICAgIH0pKSxcbiAgICAobGFzdFNlbGVjdGlvbiAmJiBzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgZG9jKSkgfHxcbiAgICAgICgobGFzdFNlbGVjdGlvbiA9IGRvYyksXG4gICAgICAoZG9jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGFjdGl2ZUVsZW1lbnRJbnN0LCBcIm9uU2VsZWN0XCIpKSxcbiAgICAgIDAgPCBkb2MubGVuZ3RoICYmXG4gICAgICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICAgICAgXCJvblNlbGVjdFwiLFxuICAgICAgICAgIFwic2VsZWN0XCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICApKSxcbiAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGRvYyB9KSxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQpKSkpO1xufVxuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgcHJlZml4ZXNbc3R5bGVQcm9wLnRvTG93ZXJDYXNlKCldID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHByZWZpeGVzW1wiV2Via2l0XCIgKyBzdHlsZVByb3BdID0gXCJ3ZWJraXRcIiArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbXCJNb3pcIiArIHN0eWxlUHJvcF0gPSBcIm1velwiICsgZXZlbnROYW1lO1xuICByZXR1cm4gcHJlZml4ZXM7XG59XG52YXIgdmVuZG9yUHJlZml4ZXMgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uRW5kXCIpLFxuICAgIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxcbiAgICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvblN0YXJ0XCIpLFxuICAgIHRyYW5zaXRpb25ydW46IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvblJ1blwiKSxcbiAgICB0cmFuc2l0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvblN0YXJ0XCIpLFxuICAgIHRyYW5zaXRpb25jYW5jZWw6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvbkNhbmNlbFwiKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25FbmRcIilcbiAgfSxcbiAgcHJlZml4ZWRFdmVudE5hbWVzID0ge30sXG4gIHN0eWxlID0ge307XG5jYW5Vc2VET00gJiZcbiAgKChzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUpLFxuICBcIkFuaW1hdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8XG4gICAgKGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFxuICBcIlRyYW5zaXRpb25FdmVudFwiIGluIHdpbmRvdyB8fFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICBpZiAoIXZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0pIHJldHVybiBldmVudE5hbWU7XG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdLFxuICAgIHN0eWxlUHJvcDtcbiAgZm9yIChzdHlsZVByb3AgaW4gcHJlZml4TWFwKVxuICAgIGlmIChwcmVmaXhNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpXG4gICAgICByZXR1cm4gKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdID0gcHJlZml4TWFwW3N0eWxlUHJvcF0pO1xuICByZXR1cm4gZXZlbnROYW1lO1xufVxudmFyIEFOSU1BVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbmVuZFwiKSxcbiAgQU5JTUFUSU9OX0lURVJBVElPTiA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFxuICBBTklNQVRJT05fU1RBUlQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbnN0YXJ0XCIpLFxuICBUUkFOU0lUSU9OX1JVTiA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbnJ1blwiKSxcbiAgVFJBTlNJVElPTl9TVEFSVCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbnN0YXJ0XCIpLFxuICBUUkFOU0lUSU9OX0NBTkNFTCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbmNhbmNlbFwiKSxcbiAgVFJBTlNJVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25lbmRcIiksXG4gIHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzID0gbmV3IE1hcCgpLFxuICBzaW1wbGVFdmVudFBsdWdpbkV2ZW50cyA9XG4gICAgXCJhYm9ydCBhdXhDbGljayBiZWZvcmVUb2dnbGUgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKTtcbnNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzLnB1c2goXCJzY3JvbGxFbmRcIik7XG5mdW5jdGlvbiByZWdpc3RlclNpbXBsZUV2ZW50KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKSB7XG4gIHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzLnNldChkb21FdmVudE5hbWUsIHJlYWN0TmFtZSk7XG4gIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWFjdE5hbWUsIFtkb21FdmVudE5hbWVdKTtcbn1cbnZhciBDYXB0dXJlZFN0YWNrcyA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlKSB7XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUgJiYgbnVsbCAhPT0gdmFsdWUpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBDYXB0dXJlZFN0YWNrcy5nZXQodmFsdWUpO1xuICAgIGlmICh2b2lkIDAgIT09IGV4aXN0aW5nKSByZXR1cm4gZXhpc3Rpbmc7XG4gICAgc291cmNlID0ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBzdGFjazogZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZSlcbiAgICB9O1xuICAgIENhcHR1cmVkU3RhY2tzLnNldCh2YWx1ZSwgc291cmNlKTtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIHNvdXJjZTogc291cmNlLFxuICAgIHN0YWNrOiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc291cmNlKVxuICB9O1xufVxudmFyIGNvbmN1cnJlbnRRdWV1ZXMgPSBbXSxcbiAgY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCxcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gMDtcbmZ1bmN0aW9uIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSB7XG4gIGZvciAoXG4gICAgdmFyIGVuZEluZGV4ID0gY29uY3VycmVudFF1ZXVlc0luZGV4LFxuICAgICAgaSA9IChjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgPSBjb25jdXJyZW50UXVldWVzSW5kZXggPSAwKTtcbiAgICBpIDwgZW5kSW5kZXg7XG5cbiAgKSB7XG4gICAgdmFyIGZpYmVyID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBxdWV1ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgdXBkYXRlID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBsYW5lID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIGlmIChudWxsICE9PSBxdWV1ZSAmJiBudWxsICE9PSB1cGRhdGUpIHtcbiAgICAgIHZhciBwZW5kaW5nID0gcXVldWUucGVuZGluZztcbiAgICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgICAgIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgfVxuICAgIDAgIT09IGxhbmUgJiYgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIHVwZGF0ZSwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUkMShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IGZpYmVyO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHF1ZXVlO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHVwZGF0ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBsYW5lO1xuICBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgfD0gbGFuZTtcbiAgZmliZXIubGFuZXMgfD0gbGFuZTtcbiAgZmliZXIgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5sYW5lcyB8PSBsYW5lKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICByZXR1cm4gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBudWxsLCBudWxsLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3Qoc291cmNlRmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICBzb3VyY2VGaWJlci5sYW5lcyB8PSBsYW5lO1xuICB2YXIgYWx0ZXJuYXRlID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSBsYW5lKTtcbiAgZm9yICh2YXIgaXNIaWRkZW4gPSAhMSwgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgfD0gbGFuZSksXG4gICAgICAoYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgMjIgPT09IHBhcmVudC50YWcgJiZcbiAgICAgICAgKChzb3VyY2VGaWJlciA9IHBhcmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlciB8fCBzb3VyY2VGaWJlci5fdmlzaWJpbGl0eSAmIDEgfHwgKGlzSGlkZGVuID0gITApKSxcbiAgICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksXG4gICAgICAocGFyZW50ID0gcGFyZW50LnJldHVybik7XG4gIHJldHVybiAzID09PSBzb3VyY2VGaWJlci50YWdcbiAgICA/ICgocGFyZW50ID0gc291cmNlRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgIGlzSGlkZGVuICYmXG4gICAgICAgIG51bGwgIT09IHVwZGF0ZSAmJlxuICAgICAgICAoKGlzSGlkZGVuID0gMzEgLSBjbHozMihsYW5lKSksXG4gICAgICAgIChzb3VyY2VGaWJlciA9IHBhcmVudC5oaWRkZW5VcGRhdGVzKSxcbiAgICAgICAgKGFsdGVybmF0ZSA9IHNvdXJjZUZpYmVyW2lzSGlkZGVuXSksXG4gICAgICAgIG51bGwgPT09IGFsdGVybmF0ZVxuICAgICAgICAgID8gKHNvdXJjZUZpYmVyW2lzSGlkZGVuXSA9IFt1cGRhdGVdKVxuICAgICAgICAgIDogYWx0ZXJuYXRlLnB1c2godXBkYXRlKSxcbiAgICAgICAgKHVwZGF0ZS5sYW5lID0gbGFuZSB8IDUzNjg3MDkxMikpLFxuICAgICAgcGFyZW50KVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoc291cmNlRmliZXIpIHtcbiAgaWYgKDUwIDwgbmVzdGVkVXBkYXRlQ291bnQpXG4gICAgdGhyb3cgKFxuICAgICAgKChuZXN0ZWRVcGRhdGVDb3VudCA9IDApLFxuICAgICAgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGwpLFxuICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODUpKSlcbiAgICApO1xuICBmb3IgKHZhciBwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm47IG51bGwgIT09IHBhcmVudDsgKVxuICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksIChwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm4pO1xuICByZXR1cm4gMyA9PT0gc291cmNlRmliZXIudGFnID8gc291cmNlRmliZXIuc3RhdGVOb2RlIDogbnVsbDtcbn1cbnZhciBlbXB0eUNvbnRleHRPYmplY3QgPSB7fTtcbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5zaWJsaW5nID1cbiAgICB0aGlzLmNoaWxkID1cbiAgICB0aGlzLnJldHVybiA9XG4gICAgdGhpcy5zdGF0ZU5vZGUgPVxuICAgIHRoaXMudHlwZSA9XG4gICAgdGhpcy5lbGVtZW50VHlwZSA9XG4gICAgICBudWxsO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5yZWZDbGVhbnVwID0gdGhpcy5yZWYgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5kZXBlbmRlbmNpZXMgPVxuICAgIHRoaXMubWVtb2l6ZWRTdGF0ZSA9XG4gICAgdGhpcy51cGRhdGVRdWV1ZSA9XG4gICAgdGhpcy5tZW1vaXplZFByb3BzID1cbiAgICAgIG51bGw7XG4gIHRoaXMubW9kZSA9IG1vZGU7XG4gIHRoaXMuc3VidHJlZUZsYWdzID0gdGhpcy5mbGFncyA9IDA7XG4gIHRoaXMuZGVsZXRpb25zID0gbnVsbDtcbiAgdGhpcy5jaGlsZExhbmVzID0gdGhpcy5sYW5lcyA9IDA7XG4gIHRoaXMuYWx0ZXJuYXRlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVySW1wbENsYXNzKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpIHtcbiAgcmV0dXJuIG5ldyBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG59XG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIENvbXBvbmVudCA9IENvbXBvbmVudC5wcm90b3R5cGU7XG4gIHJldHVybiAhKCFDb21wb25lbnQgfHwgIUNvbXBvbmVudC5pc1JlYWN0Q29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIHBlbmRpbmdQcm9wcykge1xuICB2YXIgd29ya0luUHJvZ3Jlc3MgPSBjdXJyZW50LmFsdGVybmF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgY3VycmVudC50YWcsXG4gICAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgICAgY3VycmVudC5rZXksXG4gICAgICAgIGN1cnJlbnQubW9kZVxuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPSBjdXJyZW50LmVsZW1lbnRUeXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50LnN0YXRlTm9kZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gY3VycmVudCksXG4gICAgICAoY3VycmVudC5hbHRlcm5hdGUgPSB3b3JrSW5Qcm9ncmVzcykpXG4gICAgOiAoKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBudWxsKSk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzID0gY3VycmVudC5mbGFncyAmIDY1MDExNzEyO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICBwZW5kaW5nUHJvcHMgPSBjdXJyZW50LmRlcGVuZGVuY2llcztcbiAgd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICBudWxsID09PSBwZW5kaW5nUHJvcHNcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IGxhbmVzOiBwZW5kaW5nUHJvcHMubGFuZXMsIGZpcnN0Q29udGV4dDogcGVuZGluZ1Byb3BzLmZpcnN0Q29udGV4dCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gY3VycmVudC5zaWJsaW5nO1xuICB3b3JrSW5Qcm9ncmVzcy5pbmRleCA9IGN1cnJlbnQuaW5kZXg7XG4gIHdvcmtJblByb2dyZXNzLnJlZiA9IGN1cnJlbnQucmVmO1xuICB3b3JrSW5Qcm9ncmVzcy5yZWZDbGVhbnVwID0gY3VycmVudC5yZWZDbGVhbnVwO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzKHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSA2NTAxMTcxNDtcbiAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIG51bGwgPT09IGN1cnJlbnRcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG51bGwpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPVxuICAgICAgICBudWxsID09PSByZW5kZXJMYW5lc1xuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBsYW5lczogcmVuZGVyTGFuZXMubGFuZXMsXG4gICAgICAgICAgICAgIGZpcnN0Q29udGV4dDogcmVuZGVyTGFuZXMuZmlyc3RDb250ZXh0XG4gICAgICAgICAgICB9KSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgdHlwZSxcbiAga2V5LFxuICBwZW5kaW5nUHJvcHMsXG4gIG93bmVyLFxuICBtb2RlLFxuICBsYW5lc1xuKSB7XG4gIHZhciBmaWJlclRhZyA9IDA7XG4gIG93bmVyID0gdHlwZTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpIHNob3VsZENvbnN0cnVjdCh0eXBlKSAmJiAoZmliZXJUYWcgPSAxKTtcbiAgZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgZmliZXJUYWcgPSBpc0hvc3RIb2lzdGFibGVUeXBlKFxuICAgICAgdHlwZSxcbiAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgIGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50XG4gICAgKVxuICAgICAgPyAyNlxuICAgICAgOiBcImh0bWxcIiA9PT0gdHlwZSB8fCBcImhlYWRcIiA9PT0gdHlwZSB8fCBcImJvZHlcIiA9PT0gdHlwZVxuICAgICAgICA/IDI3XG4gICAgICAgIDogNTtcbiAgZWxzZVxuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBSRUFDVF9BQ1RJVklUWV9UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh0eXBlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMzEsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSksXG4gICAgICAgICAgKHR5cGUuZWxlbWVudFR5cGUgPSBSRUFDVF9BQ1RJVklUWV9UWVBFKSxcbiAgICAgICAgICAodHlwZS5sYW5lcyA9IGxhbmVzKSxcbiAgICAgICAgICB0eXBlXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChwZW5kaW5nUHJvcHMuY2hpbGRyZW4sIG1vZGUsIGxhbmVzLCBrZXkpO1xuICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICBmaWJlclRhZyA9IDg7XG4gICAgICAgIG1vZGUgfD0gMjQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh0eXBlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMTIsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlIHwgMikpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfUFJPRklMRVJfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh0eXBlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMTMsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSksXG4gICAgICAgICAgKHR5cGUuZWxlbWVudFR5cGUgPSBSRUFDVF9TVVNQRU5TRV9UWVBFKSxcbiAgICAgICAgICAodHlwZS5sYW5lcyA9IGxhbmVzKSxcbiAgICAgICAgICB0eXBlXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDE5LCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFKSxcbiAgICAgICAgICAodHlwZS5sYW5lcyA9IGxhbmVzKSxcbiAgICAgICAgICB0eXBlXG4gICAgICAgICk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHR5cGUgJiYgbnVsbCAhPT0gdHlwZSlcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDEwO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05TVU1FUl9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTE7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxNDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDE2O1xuICAgICAgICAgICAgICBvd25lciA9IG51bGw7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICBmaWJlclRhZyA9IDI5O1xuICAgICAgICBwZW5kaW5nUHJvcHMgPSBFcnJvcihcbiAgICAgICAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzMCwgbnVsbCA9PT0gdHlwZSA/IFwibnVsbFwiIDogdHlwZW9mIHR5cGUsIFwiXCIpXG4gICAgICAgICk7XG4gICAgICAgIG93bmVyID0gbnVsbDtcbiAgICB9XG4gIGtleSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKGZpYmVyVGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG4gIGtleS5lbGVtZW50VHlwZSA9IHR5cGU7XG4gIGtleS50eXBlID0gb3duZXI7XG4gIGtleS5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4ga2V5O1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoZWxlbWVudHMsIG1vZGUsIGxhbmVzLCBrZXkpIHtcbiAgZWxlbWVudHMgPSBjcmVhdGVGaWJlckltcGxDbGFzcyg3LCBlbGVtZW50cywga2V5LCBtb2RlKTtcbiAgZWxlbWVudHMubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tVGV4dChjb250ZW50LCBtb2RlLCBsYW5lcykge1xuICBjb250ZW50ID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNiwgY29udGVudCwgbnVsbCwgbW9kZSk7XG4gIGNvbnRlbnQubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBsYW5lcykge1xuICBtb2RlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgNCxcbiAgICBudWxsICE9PSBwb3J0YWwuY2hpbGRyZW4gPyBwb3J0YWwuY2hpbGRyZW4gOiBbXSxcbiAgICBwb3J0YWwua2V5LFxuICAgIG1vZGVcbiAgKTtcbiAgbW9kZS5sYW5lcyA9IGxhbmVzO1xuICBtb2RlLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG4gICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICB9O1xuICByZXR1cm4gbW9kZTtcbn1cbnZhciBmb3JrU3RhY2sgPSBbXSxcbiAgZm9ya1N0YWNrSW5kZXggPSAwLFxuICB0cmVlRm9ya1Byb3ZpZGVyID0gbnVsbCxcbiAgdHJlZUZvcmtDb3VudCA9IDAsXG4gIGlkU3RhY2sgPSBbXSxcbiAgaWRTdGFja0luZGV4ID0gMCxcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IG51bGwsXG4gIHRyZWVDb250ZXh0SWQgPSAxLFxuICB0cmVlQ29udGV4dE92ZXJmbG93ID0gXCJcIjtcbmZ1bmN0aW9uIHB1c2hUcmVlRm9yayh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbikge1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya0NvdW50O1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya1Byb3ZpZGVyO1xuICB0cmVlRm9ya1Byb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHRyZWVGb3JrQ291bnQgPSB0b3RhbENoaWxkcmVuO1xufVxuZnVuY3Rpb24gcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbiwgaW5kZXgpIHtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkO1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlcjtcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgYmFzZUlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIHZhciBiYXNlTGVuZ3RoID0gMzIgLSBjbHozMihiYXNlSWRXaXRoTGVhZGluZ0JpdCkgLSAxO1xuICBiYXNlSWRXaXRoTGVhZGluZ0JpdCAmPSB+KDEgPDwgYmFzZUxlbmd0aCk7XG4gIGluZGV4ICs9IDE7XG4gIHZhciBsZW5ndGggPSAzMiAtIGNsejMyKHRvdGFsQ2hpbGRyZW4pICsgYmFzZUxlbmd0aDtcbiAgaWYgKDMwIDwgbGVuZ3RoKSB7XG4gICAgdmFyIG51bWJlck9mT3ZlcmZsb3dCaXRzID0gYmFzZUxlbmd0aCAtIChiYXNlTGVuZ3RoICUgNSk7XG4gICAgbGVuZ3RoID0gKFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJlxuICAgICAgKCgxIDw8IG51bWJlck9mT3ZlcmZsb3dCaXRzKSAtIDEpXG4gICAgKS50b1N0cmluZygzMik7XG4gICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgPj49IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIGJhc2VMZW5ndGggLT0gbnVtYmVyT2ZPdmVyZmxvd0JpdHM7XG4gICAgdHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCAoMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGgpKSB8XG4gICAgICAoaW5kZXggPDwgYmFzZUxlbmd0aCkgfFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQ7XG4gICAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IGxlbmd0aCArIHdvcmtJblByb2dyZXNzO1xuICB9IGVsc2VcbiAgICAodHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCBsZW5ndGgpIHwgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHwgYmFzZUlkV2l0aExlYWRpbmdCaXQpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSB3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKSB7XG4gIG51bGwgIT09IHdvcmtJblByb2dyZXNzLnJldHVybiAmJlxuICAgIChwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIDEpLCBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCAxLCAwKSk7XG59XG5mdW5jdGlvbiBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBmb3IgKDsgd29ya0luUHJvZ3Jlc3MgPT09IHRyZWVGb3JrUHJvdmlkZXI7IClcbiAgICAodHJlZUZvcmtQcm92aWRlciA9IGZvcmtTdGFja1stLWZvcmtTdGFja0luZGV4XSksXG4gICAgICAoZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVGb3JrQ291bnQgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKTtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlQ29udGV4dFByb3ZpZGVyOyApXG4gICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlQ29udGV4dElkID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpO1xufVxudmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbCxcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwsXG4gIGlzSHlkcmF0aW5nID0gITEsXG4gIGh5ZHJhdGlvbkVycm9ycyA9IG51bGwsXG4gIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSxcbiAgSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUxOSkpO1xuZnVuY3Rpb24gdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE4LCBcIlwiKSk7XG4gIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIGZpYmVyKSk7XG4gIHRocm93IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZShmaWJlcikge1xuICB2YXIgaW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGUsXG4gICAgdHlwZSA9IGZpYmVyLnR5cGUsXG4gICAgcHJvcHMgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICBpbnN0YW5jZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpYmVyO1xuICBpbnN0YW5jZVtpbnRlcm5hbFByb3BzS2V5XSA9IHByb3BzO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZGlhbG9nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2FuY2VsXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInZpZGVvXCI6XG4gICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICBmb3IgKHR5cGUgPSAwOyB0eXBlIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgdHlwZSsrKVxuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1t0eXBlXSwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbWdcIjpcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgaW5pdElucHV0KFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgIHByb3BzLm5hbWUsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBpbnN0YW5jZSksXG4gICAgICAgIGluaXRUZXh0YXJlYShpbnN0YW5jZSwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgcHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICB0cmFjayhpbnN0YW5jZSk7XG4gIH1cbiAgdHlwZSA9IHByb3BzLmNoaWxkcmVuO1xuICAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcIm51bWJlclwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYmlnaW50XCIgIT09IHR5cGVvZiB0eXBlKSB8fFxuICBpbnN0YW5jZS50ZXh0Q29udGVudCA9PT0gXCJcIiArIHR5cGUgfHxcbiAgITAgPT09IHByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyB8fFxuICBjaGVja0ZvclVubWF0Y2hlZFRleHQoaW5zdGFuY2UudGV4dENvbnRlbnQsIHR5cGUpXG4gICAgPyAobnVsbCAhPSBwcm9wcy5wb3BvdmVyICYmXG4gICAgICAgIChsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGluc3RhbmNlKSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSkpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vblNjcm9sbCAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGluc3RhbmNlKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGxFbmQgJiZcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbGVuZFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uQ2xpY2sgJiYgKGluc3RhbmNlLm9uY2xpY2sgPSBub29wJDEpLFxuICAgICAgKGluc3RhbmNlID0gITApKVxuICAgIDogKGluc3RhbmNlID0gITEpO1xuICBpbnN0YW5jZSB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xufVxuZnVuY3Rpb24gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcikge1xuICBmb3IgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXIucmV0dXJuOyBoeWRyYXRpb25QYXJlbnRGaWJlcjsgKVxuICAgIHN3aXRjaCAoaHlkcmF0aW9uUGFyZW50RmliZXIudGFnKSB7XG4gICAgICBjYXNlIDU6XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgMjc6XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBoeWRyYXRpb25QYXJlbnRGaWJlci5yZXR1cm47XG4gICAgfVxufVxuZnVuY3Rpb24gcG9wSHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgaWYgKGZpYmVyICE9PSBoeWRyYXRpb25QYXJlbnRGaWJlcikgcmV0dXJuICExO1xuICBpZiAoIWlzSHlkcmF0aW5nKSByZXR1cm4gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlciksIChpc0h5ZHJhdGluZyA9ICEwKSwgITE7XG4gIHZhciB0YWcgPSBmaWJlci50YWcsXG4gICAgSlNDb21waWxlcl90ZW1wO1xuICBpZiAoKEpTQ29tcGlsZXJfdGVtcCA9IDMgIT09IHRhZyAmJiAyNyAhPT0gdGFnKSkge1xuICAgIGlmICgoSlNDb21waWxlcl90ZW1wID0gNSA9PT0gdGFnKSlcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSBmaWJlci50eXBlKSxcbiAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgICAgIShcImZvcm1cIiAhPT0gSlNDb21waWxlcl90ZW1wICYmIFwiYnV0dG9uXCIgIT09IEpTQ29tcGlsZXJfdGVtcCkgfHxcbiAgICAgICAgICBzaG91bGRTZXRUZXh0Q29udGVudChmaWJlci50eXBlLCBmaWJlci5tZW1vaXplZFByb3BzKSk7XG4gICAgSlNDb21waWxlcl90ZW1wID0gIUpTQ29tcGlsZXJfdGVtcDtcbiAgfVxuICBKU0NvbXBpbGVyX3RlbXAgJiYgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSAmJiB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xuICBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKTtcbiAgaWYgKDEzID09PSB0YWcpIHtcbiAgICBmaWJlciA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgZmliZXIgPSBudWxsICE9PSBmaWJlciA/IGZpYmVyLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgIGlmICghZmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE3KSk7XG4gICAgYToge1xuICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIGZvciAodGFnID0gMDsgZmliZXI7ICkge1xuICAgICAgICBpZiAoOCA9PT0gZmliZXIubm9kZVR5cGUpXG4gICAgICAgICAgaWYgKCgoSlNDb21waWxlcl90ZW1wID0gZmliZXIuZGF0YSksIFwiLyRcIiA9PT0gSlNDb21waWxlcl90ZW1wKSkge1xuICAgICAgICAgICAgaWYgKDAgPT09IHRhZykge1xuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoZmliZXIubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFnLS07XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAoXCIkXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQhXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQ/XCIgIT09IEpTQ29tcGlsZXJfdGVtcCkgfHxcbiAgICAgICAgICAgICAgdGFnKys7XG4gICAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH0gZWxzZVxuICAgIDI3ID09PSB0YWdcbiAgICAgID8gKCh0YWcgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSxcbiAgICAgICAgaXNTaW5nbGV0b25TY29wZShmaWJlci50eXBlKVxuICAgICAgICAgID8gKChmaWJlciA9IHByZXZpb3VzSHlkcmF0YWJsZU9uRW50ZXJpbmdTY29wZWRTaW5nbGV0b24pLFxuICAgICAgICAgICAgKHByZXZpb3VzSHlkcmF0YWJsZU9uRW50ZXJpbmdTY29wZWRTaW5nbGV0b24gPSBudWxsKSxcbiAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZmliZXIpKVxuICAgICAgICAgIDogKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSB0YWcpKVxuICAgICAgOiAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyXG4gICAgICAgICAgPyBnZXROZXh0SHlkcmF0YWJsZShmaWJlci5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpXG4gICAgICAgICAgOiBudWxsKTtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVzZXRIeWRyYXRpb25TdGF0ZSgpIHtcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbDtcbiAgaXNIeWRyYXRpbmcgPSAhMTtcbn1cbmZ1bmN0aW9uIHVwZ3JhZGVIeWRyYXRpb25FcnJvcnNUb1JlY292ZXJhYmxlKCkge1xuICB2YXIgcXVldWVkRXJyb3JzID0gaHlkcmF0aW9uRXJyb3JzO1xuICBudWxsICE9PSBxdWV1ZWRFcnJvcnMgJiZcbiAgICAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnNcbiAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gcXVldWVkRXJyb3JzKVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycy5wdXNoLmFwcGx5KFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgIHF1ZXVlZEVycm9yc1xuICAgICAgICApLFxuICAgIChoeWRyYXRpb25FcnJvcnMgPSBudWxsKSk7XG4gIHJldHVybiBxdWV1ZWRFcnJvcnM7XG59XG5mdW5jdGlvbiBxdWV1ZUh5ZHJhdGlvbkVycm9yKGVycm9yKSB7XG4gIG51bGwgPT09IGh5ZHJhdGlvbkVycm9yc1xuICAgID8gKGh5ZHJhdGlvbkVycm9ycyA9IFtlcnJvcl0pXG4gICAgOiBoeWRyYXRpb25FcnJvcnMucHVzaChlcnJvcik7XG59XG52YXIgdmFsdWVDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsLFxuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuZnVuY3Rpb24gcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXIsIGNvbnRleHQsIG5leHRWYWx1ZSkge1xuICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUpO1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBuZXh0VmFsdWU7XG59XG5mdW5jdGlvbiBwb3BQcm92aWRlcihjb250ZXh0KSB7XG4gIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IHZhbHVlQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcCh2YWx1ZUN1cnNvcik7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKHBhcmVudCwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCkge1xuICBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzXG4gICAgICA/ICgocGFyZW50LmNoaWxkTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSlcbiAgICAgIDogbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyAmIHJlbmRlckxhbmVzKSAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICBpZiAocGFyZW50ID09PSBwcm9wYWdhdGlvblJvb3QpIGJyZWFrO1xuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY29udGV4dHMsXG4gIHJlbmRlckxhbmVzLFxuICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWVcbikge1xuICB2YXIgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgbnVsbCAhPT0gZmliZXIgJiYgKGZpYmVyLnJldHVybiA9IHdvcmtJblByb2dyZXNzKTtcbiAgZm9yICg7IG51bGwgIT09IGZpYmVyOyApIHtcbiAgICB2YXIgbGlzdCA9IGZpYmVyLmRlcGVuZGVuY2llcztcbiAgICBpZiAobnVsbCAhPT0gbGlzdCkge1xuICAgICAgdmFyIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgbGlzdCA9IGxpc3QuZmlyc3RDb250ZXh0O1xuICAgICAgYTogZm9yICg7IG51bGwgIT09IGxpc3Q7ICkge1xuICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IGxpc3Q7XG4gICAgICAgIGxpc3QgPSBmaWJlcjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZXh0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICBpZiAoZGVwZW5kZW5jeS5jb250ZXh0ID09PSBjb250ZXh0c1tpXSkge1xuICAgICAgICAgICAgbGlzdC5sYW5lcyB8PSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPSBsaXN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgIG51bGwgIT09IGRlcGVuZGVuY3kgJiYgKGRlcGVuZGVuY3kubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChcbiAgICAgICAgICAgICAgbGlzdC5yZXR1cm4sXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZSB8fCAobmV4dEZpYmVyID0gbnVsbCk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgbGlzdCA9IGRlcGVuZGVuY3kubmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKDE4ID09PSBmaWJlci50YWcpIHtcbiAgICAgIG5leHRGaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICAgIGlmIChudWxsID09PSBuZXh0RmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQxKSk7XG4gICAgICBuZXh0RmliZXIubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICBsaXN0ID0gbmV4dEZpYmVyLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGxpc3QgJiYgKGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChuZXh0RmliZXIsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgIH0gZWxzZSBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gbmV4dEZpYmVyKSBuZXh0RmliZXIucmV0dXJuID0gZmliZXI7XG4gICAgZWxzZVxuICAgICAgZm9yIChuZXh0RmliZXIgPSBmaWJlcjsgbnVsbCAhPT0gbmV4dEZpYmVyOyApIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGZpYmVyID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgIGlmIChudWxsICE9PSBmaWJlcikge1xuICAgICAgICAgIGZpYmVyLnJldHVybiA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICAgICAgbmV4dEZpYmVyID0gZmliZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICBmaWJlciA9IG5leHRGaWJlcjtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIGZvciAoXG4gICAgdmFyIHBhcmVudCA9IHdvcmtJblByb2dyZXNzLCBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICExO1xuICAgIG51bGwgIT09IHBhcmVudDtcblxuICApIHtcbiAgICBpZiAoIWlzSW5zaWRlUHJvcGFnYXRpb25CYWlsb3V0KVxuICAgICAgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiA1MjQyODgpKSBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICEwO1xuICAgICAgZWxzZSBpZiAoMCAhPT0gKHBhcmVudC5mbGFncyAmIDI2MjE0NCkpIGJyZWFrO1xuICAgIGlmICgxMCA9PT0gcGFyZW50LnRhZykge1xuICAgICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBwYXJlbnQudHlwZTtcbiAgICAgICAgb2JqZWN0SXMocGFyZW50LnBlbmRpbmdQcm9wcy52YWx1ZSwgY3VycmVudFBhcmVudC52YWx1ZSkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQucHVzaChjb250ZXh0KSA6IChjdXJyZW50ID0gW2NvbnRleHRdKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJlbnQgPT09IGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IuY3VycmVudCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudFBhcmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzODcpKTtcbiAgICAgIGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICE9PVxuICAgICAgICBwYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIChudWxsICE9PSBjdXJyZW50XG4gICAgICAgICAgPyBjdXJyZW50LnB1c2goSG9zdFRyYW5zaXRpb25Db250ZXh0KVxuICAgICAgICAgIDogKGN1cnJlbnQgPSBbSG9zdFRyYW5zaXRpb25Db250ZXh0XSkpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgY3VycmVudCxcbiAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4gICAgKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjYyMTQ0O1xufVxuZnVuY3Rpb24gY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnREZXBlbmRlbmNpZXMpIHtcbiAgZm9yIChcbiAgICBjdXJyZW50RGVwZW5kZW5jaWVzID0gY3VycmVudERlcGVuZGVuY2llcy5maXJzdENvbnRleHQ7XG4gICAgbnVsbCAhPT0gY3VycmVudERlcGVuZGVuY2llcztcblxuICApIHtcbiAgICBpZiAoXG4gICAgICAhb2JqZWN0SXMoXG4gICAgICAgIGN1cnJlbnREZXBlbmRlbmNpZXMuY29udGV4dC5fY3VycmVudFZhbHVlLFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLm1lbW9pemVkVmFsdWVcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm4gITA7XG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMubmV4dDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gd29ya0luUHJvZ3Jlc3M7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzO1xuICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcyAmJiAod29ya0luUHJvZ3Jlc3MuZmlyc3RDb250ZXh0ID0gbnVsbCk7XG59XG5mdW5jdGlvbiByZWFkQ29udGV4dChjb250ZXh0KSB7XG4gIHJldHVybiByZWFkQ29udGV4dEZvckNvbnN1bWVyKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihjb25zdW1lciwgY29udGV4dCkge1xuICBudWxsID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxICYmIHByZXBhcmVUb1JlYWRDb250ZXh0KGNvbnN1bWVyKTtcbiAgcmV0dXJuIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHRGb3JDb25zdW1lcihjb25zdW1lciwgY29udGV4dCkge1xuICB2YXIgdmFsdWUgPSBjb250ZXh0Ll9jdXJyZW50VmFsdWU7XG4gIGNvbnRleHQgPSB7IGNvbnRleHQ6IGNvbnRleHQsIG1lbW9pemVkVmFsdWU6IHZhbHVlLCBuZXh0OiBudWxsIH07XG4gIGlmIChudWxsID09PSBsYXN0Q29udGV4dERlcGVuZGVuY3kpIHtcbiAgICBpZiAobnVsbCA9PT0gY29uc3VtZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzA4KSk7XG4gICAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY29udGV4dDtcbiAgICBjb25zdW1lci5kZXBlbmRlbmNpZXMgPSB7IGxhbmVzOiAwLCBmaXJzdENvbnRleHQ6IGNvbnRleHQgfTtcbiAgICBjb25zdW1lci5mbGFncyB8PSA1MjQyODg7XG4gIH0gZWxzZSBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBsYXN0Q29udGV4dERlcGVuZGVuY3kubmV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiB2YWx1ZTtcbn1cbnZhciBBYm9ydENvbnRyb2xsZXJMb2NhbCA9XG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEFib3J0Q29udHJvbGxlclxuICAgICAgPyBBYm9ydENvbnRyb2xsZXJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICAgICAgICAgIHNpZ25hbCA9ICh0aGlzLnNpZ25hbCA9IHtcbiAgICAgICAgICAgICAgYWJvcnRlZDogITEsXG4gICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpZ25hbC5hYm9ydGVkID0gITA7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICBzY2hlZHVsZUNhbGxiYWNrJDIgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgTm9ybWFsUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIENhY2hlQ29udGV4dCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIENvbnN1bWVyOiBudWxsLFxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWU6IG51bGwsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IG51bGwsXG4gICAgX3RocmVhZENvdW50OiAwXG4gIH07XG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiBuZXcgQWJvcnRDb250cm9sbGVyTG9jYWwoKSxcbiAgICBkYXRhOiBuZXcgTWFwKCksXG4gICAgcmVmQ291bnQ6IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VDYWNoZShjYWNoZSkge1xuICBjYWNoZS5yZWZDb3VudC0tO1xuICAwID09PSBjYWNoZS5yZWZDb3VudCAmJlxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMihOb3JtYWxQcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FjaGUuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIH0pO1xufVxudmFyIGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBudWxsLFxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwLFxuICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCB0aGVuYWJsZSkge1xuICBpZiAobnVsbCA9PT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycykge1xuICAgIHZhciBlbnRhbmdsZWRMaXN0ZW5lcnMgPSAoY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IFtdKTtcbiAgICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgZW50YW5nbGVkTGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50Kys7XG4gIHRoZW5hYmxlLnRoZW4ocGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSwgcGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUoKSB7XG4gIGlmIChcbiAgICAwID09PSAtLWN1cnJlbnRFbnRhbmdsZWRQZW5kaW5nQ291bnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzXG4gICkge1xuICAgIG51bGwgIT09IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSAmJlxuICAgICAgKGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycztcbiAgICBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkoKTtcbiAgfVxufVxuZnVuY3Rpb24gY2hhaW5UaGVuYWJsZVZhbHVlKHRoZW5hYmxlLCByZXN1bHQpIHtcbiAgdmFyIGxpc3RlbmVycyA9IFtdLFxuICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlID0ge1xuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgdGhlbmFibGUudGhlbihcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuYWJsZVdpdGhPdmVycmlkZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUudmFsdWUgPSByZXN1bHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkocmVzdWx0KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUucmVhc29uID0gZXJyb3I7XG4gICAgICBmb3IgKGVycm9yID0gMDsgZXJyb3IgPCBsaXN0ZW5lcnMubGVuZ3RoOyBlcnJvcisrKVxuICAgICAgICAoMCwgbGlzdGVuZXJzW2Vycm9yXSkodm9pZCAwKTtcbiAgICB9XG4gICk7XG4gIHJldHVybiB0aGVuYWJsZVdpdGhPdmVycmlkZTtcbn1cbnZhciBwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuUmVhY3RTaGFyZWRJbnRlcm5hbHMuUyA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSkge1xuICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICBlbnRhbmdsZUFzeW5jQWN0aW9uKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgbnVsbCAhPT0gcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbn07XG52YXIgcmVzdW1lZENhY2hlID0gY3JlYXRlQ3Vyc29yKG51bGwpO1xuZnVuY3Rpb24gcGVla0NhY2hlRnJvbVBvb2woKSB7XG4gIHZhciBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXIgPSByZXN1bWVkQ2FjaGUuY3VycmVudDtcbiAgcmV0dXJuIG51bGwgIT09IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgID8gY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3QucG9vbGVkQ2FjaGU7XG59XG5mdW5jdGlvbiBwdXNoVHJhbnNpdGlvbihvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcywgcHJldkNhY2hlUG9vbCkge1xuICBudWxsID09PSBwcmV2Q2FjaGVQb29sXG4gICAgPyBwdXNoKHJlc3VtZWRDYWNoZSwgcmVzdW1lZENhY2hlLmN1cnJlbnQpXG4gICAgOiBwdXNoKHJlc3VtZWRDYWNoZSwgcHJldkNhY2hlUG9vbC5wb29sKTtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbmRlZENhY2hlKCkge1xuICB2YXIgY2FjaGVGcm9tUG9vbCA9IHBlZWtDYWNoZUZyb21Qb29sKCk7XG4gIHJldHVybiBudWxsID09PSBjYWNoZUZyb21Qb29sXG4gICAgPyBudWxsXG4gICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IGNhY2hlRnJvbVBvb2wgfTtcbn1cbnZhciBTdXNwZW5zZUV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYwKSksXG4gIFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc0KSksXG4gIFN1c3BlbnNlQWN0aW9uRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1NDIpKSxcbiAgbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlID0geyB0aGVuOiBmdW5jdGlvbiAoKSB7fSB9O1xuZnVuY3Rpb24gaXNUaGVuYWJsZVJlc29sdmVkKHRoZW5hYmxlKSB7XG4gIHRoZW5hYmxlID0gdGhlbmFibGUuc3RhdHVzO1xuICByZXR1cm4gXCJmdWxmaWxsZWRcIiA9PT0gdGhlbmFibGUgfHwgXCJyZWplY3RlZFwiID09PSB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIG5vb3AkMygpIHt9XG5mdW5jdGlvbiB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpIHtcbiAgaW5kZXggPSB0aGVuYWJsZVN0YXRlW2luZGV4XTtcbiAgdm9pZCAwID09PSBpbmRleFxuICAgID8gdGhlbmFibGVTdGF0ZS5wdXNoKHRoZW5hYmxlKVxuICAgIDogaW5kZXggIT09IHRoZW5hYmxlICYmICh0aGVuYWJsZS50aGVuKG5vb3AkMywgbm9vcCQzKSwgKHRoZW5hYmxlID0gaW5kZXgpKTtcbiAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICB0aHJvdyAoXG4gICAgICAgICgodGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbiksXG4gICAgICAgIGNoZWNrSWZVc2VXcmFwcGVkSW5Bc3luY0NhdGNoKHRoZW5hYmxlU3RhdGUpLFxuICAgICAgICB0aGVuYWJsZVN0YXRlKVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGVuYWJsZS5zdGF0dXMpIHRoZW5hYmxlLnRoZW4obm9vcCQzLCBub29wJDMpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHRoZW5hYmxlU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gICAgICAgIGlmIChudWxsICE9PSB0aGVuYWJsZVN0YXRlICYmIDEwMCA8IHRoZW5hYmxlU3RhdGUuc2hlbGxTdXNwZW5kQ291bnRlcilcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4MikpO1xuICAgICAgICB0aGVuYWJsZVN0YXRlID0gdGhlbmFibGU7XG4gICAgICAgIHRoZW5hYmxlU3RhdGUuc3RhdHVzID0gXCJwZW5kaW5nXCI7XG4gICAgICAgIHRoZW5hYmxlU3RhdGUudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHZhciBmdWxmaWxsZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgICAgICAgICBmdWxmaWxsZWRUaGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICAgICAgICBmdWxmaWxsZWRUaGVuYWJsZS52YWx1ZSA9IGZ1bGZpbGxlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICB2YXIgcmVqZWN0ZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgICAgICAgICByZWplY3RlZFRoZW5hYmxlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5yZWFzb24gPSBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICB0aHJvdyAoXG4gICAgICAgICAgICAoKHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb24pLFxuICAgICAgICAgICAgY2hlY2tJZlVzZVdyYXBwZWRJbkFzeW5jQ2F0Y2godGhlbmFibGVTdGF0ZSksXG4gICAgICAgICAgICB0aGVuYWJsZVN0YXRlKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBzdXNwZW5kZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgdGhyb3cgU3VzcGVuc2VFeGNlcHRpb247XG4gIH1cbn1cbnZhciBzdXNwZW5kZWRUaGVuYWJsZSA9IG51bGw7XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFRoZW5hYmxlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1OSkpO1xuICB2YXIgdGhlbmFibGUgPSBzdXNwZW5kZWRUaGVuYWJsZTtcbiAgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBjaGVja0lmVXNlV3JhcHBlZEluQXN5bmNDYXRjaChyZWplY3RlZFJlYXNvbikge1xuICBpZiAoXG4gICAgcmVqZWN0ZWRSZWFzb24gPT09IFN1c3BlbnNlRXhjZXB0aW9uIHx8XG4gICAgcmVqZWN0ZWRSZWFzb24gPT09IFN1c3BlbnNlQWN0aW9uRXhjZXB0aW9uXG4gIClcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4MykpO1xufVxudmFyIGhhc0ZvcmNlVXBkYXRlID0gITE7XG5mdW5jdGlvbiBpbml0aWFsaXplVXBkYXRlUXVldWUoZmliZXIpIHtcbiAgZmliZXIudXBkYXRlUXVldWUgPSB7XG4gICAgYmFzZVN0YXRlOiBmaWJlci5tZW1vaXplZFN0YXRlLFxuICAgIGZpcnN0QmFzZVVwZGF0ZTogbnVsbCxcbiAgICBsYXN0QmFzZVVwZGF0ZTogbnVsbCxcbiAgICBzaGFyZWQ6IHsgcGVuZGluZzogbnVsbCwgbGFuZXM6IDAsIGhpZGRlbkNhbGxiYWNrczogbnVsbCB9LFxuICAgIGNhbGxiYWNrczogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICBjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPT09IGN1cnJlbnQgJiZcbiAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSB7XG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnQuYmFzZVN0YXRlLFxuICAgICAgZmlyc3RCYXNlVXBkYXRlOiBjdXJyZW50LmZpcnN0QmFzZVVwZGF0ZSxcbiAgICAgIGxhc3RCYXNlVXBkYXRlOiBjdXJyZW50Lmxhc3RCYXNlVXBkYXRlLFxuICAgICAgc2hhcmVkOiBjdXJyZW50LnNoYXJlZCxcbiAgICAgIGNhbGxiYWNrczogbnVsbFxuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVXBkYXRlKGxhbmUpIHtcbiAgcmV0dXJuIHsgbGFuZTogbGFuZSwgdGFnOiAwLCBwYXlsb2FkOiBudWxsLCBjYWxsYmFjazogbnVsbCwgbmV4dDogbnVsbCB9O1xufVxuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShmaWJlciwgdXBkYXRlLCBsYW5lKSB7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCA9PT0gdXBkYXRlUXVldWUpIHJldHVybiBudWxsO1xuICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLnNoYXJlZDtcbiAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgMikpIHtcbiAgICB2YXIgcGVuZGluZyA9IHVwZGF0ZVF1ZXVlLnBlbmRpbmc7XG4gICAgbnVsbCA9PT0gcGVuZGluZ1xuICAgICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gICAgdXBkYXRlUXVldWUucGVuZGluZyA9IHVwZGF0ZTtcbiAgICB1cGRhdGUgPSBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbiAgICBtYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdChmaWJlciwgbnVsbCwgbGFuZSk7XG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfVxuICBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHVwZGF0ZVF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICByZXR1cm4gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG59XG5mdW5jdGlvbiBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QsIGZpYmVyLCBsYW5lKSB7XG4gIGZpYmVyID0gZmliZXIudXBkYXRlUXVldWU7XG4gIGlmIChudWxsICE9PSBmaWJlciAmJiAoKGZpYmVyID0gZmliZXIuc2hhcmVkKSwgMCAhPT0gKGxhbmUgJiA0MTk0MDQ4KSkpIHtcbiAgICB2YXIgcXVldWVMYW5lcyA9IGZpYmVyLmxhbmVzO1xuICAgIHF1ZXVlTGFuZXMgJj0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gICAgbGFuZSB8PSBxdWV1ZUxhbmVzO1xuICAgIGZpYmVyLmxhbmVzID0gbGFuZTtcbiAgICBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBsYW5lKTtcbiAgfVxufVxuZnVuY3Rpb24gZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHdvcmtJblByb2dyZXNzLCBjYXB0dXJlZFVwZGF0ZSkge1xuICB2YXIgcXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSxcbiAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLCBxdWV1ZSA9PT0gY3VycmVudClcbiAgKSB7XG4gICAgdmFyIG5ld0ZpcnN0ID0gbnVsbCxcbiAgICAgIG5ld0xhc3QgPSBudWxsO1xuICAgIHF1ZXVlID0gcXVldWUuZmlyc3RCYXNlVXBkYXRlO1xuICAgIGlmIChudWxsICE9PSBxdWV1ZSkge1xuICAgICAgZG8ge1xuICAgICAgICB2YXIgY2xvbmUgPSB7XG4gICAgICAgICAgbGFuZTogcXVldWUubGFuZSxcbiAgICAgICAgICB0YWc6IHF1ZXVlLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBxdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgIGNhbGxiYWNrOiBudWxsLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgbnVsbCA9PT0gbmV3TGFzdFxuICAgICAgICAgID8gKG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNsb25lKVxuICAgICAgICAgIDogKG5ld0xhc3QgPSBuZXdMYXN0Lm5leHQgPSBjbG9uZSk7XG4gICAgICAgIHF1ZXVlID0gcXVldWUubmV4dDtcbiAgICAgIH0gd2hpbGUgKG51bGwgIT09IHF1ZXVlKTtcbiAgICAgIG51bGwgPT09IG5ld0xhc3RcbiAgICAgICAgPyAobmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2FwdHVyZWRVcGRhdGUpXG4gICAgICAgIDogKG5ld0xhc3QgPSBuZXdMYXN0Lm5leHQgPSBjYXB0dXJlZFVwZGF0ZSk7XG4gICAgfSBlbHNlIG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlO1xuICAgIHF1ZXVlID0ge1xuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50LmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogbmV3Rmlyc3QsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogbmV3TGFzdCxcbiAgICAgIHNoYXJlZDogY3VycmVudC5zaGFyZWQsXG4gICAgICBjYWxsYmFja3M6IGN1cnJlbnQuY2FsbGJhY2tzXG4gICAgfTtcbiAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IHF1ZXVlO1xuICAgIHJldHVybjtcbiAgfVxuICB3b3JrSW5Qcm9ncmVzcyA9IHF1ZXVlLmxhc3RCYXNlVXBkYXRlO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1xuICAgID8gKHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSA9IGNhcHR1cmVkVXBkYXRlKVxuICAgIDogKHdvcmtJblByb2dyZXNzLm5leHQgPSBjYXB0dXJlZFVwZGF0ZSk7XG4gIHF1ZXVlLmxhc3RCYXNlVXBkYXRlID0gY2FwdHVyZWRVcGRhdGU7XG59XG52YXIgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiA9ICExO1xuZnVuY3Rpb24gc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpIHtcbiAgaWYgKGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24pIHtcbiAgICB2YXIgZW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGU7XG4gICAgaWYgKG51bGwgIT09IGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlKSB0aHJvdyBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZVF1ZXVlKFxuICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCxcbiAgcHJvcHMsXG4gIGluc3RhbmNlJGpzY29tcCQwLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMTtcbiAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MkanNjb21wJDAudXBkYXRlUXVldWU7XG4gIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gIHZhciBmaXJzdEJhc2VVcGRhdGUgPSBxdWV1ZS5maXJzdEJhc2VVcGRhdGUsXG4gICAgbGFzdEJhc2VVcGRhdGUgPSBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSxcbiAgICBwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZztcbiAgaWYgKG51bGwgIT09IHBlbmRpbmdRdWV1ZSkge1xuICAgIHF1ZXVlLnNoYXJlZC5wZW5kaW5nID0gbnVsbDtcbiAgICB2YXIgbGFzdFBlbmRpbmdVcGRhdGUgPSBwZW5kaW5nUXVldWUsXG4gICAgICBmaXJzdFBlbmRpbmdVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0O1xuICAgIGxhc3RQZW5kaW5nVXBkYXRlLm5leHQgPSBudWxsO1xuICAgIG51bGwgPT09IGxhc3RCYXNlVXBkYXRlXG4gICAgICA/IChmaXJzdEJhc2VVcGRhdGUgPSBmaXJzdFBlbmRpbmdVcGRhdGUpXG4gICAgICA6IChsYXN0QmFzZVVwZGF0ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlKTtcbiAgICBsYXN0QmFzZVVwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlO1xuICAgIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MkanNjb21wJDAuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgKHBlbmRpbmdRdWV1ZSA9IGN1cnJlbnQubGFzdEJhc2VVcGRhdGUpLFxuICAgICAgcGVuZGluZ1F1ZXVlICE9PSBsYXN0QmFzZVVwZGF0ZSAmJlxuICAgICAgICAobnVsbCA9PT0gcGVuZGluZ1F1ZXVlXG4gICAgICAgICAgPyAoY3VycmVudC5maXJzdEJhc2VVcGRhdGUgPSBmaXJzdFBlbmRpbmdVcGRhdGUpXG4gICAgICAgICAgOiAocGVuZGluZ1F1ZXVlLm5leHQgPSBmaXJzdFBlbmRpbmdVcGRhdGUpLFxuICAgICAgICAoY3VycmVudC5sYXN0QmFzZVVwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlKSkpO1xuICB9XG4gIGlmIChudWxsICE9PSBmaXJzdEJhc2VVcGRhdGUpIHtcbiAgICB2YXIgbmV3U3RhdGUgPSBxdWV1ZS5iYXNlU3RhdGU7XG4gICAgbGFzdEJhc2VVcGRhdGUgPSAwO1xuICAgIGN1cnJlbnQgPSBmaXJzdFBlbmRpbmdVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZSA9IG51bGw7XG4gICAgcGVuZGluZ1F1ZXVlID0gZmlyc3RCYXNlVXBkYXRlO1xuICAgIGRvIHtcbiAgICAgIHZhciB1cGRhdGVMYW5lID0gcGVuZGluZ1F1ZXVlLmxhbmUgJiAtNTM2ODcwOTEzLFxuICAgICAgICBpc0hpZGRlblVwZGF0ZSA9IHVwZGF0ZUxhbmUgIT09IHBlbmRpbmdRdWV1ZS5sYW5lO1xuICAgICAgaWYgKFxuICAgICAgICBpc0hpZGRlblVwZGF0ZVxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICAgICA6IChyZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICApIHtcbiAgICAgICAgMCAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICAgICAgIHVwZGF0ZUxhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgKGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMCk7XG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQubmV4dCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICAgIHRhZzogcGVuZGluZ1F1ZXVlLnRhZyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogcGVuZGluZ1F1ZXVlLnBheWxvYWQsXG4gICAgICAgICAgICAgIGNhbGxiYWNrOiBudWxsLFxuICAgICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgYToge1xuICAgICAgICAgIHZhciB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLFxuICAgICAgICAgICAgdXBkYXRlID0gcGVuZGluZ1F1ZXVlO1xuICAgICAgICAgIHVwZGF0ZUxhbmUgPSBwcm9wcztcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZSRqc2NvbXAkMDtcbiAgICAgICAgICBzd2l0Y2ggKHVwZGF0ZS50YWcpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGUucGF5bG9hZDtcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5jYWxsKGluc3RhbmNlLCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSk7XG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIC02NTUzNykgfCAxMjg7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgICAgICAgIHVwZGF0ZUxhbmUgPVxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdvcmtJblByb2dyZXNzXG4gICAgICAgICAgICAgICAgICA/IHdvcmtJblByb2dyZXNzLmNhbGwoaW5zdGFuY2UsIG5ld1N0YXRlLCB1cGRhdGVMYW5lKVxuICAgICAgICAgICAgICAgICAgOiB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHVwZGF0ZUxhbmUgfHwgdm9pZCAwID09PSB1cGRhdGVMYW5lKSBicmVhayBhO1xuICAgICAgICAgICAgICBuZXdTdGF0ZSA9IGFzc2lnbih7fSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBoYXNGb3JjZVVwZGF0ZSA9ICEwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVMYW5lID0gcGVuZGluZ1F1ZXVlLmNhbGxiYWNrO1xuICAgICAgICBudWxsICE9PSB1cGRhdGVMYW5lICYmXG4gICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5mbGFncyB8PSA2NCksXG4gICAgICAgICAgaXNIaWRkZW5VcGRhdGUgJiYgKHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmZsYWdzIHw9IDgxOTIpLFxuICAgICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHF1ZXVlLmNhbGxiYWNrcyksXG4gICAgICAgICAgbnVsbCA9PT0gaXNIaWRkZW5VcGRhdGVcbiAgICAgICAgICAgID8gKHF1ZXVlLmNhbGxiYWNrcyA9IFt1cGRhdGVMYW5lXSlcbiAgICAgICAgICAgIDogaXNIaWRkZW5VcGRhdGUucHVzaCh1cGRhdGVMYW5lKSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgKGlzSGlkZGVuVXBkYXRlID0ge1xuICAgICAgICAgIGxhbmU6IHVwZGF0ZUxhbmUsXG4gICAgICAgICAgdGFnOiBwZW5kaW5nUXVldWUudGFnLFxuICAgICAgICAgIHBheWxvYWQ6IHBlbmRpbmdRdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgIGNhbGxiYWNrOiBwZW5kaW5nUXVldWUuY2FsbGJhY2ssXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9KSxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgICA/ICgoZmlyc3RQZW5kaW5nVXBkYXRlID0gY3VycmVudCA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAgICAgKGxhc3RQZW5kaW5nVXBkYXRlID0gbmV3U3RhdGUpKVxuICAgICAgICAgICAgOiAoY3VycmVudCA9IGN1cnJlbnQubmV4dCA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAobGFzdEJhc2VVcGRhdGUgfD0gdXBkYXRlTGFuZSk7XG4gICAgICBwZW5kaW5nUXVldWUgPSBwZW5kaW5nUXVldWUubmV4dDtcbiAgICAgIGlmIChudWxsID09PSBwZW5kaW5nUXVldWUpXG4gICAgICAgIGlmICgoKHBlbmRpbmdRdWV1ZSA9IHF1ZXVlLnNoYXJlZC5wZW5kaW5nKSwgbnVsbCA9PT0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZWxzZVxuICAgICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHBlbmRpbmdRdWV1ZSksXG4gICAgICAgICAgICAocGVuZGluZ1F1ZXVlID0gaXNIaWRkZW5VcGRhdGUubmV4dCksXG4gICAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUubmV4dCA9IG51bGwpLFxuICAgICAgICAgICAgKHF1ZXVlLmxhc3RCYXNlVXBkYXRlID0gaXNIaWRkZW5VcGRhdGUpLFxuICAgICAgICAgICAgKHF1ZXVlLnNoYXJlZC5wZW5kaW5nID0gbnVsbCk7XG4gICAgfSB3aGlsZSAoMSk7XG4gICAgbnVsbCA9PT0gY3VycmVudCAmJiAobGFzdFBlbmRpbmdVcGRhdGUgPSBuZXdTdGF0ZSk7XG4gICAgcXVldWUuYmFzZVN0YXRlID0gbGFzdFBlbmRpbmdVcGRhdGU7XG4gICAgcXVldWUuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlO1xuICAgIHF1ZXVlLmxhc3RCYXNlVXBkYXRlID0gY3VycmVudDtcbiAgICBudWxsID09PSBmaXJzdEJhc2VVcGRhdGUgJiYgKHF1ZXVlLnNoYXJlZC5sYW5lcyA9IDApO1xuICAgIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBsYXN0QmFzZVVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5sYW5lcyA9IGxhc3RCYXNlVXBkYXRlO1xuICAgIHdvcmtJblByb2dyZXNzJGpzY29tcCQwLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgfVxufVxuZnVuY3Rpb24gY2FsbENhbGxiYWNrKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjYWxsYmFjaylcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE5MSwgY2FsbGJhY2spKTtcbiAgY2FsbGJhY2suY2FsbChjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNvbW1pdENhbGxiYWNrcyh1cGRhdGVRdWV1ZSwgY29udGV4dCkge1xuICB2YXIgY2FsbGJhY2tzID0gdXBkYXRlUXVldWUuY2FsbGJhY2tzO1xuICBpZiAobnVsbCAhPT0gY2FsbGJhY2tzKVxuICAgIGZvciAoXG4gICAgICB1cGRhdGVRdWV1ZS5jYWxsYmFja3MgPSBudWxsLCB1cGRhdGVRdWV1ZSA9IDA7XG4gICAgICB1cGRhdGVRdWV1ZSA8IGNhbGxiYWNrcy5sZW5ndGg7XG4gICAgICB1cGRhdGVRdWV1ZSsrXG4gICAgKVxuICAgICAgY2FsbENhbGxiYWNrKGNhbGxiYWNrc1t1cGRhdGVRdWV1ZV0sIGNvbnRleHQpO1xufVxudmFyIGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIHB1c2hIaWRkZW5Db250ZXh0KGZpYmVyLCBjb250ZXh0KSB7XG4gIGZpYmVyID0gZW50YW5nbGVkUmVuZGVyTGFuZXM7XG4gIHB1c2gocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLCBmaWJlcik7XG4gIHB1c2goY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciwgY29udGV4dCk7XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gZmliZXIgfCBjb250ZXh0LmJhc2VMYW5lcztcbn1cbmZ1bmN0aW9uIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSB7XG4gIHB1c2gocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLCBlbnRhbmdsZWRSZW5kZXJMYW5lcyk7XG4gIHB1c2goY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciwgY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcEhpZGRlbkNvbnRleHQoKSB7XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gcHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yKTtcbiAgcG9wKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvcik7XG59XG52YXIgcmVuZGVyTGFuZXMgPSAwLFxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGwsXG4gIGN1cnJlbnRIb29rID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbCxcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExLFxuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMSxcbiAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgPSAhMSxcbiAgbG9jYWxJZENvdW50ZXIgPSAwLFxuICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMCxcbiAgdGhlbmFibGVTdGF0ZSQxID0gbnVsbCxcbiAgZ2xvYmFsQ2xpZW50SWRDb3VudGVyID0gMDtcbmZ1bmN0aW9uIHRocm93SW52YWxpZEhvb2tFcnJvcigpIHtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjEpKTtcbn1cbmZ1bmN0aW9uIGFyZUhvb2tJbnB1dHNFcXVhbChuZXh0RGVwcywgcHJldkRlcHMpIHtcbiAgaWYgKG51bGwgPT09IHByZXZEZXBzKSByZXR1cm4gITE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkRlcHMubGVuZ3RoICYmIGkgPCBuZXh0RGVwcy5sZW5ndGg7IGkrKylcbiAgICBpZiAoIW9iamVjdElzKG5leHREZXBzW2ldLCBwcmV2RGVwc1tpXSkpIHJldHVybiAhMTtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBwcm9wcyxcbiAgc2Vjb25kQXJnLFxuICBuZXh0UmVuZGVyTGFuZXNcbikge1xuICByZW5kZXJMYW5lcyA9IG5leHRSZW5kZXJMYW5lcztcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICBudWxsID09PSBjdXJyZW50IHx8IG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlO1xuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExO1xuICBuZXh0UmVuZGVyTGFuZXMgPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITE7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyAmJlxuICAgIChuZXh0UmVuZGVyTGFuZXMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgQ29tcG9uZW50LFxuICAgICAgcHJvcHMsXG4gICAgICBzZWNvbmRBcmdcbiAgICApKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIHJldHVybiBuZXh0UmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KSB7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHZhciBkaWRSZW5kZXJUb29GZXdIb29rcyA9IG51bGwgIT09IGN1cnJlbnRIb29rICYmIG51bGwgIT09IGN1cnJlbnRIb29rLm5leHQ7XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSAhMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSA9IDA7XG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGw7XG4gIGlmIChkaWRSZW5kZXJUb29GZXdIb29rcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDApKTtcbiAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgIGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQpICYmXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG59XG5mdW5jdGlvbiByZW5kZXJXaXRoSG9va3NBZ2Fpbih3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBwcm9wcywgc2Vjb25kQXJnKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHZhciBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG4gIGRvIHtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgJiYgKHRoZW5hYmxlU3RhdGUkMSA9IG51bGwpO1xuICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9ICExO1xuICAgIGlmICgyNSA8PSBudW1iZXJPZlJlUmVuZGVycykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDEpKTtcbiAgICBudW1iZXJPZlJlUmVuZGVycyArPSAxO1xuICAgIHdvcmtJblByb2dyZXNzSG9vayA9IGN1cnJlbnRIb29rID0gbnVsbDtcbiAgICBpZiAobnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgICBjaGlsZHJlbi5sYXN0RWZmZWN0ID0gbnVsbDtcbiAgICAgIGNoaWxkcmVuLmV2ZW50cyA9IG51bGw7XG4gICAgICBjaGlsZHJlbi5zdG9yZXMgPSBudWxsO1xuICAgICAgbnVsbCAhPSBjaGlsZHJlbi5tZW1vQ2FjaGUgJiYgKGNoaWxkcmVuLm1lbW9DYWNoZS5pbmRleCA9IDApO1xuICAgIH1cbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlcjtcbiAgICBjaGlsZHJlbiA9IENvbXBvbmVudChwcm9wcywgc2Vjb25kQXJnKTtcbiAgfSB3aGlsZSAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzKTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuZnVuY3Rpb24gVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCgpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5ILFxuICAgIG1heWJlVGhlbmFibGUgPSBkaXNwYXRjaGVyLnVzZVN0YXRlKClbMF07XG4gIG1heWJlVGhlbmFibGUgPVxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlVGhlbmFibGUudGhlblxuICAgICAgPyB1c2VUaGVuYWJsZShtYXliZVRoZW5hYmxlKVxuICAgICAgOiBtYXliZVRoZW5hYmxlO1xuICBkaXNwYXRjaGVyID0gZGlzcGF0Y2hlci51c2VTdGF0ZSgpWzBdO1xuICAobnVsbCAhPT0gY3VycmVudEhvb2sgPyBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlIDogbnVsbCkgIT09IGRpc3BhdGNoZXIgJiZcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIuZmxhZ3MgfD0gMTAyNCk7XG4gIHJldHVybiBtYXliZVRoZW5hYmxlO1xufVxuZnVuY3Rpb24gY2hlY2tEaWRSZW5kZXJJZEhvb2soKSB7XG4gIHZhciBkaWRSZW5kZXJJZEhvb2sgPSAwICE9PSBsb2NhbElkQ291bnRlcjtcbiAgbG9jYWxJZENvdW50ZXIgPSAwO1xuICByZXR1cm4gZGlkUmVuZGVySWRIb29rO1xufVxuZnVuY3Rpb24gYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yMDUzO1xuICBjdXJyZW50LmxhbmVzICY9IH5sYW5lcztcbn1cbmZ1bmN0aW9uIHJlc2V0SG9va3NPblVud2luZCh3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIGZvciAoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcztcblxuICAgICkge1xuICAgICAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MucXVldWU7XG4gICAgICBudWxsICE9PSBxdWV1ZSAmJiAocXVldWUucGVuZGluZyA9IG51bGwpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5uZXh0O1xuICAgIH1cbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIH1cbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSBsb2NhbElkQ291bnRlciA9IDA7XG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGw7XG59XG5mdW5jdGlvbiBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpIHtcbiAgdmFyIGhvb2sgPSB7XG4gICAgbWVtb2l6ZWRTdGF0ZTogbnVsbCxcbiAgICBiYXNlU3RhdGU6IG51bGwsXG4gICAgYmFzZVF1ZXVlOiBudWxsLFxuICAgIHF1ZXVlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgPyAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9IGhvb2spXG4gICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBob29rKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRIb29rKSB7XG4gICAgdmFyIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmFsdGVybmF0ZTtcbiAgICBuZXh0Q3VycmVudEhvb2sgPVxuICAgICAgbnVsbCAhPT0gbmV4dEN1cnJlbnRIb29rID8gbmV4dEN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUgOiBudWxsO1xuICB9IGVsc2UgbmV4dEN1cnJlbnRIb29rID0gY3VycmVudEhvb2submV4dDtcbiAgdmFyIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPVxuICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5tZW1vaXplZFN0YXRlXG4gICAgICA6IHdvcmtJblByb2dyZXNzSG9vay5uZXh0O1xuICBpZiAobnVsbCAhPT0gbmV4dFdvcmtJblByb2dyZXNzSG9vaylcbiAgICAod29ya0luUHJvZ3Jlc3NIb29rID0gbmV4dFdvcmtJblByb2dyZXNzSG9vayksXG4gICAgICAoY3VycmVudEhvb2sgPSBuZXh0Q3VycmVudEhvb2spO1xuICBlbHNlIHtcbiAgICBpZiAobnVsbCA9PT0gbmV4dEN1cnJlbnRIb29rKSB7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIuYWx0ZXJuYXRlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2NykpO1xuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTApKTtcbiAgICB9XG4gICAgY3VycmVudEhvb2sgPSBuZXh0Q3VycmVudEhvb2s7XG4gICAgbmV4dEN1cnJlbnRIb29rID0ge1xuICAgICAgbWVtb2l6ZWRTdGF0ZTogY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudEhvb2suYmFzZVN0YXRlLFxuICAgICAgYmFzZVF1ZXVlOiBjdXJyZW50SG9vay5iYXNlUXVldWUsXG4gICAgICBxdWV1ZTogY3VycmVudEhvb2sucXVldWUsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPVxuICAgICAgICAgIG5leHRDdXJyZW50SG9vaylcbiAgICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NIb29rO1xufVxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpIHtcbiAgcmV0dXJuIHsgbGFzdEVmZmVjdDogbnVsbCwgZXZlbnRzOiBudWxsLCBzdG9yZXM6IG51bGwsIG1lbW9DYWNoZTogbnVsbCB9O1xufVxuZnVuY3Rpb24gdXNlVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXIkMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSArPSAxO1xuICBudWxsID09PSB0aGVuYWJsZVN0YXRlJDEgJiYgKHRoZW5hYmxlU3RhdGUkMSA9IFtdKTtcbiAgdGhlbmFibGUgPSB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlJDEsIHRoZW5hYmxlLCBpbmRleCk7XG4gIGluZGV4ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXI7XG4gIG51bGwgPT09XG4gICAgKG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICA6IHdvcmtJblByb2dyZXNzSG9vay5uZXh0KSAmJlxuICAgICgoaW5kZXggPSBpbmRleC5hbHRlcm5hdGUpLFxuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICAgIG51bGwgPT09IGluZGV4IHx8IG51bGwgPT09IGluZGV4Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGUpKTtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gdXNlKHVzYWJsZSkge1xuICBpZiAobnVsbCAhPT0gdXNhYmxlICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1c2FibGUpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdXNhYmxlLnRoZW4pIHJldHVybiB1c2VUaGVuYWJsZSh1c2FibGUpO1xuICAgIGlmICh1c2FibGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSkgcmV0dXJuIHJlYWRDb250ZXh0KHVzYWJsZSk7XG4gIH1cbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzgsIFN0cmluZyh1c2FibGUpKSk7XG59XG5mdW5jdGlvbiB1c2VNZW1vQ2FjaGUoc2l6ZSkge1xuICB2YXIgbWVtb0NhY2hlID0gbnVsbCxcbiAgICB1cGRhdGVRdWV1ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBudWxsICE9PSB1cGRhdGVRdWV1ZSAmJiAobWVtb0NhY2hlID0gdXBkYXRlUXVldWUubWVtb0NhY2hlKTtcbiAgaWYgKG51bGwgPT0gbWVtb0NhY2hlKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5hbHRlcm5hdGU7XG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgKChjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICgoY3VycmVudCA9IGN1cnJlbnQubWVtb0NhY2hlKSxcbiAgICAgICAgbnVsbCAhPSBjdXJyZW50ICYmXG4gICAgICAgICAgKG1lbW9DYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IGN1cnJlbnQuZGF0YS5tYXAoZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBhcnJheS5zbGljZSgpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpbmRleDogMFxuICAgICAgICAgIH0pKSk7XG4gIH1cbiAgbnVsbCA9PSBtZW1vQ2FjaGUgJiYgKG1lbW9DYWNoZSA9IHsgZGF0YTogW10sIGluZGV4OiAwIH0pO1xuICBudWxsID09PSB1cGRhdGVRdWV1ZSAmJlxuICAgICgodXBkYXRlUXVldWUgPSBjcmVhdGVGdW5jdGlvbkNvbXBvbmVudFVwZGF0ZVF1ZXVlKCkpLFxuICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlKSk7XG4gIHVwZGF0ZVF1ZXVlLm1lbW9DYWNoZSA9IG1lbW9DYWNoZTtcbiAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdO1xuICBpZiAodm9pZCAwID09PSB1cGRhdGVRdWV1ZSlcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdID0gQXJyYXkoc2l6ZSksIGN1cnJlbnQgPSAwO1xuICAgICAgY3VycmVudCA8IHNpemU7XG4gICAgICBjdXJyZW50KytcbiAgICApXG4gICAgICB1cGRhdGVRdWV1ZVtjdXJyZW50XSA9IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw7XG4gIG1lbW9DYWNoZS5pbmRleCsrO1xuICByZXR1cm4gdXBkYXRlUXVldWU7XG59XG5mdW5jdGlvbiBiYXNpY1N0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb24gPyBhY3Rpb24oc3RhdGUpIDogYWN0aW9uO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50SG9vaywgcmVkdWNlcik7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50LCByZWR1Y2VyKSB7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWU7XG4gIGlmIChudWxsID09PSBxdWV1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTEpKTtcbiAgcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBiYXNlUXVldWUgPSBob29rLmJhc2VRdWV1ZSxcbiAgICBwZW5kaW5nUXVldWUgPSBxdWV1ZS5wZW5kaW5nO1xuICBpZiAobnVsbCAhPT0gcGVuZGluZ1F1ZXVlKSB7XG4gICAgaWYgKG51bGwgIT09IGJhc2VRdWV1ZSkge1xuICAgICAgdmFyIGJhc2VGaXJzdCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgICAgYmFzZVF1ZXVlLm5leHQgPSBwZW5kaW5nUXVldWUubmV4dDtcbiAgICAgIHBlbmRpbmdRdWV1ZS5uZXh0ID0gYmFzZUZpcnN0O1xuICAgIH1cbiAgICBjdXJyZW50LmJhc2VRdWV1ZSA9IGJhc2VRdWV1ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICBxdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgfVxuICBwZW5kaW5nUXVldWUgPSBob29rLmJhc2VTdGF0ZTtcbiAgaWYgKG51bGwgPT09IGJhc2VRdWV1ZSkgaG9vay5tZW1vaXplZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICBlbHNlIHtcbiAgICBjdXJyZW50ID0gYmFzZVF1ZXVlLm5leHQ7XG4gICAgdmFyIG5ld0Jhc2VRdWV1ZUZpcnN0ID0gKGJhc2VGaXJzdCA9IG51bGwpLFxuICAgICAgbmV3QmFzZVF1ZXVlTGFzdCA9IG51bGwsXG4gICAgICB1cGRhdGUgPSBjdXJyZW50LFxuICAgICAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQzMiA9ICExO1xuICAgIGRvIHtcbiAgICAgIHZhciB1cGRhdGVMYW5lID0gdXBkYXRlLmxhbmUgJiAtNTM2ODcwOTEzO1xuICAgICAgaWYgKFxuICAgICAgICB1cGRhdGVMYW5lICE9PSB1cGRhdGUubGFuZVxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICAgICA6IChyZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJldmVydExhbmUgPSB1cGRhdGUucmV2ZXJ0TGFuZTtcbiAgICAgICAgaWYgKDAgPT09IHJldmVydExhbmUpXG4gICAgICAgICAgbnVsbCAhPT0gbmV3QmFzZVF1ZXVlTGFzdCAmJlxuICAgICAgICAgICAgKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPVxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFuZTogMCxcbiAgICAgICAgICAgICAgICByZXZlcnRMYW5lOiAwLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdXBkYXRlTGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgICAgKGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kMzIgPSAhMCk7XG4gICAgICAgIGVsc2UgaWYgKChyZW5kZXJMYW5lcyAmIHJldmVydExhbmUpID09PSByZXZlcnRMYW5lKSB7XG4gICAgICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgICAgICAgcmV2ZXJ0TGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDMyID0gITApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAodXBkYXRlTGFuZSA9IHtcbiAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICByZXZlcnRMYW5lOiB1cGRhdGUucmV2ZXJ0TGFuZSxcbiAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IHVwZGF0ZUxhbmUpLFxuICAgICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmxhbmVzIHw9IHJldmVydExhbmUpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSByZXZlcnRMYW5lKTtcbiAgICAgICAgdXBkYXRlTGFuZSA9IHVwZGF0ZS5hY3Rpb247XG4gICAgICAgIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWICYmXG4gICAgICAgICAgcmVkdWNlcihwZW5kaW5nUXVldWUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICBwZW5kaW5nUXVldWUgPSB1cGRhdGUuaGFzRWFnZXJTdGF0ZVxuICAgICAgICAgID8gdXBkYXRlLmVhZ2VyU3RhdGVcbiAgICAgICAgICA6IHJlZHVjZXIocGVuZGluZ1F1ZXVlLCB1cGRhdGVMYW5lKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICAocmV2ZXJ0TGFuZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHJldmVydExhbmU6IHVwZGF0ZS5yZXZlcnRMYW5lLFxuICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH0pLFxuICAgICAgICAgIG51bGwgPT09IG5ld0Jhc2VRdWV1ZUxhc3RcbiAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICA6IChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmxhbmVzIHw9IHVwZGF0ZUxhbmUpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gdXBkYXRlTGFuZSk7XG4gICAgICB1cGRhdGUgPSB1cGRhdGUubmV4dDtcbiAgICB9IHdoaWxlIChudWxsICE9PSB1cGRhdGUgJiYgdXBkYXRlICE9PSBjdXJyZW50KTtcbiAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICA/IChiYXNlRmlyc3QgPSBwZW5kaW5nUXVldWUpXG4gICAgICA6IChuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSBuZXdCYXNlUXVldWVGaXJzdCk7XG4gICAgaWYgKFxuICAgICAgIW9iamVjdElzKHBlbmRpbmdRdWV1ZSwgaG9vay5tZW1vaXplZFN0YXRlKSAmJlxuICAgICAgKChkaWRSZWNlaXZlVXBkYXRlID0gITApLFxuICAgICAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQzMiAmJlxuICAgICAgICAoKHJlZHVjZXIgPSBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUpLCBudWxsICE9PSByZWR1Y2VyKSlcbiAgICApXG4gICAgICB0aHJvdyByZWR1Y2VyO1xuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICBob29rLmJhc2VTdGF0ZSA9IGJhc2VGaXJzdDtcbiAgICBob29rLmJhc2VRdWV1ZSA9IG5ld0Jhc2VRdWV1ZUxhc3Q7XG4gICAgcXVldWUubGFzdFJlbmRlcmVkU3RhdGUgPSBwZW5kaW5nUXVldWU7XG4gIH1cbiAgbnVsbCA9PT0gYmFzZVF1ZXVlICYmIChxdWV1ZS5sYW5lcyA9IDApO1xuICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgcXVldWUuZGlzcGF0Y2hdO1xufVxuZnVuY3Rpb24gcmVyZW5kZXJSZWR1Y2VyKHJlZHVjZXIpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICBxdWV1ZSA9IGhvb2sucXVldWU7XG4gIGlmIChudWxsID09PSBxdWV1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTEpKTtcbiAgcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBkaXNwYXRjaCA9IHF1ZXVlLmRpc3BhdGNoLFxuICAgIGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IHF1ZXVlLnBlbmRpbmcsXG4gICAgbmV3U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUpIHtcbiAgICBxdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgICB2YXIgdXBkYXRlID0gKGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZS5uZXh0KTtcbiAgICBkbyAobmV3U3RhdGUgPSByZWR1Y2VyKG5ld1N0YXRlLCB1cGRhdGUuYWN0aW9uKSksICh1cGRhdGUgPSB1cGRhdGUubmV4dCk7XG4gICAgd2hpbGUgKHVwZGF0ZSAhPT0gbGFzdFJlbmRlclBoYXNlVXBkYXRlKTtcbiAgICBvYmplY3RJcyhuZXdTdGF0ZSwgaG9vay5tZW1vaXplZFN0YXRlKSB8fCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKTtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICBudWxsID09PSBob29rLmJhc2VRdWV1ZSAmJiAoaG9vay5iYXNlU3RhdGUgPSBuZXdTdGF0ZSk7XG4gICAgcXVldWUubGFzdFJlbmRlcmVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgfVxuICByZXR1cm4gW25ld1N0YXRlLCBkaXNwYXRjaF07XG59XG5mdW5jdGlvbiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgPSBpc0h5ZHJhdGluZztcbiAgaWYgKGlzSHlkcmF0aW5nJGpzY29tcCQwKSB7XG4gICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTZXJ2ZXJTbmFwc2hvdCgpO1xuICB9IGVsc2UgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICB2YXIgc25hcHNob3RDaGFuZ2VkID0gIW9iamVjdElzKFxuICAgIChjdXJyZW50SG9vayB8fCBob29rKS5tZW1vaXplZFN0YXRlLFxuICAgIGdldFNlcnZlclNuYXBzaG90XG4gICk7XG4gIHNuYXBzaG90Q2hhbmdlZCAmJlxuICAgICgoaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3QpLCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG4gIGhvb2sgPSBob29rLnF1ZXVlO1xuICB2YXIgY3JlYXRlID0gc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBob29rLCBzdWJzY3JpYmUpO1xuICB1cGRhdGVFZmZlY3RJbXBsKDIwNDgsIDgsIGNyZWF0ZSwgW3N1YnNjcmliZV0pO1xuICBpZiAoXG4gICAgaG9vay5nZXRTbmFwc2hvdCAhPT0gZ2V0U25hcHNob3QgfHxcbiAgICBzbmFwc2hvdENoYW5nZWQgfHxcbiAgICAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3NIb29rICYmIHdvcmtJblByb2dyZXNzSG9vay5tZW1vaXplZFN0YXRlLnRhZyAmIDEpXG4gICkge1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaFNpbXBsZUVmZmVjdChcbiAgICAgIDksXG4gICAgICBjcmVhdGVFZmZlY3RJbnN0YW5jZSgpLFxuICAgICAgdXBkYXRlU3RvcmVJbnN0YW5jZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBmaWJlcixcbiAgICAgICAgaG9vayxcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgIGdldFNuYXBzaG90XG4gICAgICApLFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICBpc0h5ZHJhdGluZyRqc2NvbXAkMCB8fFxuICAgICAgMCAhPT0gKHJlbmRlckxhbmVzICYgMTI0KSB8fFxuICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgfVxuICByZXR1cm4gZ2V0U2VydmVyU25hcHNob3Q7XG59XG5mdW5jdGlvbiBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgcmVuZGVyZWRTbmFwc2hvdCkge1xuICBmaWJlci5mbGFncyB8PSAxNjM4NDtcbiAgZmliZXIgPSB7IGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdCwgdmFsdWU6IHJlbmRlcmVkU25hcHNob3QgfTtcbiAgZ2V0U25hcHNob3QgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZTtcbiAgbnVsbCA9PT0gZ2V0U25hcHNob3RcbiAgICA/ICgoZ2V0U25hcHNob3QgPSBjcmVhdGVGdW5jdGlvbkNvbXBvbmVudFVwZGF0ZVF1ZXVlKCkpLFxuICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLnVwZGF0ZVF1ZXVlID0gZ2V0U25hcHNob3QpLFxuICAgICAgKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pKVxuICAgIDogKChyZW5kZXJlZFNuYXBzaG90ID0gZ2V0U25hcHNob3Quc3RvcmVzKSxcbiAgICAgIG51bGwgPT09IHJlbmRlcmVkU25hcHNob3RcbiAgICAgICAgPyAoZ2V0U25hcHNob3Quc3RvcmVzID0gW2ZpYmVyXSlcbiAgICAgICAgOiByZW5kZXJlZFNuYXBzaG90LnB1c2goZmliZXIpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0b3JlSW5zdGFuY2UoZmliZXIsIGluc3QsIG5leHRTbmFwc2hvdCwgZ2V0U25hcHNob3QpIHtcbiAgaW5zdC52YWx1ZSA9IG5leHRTbmFwc2hvdDtcbiAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90O1xuICBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpICYmIGZvcmNlU3RvcmVSZXJlbmRlcihmaWJlcik7XG59XG5mdW5jdGlvbiBzdWJzY3JpYmVUb1N0b3JlKGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpIHtcbiAgcmV0dXJuIHN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkge1xuICB2YXIgbGF0ZXN0R2V0U25hcHNob3QgPSBpbnN0LmdldFNuYXBzaG90O1xuICBpbnN0ID0gaW5zdC52YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YXIgbmV4dFZhbHVlID0gbGF0ZXN0R2V0U25hcHNob3QoKTtcbiAgICByZXR1cm4gIW9iamVjdElzKGluc3QsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG59XG5mdW5jdGlvbiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpIHtcbiAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5pdGlhbFN0YXRlKSB7XG4gICAgdmFyIGluaXRpYWxTdGF0ZUluaXRpYWxpemVyID0gaW5pdGlhbFN0YXRlO1xuICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZUluaXRpYWxpemVyKCk7XG4gICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICB0cnkge1xuICAgICAgICBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgaG9vay5xdWV1ZSA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgfTtcbiAgcmV0dXJuIGhvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50LCBwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgaG9vayxcbiAgICBjdXJyZW50SG9vayxcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWR1Y2VyID8gcmVkdWNlciA6IGJhc2ljU3RhdGVSZWR1Y2VyXG4gICk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEFjdGlvblN0YXRlKFxuICBmaWJlcixcbiAgYWN0aW9uUXVldWUsXG4gIHNldFBlbmRpbmdTdGF0ZSxcbiAgc2V0U3RhdGUsXG4gIHBheWxvYWRcbikge1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDg1KSk7XG4gIGZpYmVyID0gYWN0aW9uUXVldWUuYWN0aW9uO1xuICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICB2YXIgYWN0aW9uTm9kZSA9IHtcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBhY3Rpb246IGZpYmVyLFxuICAgICAgbmV4dDogbnVsbCxcbiAgICAgIGlzVHJhbnNpdGlvbjogITAsXG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICByZWFzb246IG51bGwsXG4gICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGFjdGlvbk5vZGUubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH07XG4gICAgbnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVFxuICAgICAgPyBzZXRQZW5kaW5nU3RhdGUoITApXG4gICAgICA6IChhY3Rpb25Ob2RlLmlzVHJhbnNpdGlvbiA9ICExKTtcbiAgICBzZXRTdGF0ZShhY3Rpb25Ob2RlKTtcbiAgICBzZXRQZW5kaW5nU3RhdGUgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHNldFBlbmRpbmdTdGF0ZVxuICAgICAgPyAoKGFjdGlvbk5vZGUubmV4dCA9IGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBhY3Rpb25Ob2RlKSxcbiAgICAgICAgcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIGFjdGlvbk5vZGUpKVxuICAgICAgOiAoKGFjdGlvbk5vZGUubmV4dCA9IHNldFBlbmRpbmdTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCA9IGFjdGlvbk5vZGUpKTtcbiAgfVxufVxuZnVuY3Rpb24gcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIG5vZGUpIHtcbiAgdmFyIGFjdGlvbiA9IG5vZGUuYWN0aW9uLFxuICAgIHBheWxvYWQgPSBub2RlLnBheWxvYWQsXG4gICAgcHJldlN0YXRlID0gYWN0aW9uUXVldWUuc3RhdGU7XG4gIGlmIChub2RlLmlzVHJhbnNpdGlvbikge1xuICAgIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgICB0cnkge1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCksXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbjtcbiAgICB9XG4gIH0gZWxzZVxuICAgIHRyeSB7XG4gICAgICAocHJldlRyYW5zaXRpb24gPSBhY3Rpb24ocHJldlN0YXRlLCBwYXlsb2FkKSksXG4gICAgICAgIGhhbmRsZUFjdGlvblJldHVyblZhbHVlKGFjdGlvblF1ZXVlLCBub2RlLCBwcmV2VHJhbnNpdGlvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IkMzgpIHtcbiAgICAgIG9uQWN0aW9uRXJyb3IoYWN0aW9uUXVldWUsIG5vZGUsIGVycm9yJDM4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpIHtcbiAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW5cbiAgICA/IHJldHVyblZhbHVlLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIG5leHRTdGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICA6IG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBuZXh0U3RhdGUpIHtcbiAgYWN0aW9uTm9kZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICBhY3Rpb25Ob2RlLnZhbHVlID0gbmV4dFN0YXRlO1xuICBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSk7XG4gIGFjdGlvblF1ZXVlLnN0YXRlID0gbmV4dFN0YXRlO1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgbnVsbCAhPT0gYWN0aW9uTm9kZSAmJlxuICAgICgobmV4dFN0YXRlID0gYWN0aW9uTm9kZS5uZXh0KSxcbiAgICBuZXh0U3RhdGUgPT09IGFjdGlvbk5vZGVcbiAgICAgID8gKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsKVxuICAgICAgOiAoKG5leHRTdGF0ZSA9IG5leHRTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvbk5vZGUubmV4dCA9IG5leHRTdGF0ZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBuZXh0U3RhdGUpKSk7XG59XG5mdW5jdGlvbiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBlcnJvcikge1xuICB2YXIgbGFzdCA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICBpZiAobnVsbCAhPT0gbGFzdCkge1xuICAgIGxhc3QgPSBsYXN0Lm5leHQ7XG4gICAgZG9cbiAgICAgIChhY3Rpb25Ob2RlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksXG4gICAgICAgIChhY3Rpb25Ob2RlLnJlYXNvbiA9IGVycm9yKSxcbiAgICAgICAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpLFxuICAgICAgICAoYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubmV4dCk7XG4gICAgd2hpbGUgKGFjdGlvbk5vZGUgIT09IGxhc3QpO1xuICB9XG4gIGFjdGlvblF1ZXVlLmFjdGlvbiA9IG51bGw7XG59XG5mdW5jdGlvbiBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSkge1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uTm9kZS5saXN0ZW5lcnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aW9uTm9kZS5sZW5ndGg7IGkrKykgKDAsIGFjdGlvbk5vZGVbaV0pKCk7XG59XG5mdW5jdGlvbiBhY3Rpb25TdGF0ZVJlZHVjZXIob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gIHJldHVybiBuZXdTdGF0ZTtcbn1cbmZ1bmN0aW9uIG1vdW50QWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGVQcm9wKSB7XG4gIGlmIChpc0h5ZHJhdGluZykge1xuICAgIHZhciBzc3JGb3JtU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuZm9ybVN0YXRlO1xuICAgIGlmIChudWxsICE9PSBzc3JGb3JtU3RhdGUpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyO1xuICAgICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICBpZiAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkge1xuICAgICAgICAgICAgYjoge1xuICAgICAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICB2YXIgaW5Sb290T3JTaW5nbGV0b24gPSByb290T3JTaW5nbGV0b25Db250ZXh0O1xuICAgICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluUm9vdE9yU2luZ2xldG9uKSB7XG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpblJvb3RPclNpbmdsZXRvbiA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kYXRhO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIFwiRiFcIiA9PT0gaW5Sb290T3JTaW5nbGV0b24gfHwgXCJGXCIgPT09IGluUm9vdE9yU2luZ2xldG9uXG4gICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMFxuICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCkge1xuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgXCJGIVwiID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGF0YTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gITE7XG4gICAgICB9XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiYgKGluaXRpYWxTdGF0ZVByb3AgPSBzc3JGb3JtU3RhdGVbMF0pO1xuICAgIH1cbiAgfVxuICBzc3JGb3JtU3RhdGUgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBzc3JGb3JtU3RhdGUubWVtb2l6ZWRTdGF0ZSA9IHNzckZvcm1TdGF0ZS5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGVQcm9wO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBhY3Rpb25TdGF0ZVJlZHVjZXIsXG4gICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxTdGF0ZVByb3BcbiAgfTtcbiAgc3NyRm9ybVN0YXRlLnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmRpc3BhdGNoID0gc3NyRm9ybVN0YXRlO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBtb3VudFN0YXRlSW1wbCghMSk7XG4gIGluUm9vdE9yU2luZ2xldG9uID0gZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLFxuICAgICExLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5xdWV1ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSB7XG4gICAgc3RhdGU6IGluaXRpYWxTdGF0ZVByb3AsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgcGVuZGluZzogbnVsbFxuICB9O1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDA7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoQWN0aW9uU3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCxcbiAgICBpblJvb3RPclNpbmdsZXRvbixcbiAgICBzc3JGb3JtU3RhdGVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRpc3BhdGNoID0gc3NyRm9ybVN0YXRlO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQubWVtb2l6ZWRTdGF0ZSA9IGFjdGlvbjtcbiAgcmV0dXJuIFtpbml0aWFsU3RhdGVQcm9wLCBzc3JGb3JtU3RhdGUsICExXTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGlvblN0YXRlKGFjdGlvbikge1xuICB2YXIgc3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50SG9vaywgYWN0aW9uKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRTdGF0ZUhvb2ssIGFjdGlvbikge1xuICBjdXJyZW50U3RhdGVIb29rID0gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgc3RhdGVIb29rLFxuICAgIGN1cnJlbnRTdGF0ZUhvb2ssXG4gICAgYWN0aW9uU3RhdGVSZWR1Y2VyXG4gIClbMF07XG4gIHN0YXRlSG9vayA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdO1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGN1cnJlbnRTdGF0ZUhvb2sgJiZcbiAgICBudWxsICE9PSBjdXJyZW50U3RhdGVIb29rICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY3VycmVudFN0YXRlSG9vay50aGVuXG4gIClcbiAgICB0cnkge1xuICAgICAgdmFyIHN0YXRlID0gdXNlVGhlbmFibGUoY3VycmVudFN0YXRlSG9vayk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgaWYgKHggPT09IFN1c3BlbnNlRXhjZXB0aW9uKSB0aHJvdyBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvbjtcbiAgICAgIHRocm93IHg7XG4gICAgfVxuICBlbHNlIHN0YXRlID0gY3VycmVudFN0YXRlSG9vaztcbiAgY3VycmVudFN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgYWN0aW9uUXVldWUgPSBjdXJyZW50U3RhdGVIb29rLnF1ZXVlLFxuICAgIGRpc3BhdGNoID0gYWN0aW9uUXVldWUuZGlzcGF0Y2g7XG4gIGFjdGlvbiAhPT0gY3VycmVudFN0YXRlSG9vay5tZW1vaXplZFN0YXRlICYmXG4gICAgKChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5mbGFncyB8PSAyMDQ4KSxcbiAgICBwdXNoU2ltcGxlRWZmZWN0KFxuICAgICAgOSxcbiAgICAgIGNyZWF0ZUVmZmVjdEluc3RhbmNlKCksXG4gICAgICBhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdC5iaW5kKG51bGwsIGFjdGlvblF1ZXVlLCBhY3Rpb24pLFxuICAgICAgbnVsbFxuICAgICkpO1xuICByZXR1cm4gW3N0YXRlLCBkaXNwYXRjaCwgc3RhdGVIb29rXTtcbn1cbmZ1bmN0aW9uIGFjdGlvblN0YXRlQWN0aW9uRWZmZWN0KGFjdGlvblF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uUXVldWUuYWN0aW9uID0gYWN0aW9uO1xufVxuZnVuY3Rpb24gcmVyZW5kZXJBY3Rpb25TdGF0ZShhY3Rpb24pIHtcbiAgdmFyIHN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGN1cnJlbnRTdGF0ZUhvb2sgPSBjdXJyZW50SG9vaztcbiAgaWYgKG51bGwgIT09IGN1cnJlbnRTdGF0ZUhvb2spXG4gICAgcmV0dXJuIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRTdGF0ZUhvb2ssIGFjdGlvbik7XG4gIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBzdGF0ZUhvb2sgPSBzdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgY3VycmVudFN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgZGlzcGF0Y2ggPSBjdXJyZW50U3RhdGVIb29rLnF1ZXVlLmRpc3BhdGNoO1xuICBjdXJyZW50U3RhdGVIb29rLm1lbW9pemVkU3RhdGUgPSBhY3Rpb247XG4gIHJldHVybiBbc3RhdGVIb29rLCBkaXNwYXRjaCwgITFdO1xufVxuZnVuY3Rpb24gcHVzaFNpbXBsZUVmZmVjdCh0YWcsIGluc3QsIGNyZWF0ZSwgY3JlYXRlRGVwcykge1xuICB0YWcgPSB7IHRhZzogdGFnLCBjcmVhdGU6IGNyZWF0ZSwgZGVwczogY3JlYXRlRGVwcywgaW5zdDogaW5zdCwgbmV4dDogbnVsbCB9O1xuICBpbnN0ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGluc3QgJiZcbiAgICAoKGluc3QgPSBjcmVhdGVGdW5jdGlvbkNvbXBvbmVudFVwZGF0ZVF1ZXVlKCkpLFxuICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZSA9IGluc3QpKTtcbiAgY3JlYXRlID0gaW5zdC5sYXN0RWZmZWN0O1xuICBudWxsID09PSBjcmVhdGVcbiAgICA/IChpbnN0Lmxhc3RFZmZlY3QgPSB0YWcubmV4dCA9IHRhZylcbiAgICA6ICgoY3JlYXRlRGVwcyA9IGNyZWF0ZS5uZXh0KSxcbiAgICAgIChjcmVhdGUubmV4dCA9IHRhZyksXG4gICAgICAodGFnLm5leHQgPSBjcmVhdGVEZXBzKSxcbiAgICAgIChpbnN0Lmxhc3RFZmZlY3QgPSB0YWcpKTtcbiAgcmV0dXJuIHRhZztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVmZmVjdEluc3RhbmNlKCkge1xuICByZXR1cm4geyBkZXN0cm95OiB2b2lkIDAsIHJlc291cmNlOiB2b2lkIDAgfTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZigpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGNyZWF0ZURlcHMpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBjcmVhdGVEZXBzID0gdm9pZCAwID09PSBjcmVhdGVEZXBzID8gbnVsbCA6IGNyZWF0ZURlcHM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmZsYWdzIHw9IGZpYmVyRmxhZ3M7XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hTaW1wbGVFZmZlY3QoXG4gICAgMSB8IGhvb2tGbGFncyxcbiAgICBjcmVhdGVFZmZlY3RJbnN0YW5jZSgpLFxuICAgIGNyZWF0ZSxcbiAgICBjcmVhdGVEZXBzXG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIGhvb2tGbGFncywgY3JlYXRlLCBkZXBzKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIGRlcHMgPSB2b2lkIDAgPT09IGRlcHMgPyBudWxsIDogZGVwcztcbiAgdmFyIGluc3QgPSBob29rLm1lbW9pemVkU3RhdGUuaW5zdDtcbiAgbnVsbCAhPT0gY3VycmVudEhvb2sgJiZcbiAgbnVsbCAhPT0gZGVwcyAmJlxuICBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZS5kZXBzKVxuICAgID8gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hTaW1wbGVFZmZlY3QoaG9va0ZsYWdzLCBpbnN0LCBjcmVhdGUsIGRlcHMpKVxuICAgIDogKChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5mbGFncyB8PSBmaWJlckZsYWdzKSxcbiAgICAgIChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoU2ltcGxlRWZmZWN0KFxuICAgICAgICAxIHwgaG9va0ZsYWdzLFxuICAgICAgICBpbnN0LFxuICAgICAgICBjcmVhdGUsXG4gICAgICAgIGRlcHNcbiAgICAgICkpKTtcbn1cbmZ1bmN0aW9uIG1vdW50RWZmZWN0KGNyZWF0ZSwgY3JlYXRlRGVwcykge1xuICBtb3VudEVmZmVjdEltcGwoODM5MDY1NiwgOCwgY3JlYXRlLCBjcmVhdGVEZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdChjcmVhdGUsIGNyZWF0ZURlcHMpIHtcbiAgdXBkYXRlRWZmZWN0SW1wbCgyMDQ4LCA4LCBjcmVhdGUsIGNyZWF0ZURlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdChjcmVhdGUsIHJlZikge1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmKSB7XG4gICAgY3JlYXRlID0gY3JlYXRlKCk7XG4gICAgdmFyIHJlZkNsZWFudXAgPSByZWYoY3JlYXRlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cCA/IHJlZkNsZWFudXAoKSA6IHJlZihudWxsKTtcbiAgICB9O1xuICB9XG4gIGlmIChudWxsICE9PSByZWYgJiYgdm9pZCAwICE9PSByZWYpXG4gICAgcmV0dXJuIChcbiAgICAgIChjcmVhdGUgPSBjcmVhdGUoKSksXG4gICAgICAocmVmLmN1cnJlbnQgPSBjcmVhdGUpLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBpbXBlcmF0aXZlSGFuZGxlRWZmZWN0LmJpbmQobnVsbCwgY3JlYXRlLCByZWYpLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIG1vdW50RGVidWdWYWx1ZSgpIHt9XG5mdW5jdGlvbiB1cGRhdGVDYWxsYmFjayhjYWxsYmFjaywgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtjYWxsYmFjaywgZGVwc107XG4gIHJldHVybiBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIHByZXZTdGF0ZSA9IG5leHRDcmVhdGUoKTtcbiAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgIHRyeSB7XG4gICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW3ByZXZTdGF0ZSwgZGVwc107XG4gIHJldHVybiBwcmV2U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gaW5pdGlhbFZhbHVlIHx8IDAgIT09IChyZW5kZXJMYW5lcyAmIDEwNzM3NDE4MjQpKVxuICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWU7XG4gIGhvb2sgPSByZXF1ZXN0RGVmZXJyZWRMYW5lKCk7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gaW5pdGlhbFZhbHVlO1xufVxuZnVuY3Rpb24gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgcHJldlZhbHVlLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmIChvYmplY3RJcyh2YWx1ZSwgcHJldlZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICBpZiAobnVsbCAhPT0gY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50KVxuICAgIHJldHVybiAoXG4gICAgICAoaG9vayA9IG1vdW50RGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgdmFsdWUsIGluaXRpYWxWYWx1ZSkpLFxuICAgICAgb2JqZWN0SXMoaG9vaywgcHJldlZhbHVlKSB8fCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGhvb2tcbiAgICApO1xuICBpZiAoMCA9PT0gKHJlbmRlckxhbmVzICYgNDIpKVxuICAgIHJldHVybiAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSwgKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vayA9IHJlcXVlc3REZWZlcnJlZExhbmUoKTtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIubGFuZXMgfD0gaG9vaztcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IGhvb2s7XG4gIHJldHVybiBwcmV2VmFsdWU7XG59XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb24oZmliZXIsIHF1ZXVlLCBwZW5kaW5nU3RhdGUsIGZpbmlzaGVkU3RhdGUsIGNhbGxiYWNrKSB7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9XG4gICAgMCAhPT0gcHJldmlvdXNQcmlvcml0eSAmJiA4ID4gcHJldmlvdXNQcmlvcml0eSA/IHByZXZpb3VzUHJpb3JpdHkgOiA4O1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIGN1cnJlbnRUcmFuc2l0aW9uID0ge307XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUoZmliZXIsICExLCBxdWV1ZSwgcGVuZGluZ1N0YXRlKTtcbiAgdHJ5IHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBjYWxsYmFjaygpLFxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgIGlmIChcbiAgICAgIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW5cbiAgICApIHtcbiAgICAgIHZhciB0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUgPSBjaGFpblRoZW5hYmxlVmFsdWUoXG4gICAgICAgIHJldHVyblZhbHVlLFxuICAgICAgICBmaW5pc2hlZFN0YXRlXG4gICAgICApO1xuICAgICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgICBmaWJlcixcbiAgICAgICAgcXVldWUsXG4gICAgICAgIHRoZW5hYmxlRm9yRmluaXNoZWRTdGF0ZSxcbiAgICAgICAgcmVxdWVzdFVwZGF0ZUxhbmUoZmliZXIpXG4gICAgICApO1xuICAgIH0gZWxzZVxuICAgICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgICBmaWJlcixcbiAgICAgICAgcXVldWUsXG4gICAgICAgIGZpbmlzaGVkU3RhdGUsXG4gICAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKGZpYmVyKVxuICAgICAgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoXG4gICAgICBmaWJlcixcbiAgICAgIHF1ZXVlLFxuICAgICAgeyB0aGVuOiBmdW5jdGlvbiAoKSB7fSwgc3RhdHVzOiBcInJlamVjdGVkXCIsIHJlYXNvbjogZXJyb3IgfSxcbiAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKClcbiAgICApO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gbm9vcCQyKCkge31cbmZ1bmN0aW9uIHN0YXJ0SG9zdFRyYW5zaXRpb24oZm9ybUZpYmVyLCBwZW5kaW5nU3RhdGUsIGFjdGlvbiwgZm9ybURhdGEpIHtcbiAgaWYgKDUgIT09IGZvcm1GaWJlci50YWcpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc2KSk7XG4gIHZhciBxdWV1ZSA9IGVuc3VyZUZvcm1Db21wb25lbnRJc1N0YXRlZnVsKGZvcm1GaWJlcikucXVldWU7XG4gIHN0YXJ0VHJhbnNpdGlvbihcbiAgICBmb3JtRmliZXIsXG4gICAgcXVldWUsXG4gICAgcGVuZGluZ1N0YXRlLFxuICAgIHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gICAgbnVsbCA9PT0gYWN0aW9uXG4gICAgICA/IG5vb3AkMlxuICAgICAgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVxdWVzdEZvcm1SZXNldCQxKGZvcm1GaWJlcik7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihmb3JtRGF0YSk7XG4gICAgICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGVuc3VyZUZvcm1Db21wb25lbnRJc1N0YXRlZnVsKGZvcm1GaWJlcikge1xuICB2YXIgZXhpc3RpbmdTdGF0ZUhvb2sgPSBmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGV4aXN0aW5nU3RhdGVIb29rKSByZXR1cm4gZXhpc3RpbmdTdGF0ZUhvb2s7XG4gIGV4aXN0aW5nU3RhdGVIb29rID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gICAgYmFzZVN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZToge1xuICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgIGxhbmVzOiAwLFxuICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0XG4gICAgfSxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIHZhciBpbml0aWFsUmVzZXRTdGF0ZSA9IHt9O1xuICBleGlzdGluZ1N0YXRlSG9vay5uZXh0ID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlLFxuICAgIGJhc2VTdGF0ZTogaW5pdGlhbFJlc2V0U3RhdGUsXG4gICAgYmFzZVF1ZXVlOiBudWxsLFxuICAgIHF1ZXVlOiB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgbGFuZXM6IDAsXG4gICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlXG4gICAgfSxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGZvcm1GaWJlci5tZW1vaXplZFN0YXRlID0gZXhpc3RpbmdTdGF0ZUhvb2s7XG4gIGZvcm1GaWJlciA9IGZvcm1GaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGZvcm1GaWJlciAmJiAoZm9ybUZpYmVyLm1lbW9pemVkU3RhdGUgPSBleGlzdGluZ1N0YXRlSG9vayk7XG4gIHJldHVybiBleGlzdGluZ1N0YXRlSG9vaztcbn1cbmZ1bmN0aW9uIHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtRmliZXIpIHtcbiAgdmFyIHJlc2V0U3RhdGVRdWV1ZSA9IGVuc3VyZUZvcm1Db21wb25lbnRJc1N0YXRlZnVsKGZvcm1GaWJlcikubmV4dC5xdWV1ZTtcbiAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZvcm1GaWJlciwgcmVzZXRTdGF0ZVF1ZXVlLCB7fSwgcmVxdWVzdFVwZGF0ZUxhbmUoKSk7XG59XG5mdW5jdGlvbiB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cygpIHtcbiAgcmV0dXJuIHJlYWRDb250ZXh0KEhvc3RUcmFuc2l0aW9uQ29udGV4dCk7XG59XG5mdW5jdGlvbiB1cGRhdGVJZCgpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWZyZXNoKCkge1xuICByZXR1cm4gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZTtcbn1cbmZ1bmN0aW9uIHJlZnJlc2hDYWNoZShmaWJlcikge1xuICBmb3IgKHZhciBwcm92aWRlciA9IGZpYmVyLnJldHVybjsgbnVsbCAhPT0gcHJvdmlkZXI7ICkge1xuICAgIHN3aXRjaCAocHJvdmlkZXIudGFnKSB7XG4gICAgICBjYXNlIDI0OlxuICAgICAgY2FzZSAzOlxuICAgICAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gICAgICAgIGZpYmVyID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgICAgICB2YXIgcm9vdCQ0MSA9IGVucXVldWVVcGRhdGUocHJvdmlkZXIsIGZpYmVyLCBsYW5lKTtcbiAgICAgICAgbnVsbCAhPT0gcm9vdCQ0MSAmJlxuICAgICAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCQ0MSwgcHJvdmlkZXIsIGxhbmUpLFxuICAgICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMocm9vdCQ0MSwgcHJvdmlkZXIsIGxhbmUpKTtcbiAgICAgICAgcHJvdmlkZXIgPSB7IGNhY2hlOiBjcmVhdGVDYWNoZSgpIH07XG4gICAgICAgIGZpYmVyLnBheWxvYWQgPSBwcm92aWRlcjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcm92aWRlciA9IHByb3ZpZGVyLnJldHVybjtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgYWN0aW9uID0ge1xuICAgIGxhbmU6IGxhbmUsXG4gICAgcmV2ZXJ0TGFuZTogMCxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcilcbiAgICA/IGVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZShxdWV1ZSwgYWN0aW9uKVxuICAgIDogKChhY3Rpb24gPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCBhY3Rpb24sIGxhbmUpKSxcbiAgICAgIG51bGwgIT09IGFjdGlvbiAmJlxuICAgICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGFjdGlvbiwgZmliZXIsIGxhbmUpLFxuICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUoYWN0aW9uLCBxdWV1ZSwgbGFuZSkpKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoU2V0U3RhdGUoZmliZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoZmliZXIsIHF1ZXVlLCBhY3Rpb24sIGxhbmUpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKSB7XG4gIHZhciB1cGRhdGUgPSB7XG4gICAgbGFuZTogbGFuZSxcbiAgICByZXZlcnRMYW5lOiAwLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIGhhc0VhZ2VyU3RhdGU6ICExLFxuICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIGVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZShxdWV1ZSwgdXBkYXRlKTtcbiAgZWxzZSB7XG4gICAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgICBpZiAoXG4gICAgICAwID09PSBmaWJlci5sYW5lcyAmJlxuICAgICAgKG51bGwgPT09IGFsdGVybmF0ZSB8fCAwID09PSBhbHRlcm5hdGUubGFuZXMpICYmXG4gICAgICAoKGFsdGVybmF0ZSA9IHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIpLCBudWxsICE9PSBhbHRlcm5hdGUpXG4gICAgKVxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlLFxuICAgICAgICAgIGVhZ2VyU3RhdGUgPSBhbHRlcm5hdGUoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgICAgICB1cGRhdGUuaGFzRWFnZXJTdGF0ZSA9ICEwO1xuICAgICAgICB1cGRhdGUuZWFnZXJTdGF0ZSA9IGVhZ2VyU3RhdGU7XG4gICAgICAgIGlmIChvYmplY3RJcyhlYWdlclN0YXRlLCBjdXJyZW50U3RhdGUpKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIDApLFxuICAgICAgICAgICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgfVxuICAgIGFjdGlvbiA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSk7XG4gICAgaWYgKG51bGwgIT09IGFjdGlvbilcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihhY3Rpb24sIGZpYmVyLCBsYW5lKSxcbiAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKGFjdGlvbiwgcXVldWUsIGxhbmUpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZShmaWJlciwgdGhyb3dJZkR1cmluZ1JlbmRlciwgcXVldWUsIGFjdGlvbikge1xuICBhY3Rpb24gPSB7XG4gICAgbGFuZTogMixcbiAgICByZXZlcnRMYW5lOiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKSxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSB7XG4gICAgaWYgKHRocm93SWZEdXJpbmdSZW5kZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc5KSk7XG4gIH0gZWxzZVxuICAgICh0aHJvd0lmRHVyaW5nUmVuZGVyID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKFxuICAgICAgZmliZXIsXG4gICAgICBxdWV1ZSxcbiAgICAgIGFjdGlvbixcbiAgICAgIDJcbiAgICApKSxcbiAgICAgIG51bGwgIT09IHRocm93SWZEdXJpbmdSZW5kZXIgJiZcbiAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHRocm93SWZEdXJpbmdSZW5kZXIsIGZpYmVyLCAyKTtcbn1cbmZ1bmN0aW9uIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgcmV0dXJuIChcbiAgICBmaWJlciA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgfHxcbiAgICAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIpXG4gICk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSkge1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID1cbiAgICAhMDtcbiAgdmFyIHBlbmRpbmcgPSBxdWV1ZS5wZW5kaW5nO1xuICBudWxsID09PSBwZW5kaW5nXG4gICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKHJvb3QsIHF1ZXVlLCBsYW5lKSB7XG4gIGlmICgwICE9PSAobGFuZSAmIDQxOTQwNDgpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBxdWV1ZS5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBxdWV1ZS5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbnZhciBDb250ZXh0T25seURpc3BhdGNoZXIgPSB7XG4gICAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZTogdXNlLFxuICAgIHVzZUNhbGxiYWNrOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlQ29udGV4dDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUVmZmVjdDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VJbnNlcnRpb25FZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VNZW1vOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlUmVkdWNlcjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZVJlZjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZVN0YXRlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlRGVidWdWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZURlZmVycmVkVmFsdWU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VUcmFuc2l0aW9uOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VJZDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlRm9ybVN0YXRlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlQWN0aW9uU3RhdGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VPcHRpbWlzdGljOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlTWVtb0NhY2hlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlQ2FjaGVSZWZyZXNoOiB0aHJvd0ludmFsaWRIb29rRXJyb3JcbiAgfSxcbiAgSG9va3NEaXNwYXRjaGVyT25Nb3VudCA9IHtcbiAgICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gICAgdXNlOiB1c2UsXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICAgICAgbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gW1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHNcbiAgICAgIF07XG4gICAgICByZXR1cm4gY2FsbGJhY2s7XG4gICAgfSxcbiAgICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2VFZmZlY3Q6IG1vdW50RWZmZWN0LFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICAgICAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgICAgIG1vdW50RWZmZWN0SW1wbChcbiAgICAgICAgNDE5NDMwOCxcbiAgICAgICAgNCxcbiAgICAgICAgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSxcbiAgICAgICAgZGVwc1xuICAgICAgKTtcbiAgICB9LFxuICAgIHVzZUxheW91dEVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgcmV0dXJuIG1vdW50RWZmZWN0SW1wbCg0MTk0MzA4LCA0LCBjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBtb3VudEVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIChuZXh0Q3JlYXRlLCBkZXBzKSB7XG4gICAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gICAgICB2YXIgbmV4dFZhbHVlID0gbmV4dENyZWF0ZSgpO1xuICAgICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBob29rLm1lbW9pemVkU3RhdGUgPSBbbmV4dFZhbHVlLCBkZXBzXTtcbiAgICAgIHJldHVybiBuZXh0VmFsdWU7XG4gICAgfSxcbiAgICB1c2VSZWR1Y2VyOiBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gaW5pdCkge1xuICAgICAgICB2YXIgaW5pdGlhbFN0YXRlID0gaW5pdChpbml0aWFsQXJnKTtcbiAgICAgICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbml0KGluaXRpYWxBcmcpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaW5pdGlhbFN0YXRlID0gaW5pdGlhbEFyZztcbiAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGhvb2suYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgcmVkdWNlciA9IHtcbiAgICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgICAgbGFuZXM6IDAsXG4gICAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiByZWR1Y2VyLFxuICAgICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gICAgICB9O1xuICAgICAgaG9vay5xdWV1ZSA9IHJlZHVjZXI7XG4gICAgICByZWR1Y2VyID0gcmVkdWNlci5kaXNwYXRjaCA9IGRpc3BhdGNoUmVkdWNlckFjdGlvbi5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAgICAgcmVkdWNlclxuICAgICAgKTtcbiAgICAgIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCByZWR1Y2VyXTtcbiAgICB9LFxuICAgIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaW5pdGlhbFZhbHVlID0geyBjdXJyZW50OiBpbml0aWFsVmFsdWUgfTtcbiAgICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlKTtcbiAgICB9LFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiAoaW5pdGlhbFN0YXRlKSB7XG4gICAgICBpbml0aWFsU3RhdGUgPSBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpO1xuICAgICAgdmFyIHF1ZXVlID0gaW5pdGlhbFN0YXRlLnF1ZXVlLFxuICAgICAgICBkaXNwYXRjaCA9IGRpc3BhdGNoU2V0U3RhdGUuYmluZChudWxsLCBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciwgcXVldWUpO1xuICAgICAgcXVldWUuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcbiAgICAgIHJldHVybiBbaW5pdGlhbFN0YXRlLm1lbW9pemVkU3RhdGUsIGRpc3BhdGNoXTtcbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgcmV0dXJuIG1vdW50RGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgdmFsdWUsIGluaXRpYWxWYWx1ZSk7XG4gICAgfSxcbiAgICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RhdGVIb29rID0gbW91bnRTdGF0ZUltcGwoITEpO1xuICAgICAgc3RhdGVIb29rID0gc3RhcnRUcmFuc2l0aW9uLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLFxuICAgICAgICBzdGF0ZUhvb2sucXVldWUsXG4gICAgICAgICEwLFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICAgIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IHN0YXRlSG9vaztcbiAgICAgIHJldHVybiBbITEsIHN0YXRlSG9va107XG4gICAgfSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gICAgICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAgICAgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDcpKTtcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTZXJ2ZXJTbmFwc2hvdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290KVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDEyNCkgfHxcbiAgICAgICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICAgICAgfVxuICAgICAgaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3Q7XG4gICAgICB2YXIgaW5zdCA9IHsgdmFsdWU6IGdldFNlcnZlclNuYXBzaG90LCBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QgfTtcbiAgICAgIGhvb2sucXVldWUgPSBpbnN0O1xuICAgICAgbW91bnRFZmZlY3Qoc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpLCBbXG4gICAgICAgIHN1YnNjcmliZVxuICAgICAgXSk7XG4gICAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgICAgcHVzaFNpbXBsZUVmZmVjdChcbiAgICAgICAgOSxcbiAgICAgICAgY3JlYXRlRWZmZWN0SW5zdGFuY2UoKSxcbiAgICAgICAgdXBkYXRlU3RvcmVJbnN0YW5jZS5iaW5kKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgZmliZXIsXG4gICAgICAgICAgaW5zdCxcbiAgICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgICBnZXRTbmFwc2hvdFxuICAgICAgICApLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdldFNlcnZlclNuYXBzaG90O1xuICAgIH0sXG4gICAgdXNlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICAgICAgaWRlbnRpZmllclByZWZpeCA9IHdvcmtJblByb2dyZXNzUm9vdC5pZGVudGlmaWVyUHJlZml4O1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICAgICAgICB2YXIgaWRXaXRoTGVhZGluZ0JpdCA9IHRyZWVDb250ZXh0SWQ7XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgKFxuICAgICAgICAgICAgaWRXaXRoTGVhZGluZ0JpdCAmIH4oMSA8PCAoMzIgLSBjbHozMihpZFdpdGhMZWFkaW5nQml0KSAtIDEpKVxuICAgICAgICAgICkudG9TdHJpbmcoMzIpICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgICBpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgICBcIlxcdTAwYWJcIiArIGlkZW50aWZpZXJQcmVmaXggKyBcIlJcIiArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbG9jYWxJZENvdW50ZXIrKztcbiAgICAgICAgMCA8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAgIChpZGVudGlmaWVyUHJlZml4ICs9IFwiSFwiICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnRvU3RyaW5nKDMyKSk7XG4gICAgICAgIGlkZW50aWZpZXJQcmVmaXggKz0gXCJcXHUwMGJiXCI7XG4gICAgICB9IGVsc2VcbiAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdsb2JhbENsaWVudElkQ291bnRlcisrKSxcbiAgICAgICAgICAoaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgICAgICBcIlxcdTAwYWJcIiArXG4gICAgICAgICAgICBpZGVudGlmaWVyUHJlZml4ICtcbiAgICAgICAgICAgIFwiclwiICtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikgK1xuICAgICAgICAgICAgXCJcXHUwMGJiXCIpO1xuICAgICAgcmV0dXJuIChob29rLm1lbW9pemVkU3RhdGUgPSBpZGVudGlmaWVyUHJlZml4KTtcbiAgICB9LFxuICAgIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzOiB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cyxcbiAgICB1c2VGb3JtU3RhdGU6IG1vdW50QWN0aW9uU3RhdGUsXG4gICAgdXNlQWN0aW9uU3RhdGU6IG1vdW50QWN0aW9uU3RhdGUsXG4gICAgdXNlT3B0aW1pc3RpYzogZnVuY3Rpb24gKHBhc3N0aHJvdWdoKSB7XG4gICAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICAgICAgdmFyIHF1ZXVlID0ge1xuICAgICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgICBsYW5lczogMCxcbiAgICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IG51bGwsXG4gICAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBudWxsXG4gICAgICB9O1xuICAgICAgaG9vay5xdWV1ZSA9IHF1ZXVlO1xuICAgICAgaG9vayA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLFxuICAgICAgICAhMCxcbiAgICAgICAgcXVldWVcbiAgICAgICk7XG4gICAgICBxdWV1ZS5kaXNwYXRjaCA9IGhvb2s7XG4gICAgICByZXR1cm4gW3Bhc3N0aHJvdWdoLCBob29rXTtcbiAgICB9LFxuICAgIHVzZU1lbW9DYWNoZTogdXNlTWVtb0NhY2hlLFxuICAgIHVzZUNhY2hlUmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSByZWZyZXNoQ2FjaGUuYmluZChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXJcbiAgICAgICkpO1xuICAgIH1cbiAgfSxcbiAgSG9va3NEaXNwYXRjaGVyT25VcGRhdGUgPSB7XG4gICAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZTogdXNlLFxuICAgIHVzZUNhbGxiYWNrOiB1cGRhdGVDYWxsYmFjayxcbiAgICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlLFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogdXBkYXRlSW5zZXJ0aW9uRWZmZWN0LFxuICAgIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICAgIHVzZU1lbW86IHVwZGF0ZU1lbW8sXG4gICAgdXNlUmVkdWNlcjogdXBkYXRlUmVkdWNlcixcbiAgICB1c2VSZWY6IHVwZGF0ZVJlZixcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xuICAgIH0sXG4gICAgdXNlRGVidWdWYWx1ZTogbW91bnREZWJ1Z1ZhbHVlLFxuICAgIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgcmV0dXJuIHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKFxuICAgICAgICBob29rLFxuICAgICAgICBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgaW5pdGlhbFZhbHVlXG4gICAgICApO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJvb2xlYW5PclRoZW5hYmxlID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICAgIHN0YXJ0ID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgICA/IGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgICAgOiB1c2VUaGVuYWJsZShib29sZWFuT3JUaGVuYWJsZSksXG4gICAgICAgIHN0YXJ0XG4gICAgICBdO1xuICAgIH0sXG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICAgIHVzZUlkOiB1cGRhdGVJZCxcbiAgICB1c2VIb3N0VHJhbnNpdGlvblN0YXR1czogdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMsXG4gICAgdXNlRm9ybVN0YXRlOiB1cGRhdGVBY3Rpb25TdGF0ZSxcbiAgICB1c2VBY3Rpb25TdGF0ZTogdXBkYXRlQWN0aW9uU3RhdGUsXG4gICAgdXNlT3B0aW1pc3RpYzogZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gICAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgcmV0dXJuIHVwZGF0ZU9wdGltaXN0aWNJbXBsKGhvb2ssIGN1cnJlbnRIb29rLCBwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG4gICAgfSxcbiAgICB1c2VNZW1vQ2FjaGU6IHVzZU1lbW9DYWNoZSxcbiAgICB1c2VDYWNoZVJlZnJlc2g6IHVwZGF0ZVJlZnJlc2hcbiAgfSxcbiAgSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlciA9IHtcbiAgICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gICAgdXNlOiB1c2UsXG4gICAgdXNlQ2FsbGJhY2s6IHVwZGF0ZUNhbGxiYWNrLFxuICAgIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZUVmZmVjdDogdXBkYXRlRWZmZWN0LFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUsXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1cGRhdGVJbnNlcnRpb25FZmZlY3QsXG4gICAgdXNlTGF5b3V0RWZmZWN0OiB1cGRhdGVMYXlvdXRFZmZlY3QsXG4gICAgdXNlTWVtbzogdXBkYXRlTWVtbyxcbiAgICB1c2VSZWR1Y2VyOiByZXJlbmRlclJlZHVjZXIsXG4gICAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXJlbmRlclJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xuICAgIH0sXG4gICAgdXNlRGVidWdWYWx1ZTogbW91bnREZWJ1Z1ZhbHVlLFxuICAgIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgcmV0dXJuIG51bGwgPT09IGN1cnJlbnRIb29rXG4gICAgICAgID8gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKVxuICAgICAgICA6IHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKFxuICAgICAgICAgICAgaG9vayxcbiAgICAgICAgICAgIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZVxuICAgICAgICAgICk7XG4gICAgfSxcbiAgICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYm9vbGVhbk9yVGhlbmFibGUgPSByZXJlbmRlclJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICAgIDogdXNlVGhlbmFibGUoYm9vbGVhbk9yVGhlbmFibGUpLFxuICAgICAgICBzdGFydFxuICAgICAgXTtcbiAgICB9LFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgICB1c2VJZDogdXBkYXRlSWQsXG4gICAgdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM6IHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzLFxuICAgIHVzZUZvcm1TdGF0ZTogcmVyZW5kZXJBY3Rpb25TdGF0ZSxcbiAgICB1c2VBY3Rpb25TdGF0ZTogcmVyZW5kZXJBY3Rpb25TdGF0ZSxcbiAgICB1c2VPcHRpbWlzdGljOiBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgICAgIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudEhvb2spXG4gICAgICAgIHJldHVybiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50SG9vaywgcGFzc3Rocm91Z2gsIHJlZHVjZXIpO1xuICAgICAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgICAgIHJldHVybiBbcGFzc3Rocm91Z2gsIGhvb2sucXVldWUuZGlzcGF0Y2hdO1xuICAgIH0sXG4gICAgdXNlTWVtb0NhY2hlOiB1c2VNZW1vQ2FjaGUsXG4gICAgdXNlQ2FjaGVSZWZyZXNoOiB1cGRhdGVSZWZyZXNoXG4gIH0sXG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsLFxuICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG5mdW5jdGlvbiB1bndyYXBUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlcjtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgKz0gMTtcbiAgbnVsbCA9PT0gdGhlbmFibGVTdGF0ZSAmJiAodGhlbmFibGVTdGF0ZSA9IFtdKTtcbiAgcmV0dXJuIHRyYWNrVXNlZFRoZW5hYmxlKHRoZW5hYmxlU3RhdGUsIHRoZW5hYmxlLCBpbmRleCk7XG59XG5mdW5jdGlvbiBjb2VyY2VSZWYod29ya0luUHJvZ3Jlc3MsIGVsZW1lbnQpIHtcbiAgZWxlbWVudCA9IGVsZW1lbnQucHJvcHMucmVmO1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSB2b2lkIDAgIT09IGVsZW1lbnQgPyBlbGVtZW50IDogbnVsbDtcbn1cbmZ1bmN0aW9uIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpIHtcbiAgaWYgKG5ld0NoaWxkLiQkdHlwZW9mID09PSBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTI1KSk7XG4gIHJldHVybkZpYmVyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0NoaWxkKTtcbiAgdGhyb3cgRXJyb3IoXG4gICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZShcbiAgICAgIDMxLFxuICAgICAgXCJbb2JqZWN0IE9iamVjdF1cIiA9PT0gcmV0dXJuRmliZXJcbiAgICAgICAgPyBcIm9iamVjdCB3aXRoIGtleXMge1wiICsgT2JqZWN0LmtleXMobmV3Q2hpbGQpLmpvaW4oXCIsIFwiKSArIFwifVwiXG4gICAgICAgIDogcmV0dXJuRmliZXJcbiAgICApXG4gICk7XG59XG5mdW5jdGlvbiByZXNvbHZlTGF6eShsYXp5VHlwZSkge1xuICB2YXIgaW5pdCA9IGxhenlUeXBlLl9pbml0O1xuICByZXR1cm4gaW5pdChsYXp5VHlwZS5fcGF5bG9hZCk7XG59XG5mdW5jdGlvbiBjcmVhdGVDaGlsZFJlY29uY2lsZXIoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICBmdW5jdGlvbiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZSkge1xuICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICB2YXIgZGVsZXRpb25zID0gcmV0dXJuRmliZXIuZGVsZXRpb25zO1xuICAgICAgbnVsbCA9PT0gZGVsZXRpb25zXG4gICAgICAgID8gKChyZXR1cm5GaWJlci5kZWxldGlvbnMgPSBbY2hpbGRUb0RlbGV0ZV0pLCAocmV0dXJuRmliZXIuZmxhZ3MgfD0gMTYpKVxuICAgICAgICA6IGRlbGV0aW9ucy5wdXNoKGNoaWxkVG9EZWxldGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpIHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHJldHVybiBudWxsO1xuICAgIGZvciAoOyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKVxuICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gbWFwUmVtYWluaW5nQ2hpbGRyZW4oY3VycmVudEZpcnN0Q2hpbGQpIHtcbiAgICBmb3IgKHZhciBleGlzdGluZ0NoaWxkcmVuID0gbmV3IE1hcCgpOyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKVxuICAgICAgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQua2V5XG4gICAgICAgID8gZXhpc3RpbmdDaGlsZHJlbi5zZXQoY3VycmVudEZpcnN0Q2hpbGQua2V5LCBjdXJyZW50Rmlyc3RDaGlsZClcbiAgICAgICAgOiBleGlzdGluZ0NoaWxkcmVuLnNldChjdXJyZW50Rmlyc3RDaGlsZC5pbmRleCwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAoY3VycmVudEZpcnN0Q2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKTtcbiAgICByZXR1cm4gZXhpc3RpbmdDaGlsZHJlbjtcbiAgfVxuICBmdW5jdGlvbiB1c2VGaWJlcihmaWJlciwgcGVuZGluZ1Byb3BzKSB7XG4gICAgZmliZXIgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhmaWJlciwgcGVuZGluZ1Byb3BzKTtcbiAgICBmaWJlci5pbmRleCA9IDA7XG4gICAgZmliZXIuc2libGluZyA9IG51bGw7XG4gICAgcmV0dXJuIGZpYmVyO1xuICB9XG4gIGZ1bmN0aW9uIHBsYWNlQ2hpbGQobmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SW5kZXgpIHtcbiAgICBuZXdGaWJlci5pbmRleCA9IG5ld0luZGV4O1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cylcbiAgICAgIHJldHVybiAobmV3RmliZXIuZmxhZ3MgfD0gMTA0ODU3NiksIGxhc3RQbGFjZWRJbmRleDtcbiAgICBuZXdJbmRleCA9IG5ld0ZpYmVyLmFsdGVybmF0ZTtcbiAgICBpZiAobnVsbCAhPT0gbmV3SW5kZXgpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmV3SW5kZXggPSBuZXdJbmRleC5pbmRleCksXG4gICAgICAgIG5ld0luZGV4IDwgbGFzdFBsYWNlZEluZGV4XG4gICAgICAgICAgPyAoKG5ld0ZpYmVyLmZsYWdzIHw9IDY3MTA4ODY2KSwgbGFzdFBsYWNlZEluZGV4KVxuICAgICAgICAgIDogbmV3SW5kZXhcbiAgICAgICk7XG4gICAgbmV3RmliZXIuZmxhZ3MgfD0gNjcxMDg4NjY7XG4gICAgcmV0dXJuIGxhc3RQbGFjZWRJbmRleDtcbiAgfVxuICBmdW5jdGlvbiBwbGFjZVNpbmdsZUNoaWxkKG5ld0ZpYmVyKSB7XG4gICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAobmV3RmliZXIuZmxhZ3MgfD0gNjcxMDg4NjYpO1xuICAgIHJldHVybiBuZXdGaWJlcjtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgY3VycmVudCwgdGV4dENvbnRlbnQsIGxhbmVzKSB7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgNiAhPT0gY3VycmVudC50YWcpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQodGV4dENvbnRlbnQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKSksXG4gICAgICAgIChjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgY3VycmVudFxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gdXNlRmliZXIoY3VycmVudCwgdGV4dENvbnRlbnQpO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudCwgbGFuZXMpIHtcbiAgICB2YXIgZWxlbWVudFR5cGUgPSBlbGVtZW50LnR5cGU7XG4gICAgaWYgKGVsZW1lbnRUeXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKVxuICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgZWxlbWVudC5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbGFuZXMsXG4gICAgICAgIGVsZW1lbnQua2V5XG4gICAgICApO1xuICAgIGlmIChcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIChjdXJyZW50LmVsZW1lbnRUeXBlID09PSBlbGVtZW50VHlwZSB8fFxuICAgICAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVsZW1lbnRUeXBlICYmXG4gICAgICAgICAgbnVsbCAhPT0gZWxlbWVudFR5cGUgJiZcbiAgICAgICAgICBlbGVtZW50VHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFICYmXG4gICAgICAgICAgcmVzb2x2ZUxhenkoZWxlbWVudFR5cGUpID09PSBjdXJyZW50LnR5cGUpKVxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gdXNlRmliZXIoY3VycmVudCwgZWxlbWVudC5wcm9wcykpLFxuICAgICAgICBjb2VyY2VSZWYoY3VycmVudCwgZWxlbWVudCksXG4gICAgICAgIChjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgY3VycmVudFxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgZWxlbWVudC50eXBlLFxuICAgICAgZWxlbWVudC5rZXksXG4gICAgICBlbGVtZW50LnByb3BzLFxuICAgICAgbnVsbCxcbiAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICBsYW5lc1xuICAgICk7XG4gICAgY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBjdXJyZW50LCBwb3J0YWwsIGxhbmVzKSB7XG4gICAgaWYgKFxuICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgNCAhPT0gY3VycmVudC50YWcgfHxcbiAgICAgIGN1cnJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gIT09IHBvcnRhbC5jb250YWluZXJJbmZvIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiAhPT0gcG9ydGFsLmltcGxlbWVudGF0aW9uXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIHBvcnRhbC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgY3VycmVudCwgZnJhZ21lbnQsIGxhbmVzLCBrZXkpIHtcbiAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCA3ICE9PSBjdXJyZW50LnRhZylcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICBrZXlcbiAgICAgICAgKSksXG4gICAgICAgIChjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgY3VycmVudFxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gdXNlRmliZXIoY3VycmVudCwgZnJhZ21lbnQpO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChuZXdDaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQoXG4gICAgICAgICAgXCJcIiArIG5ld0NoaWxkLFxuICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgIChuZXdDaGlsZC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIG5ld0NoaWxkXG4gICAgICApO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQua2V5LFxuICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgY29lcmNlUmVmKGxhbmVzLCBuZXdDaGlsZCksXG4gICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgbmV3Q2hpbGRcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICB2YXIgaW5pdCA9IG5ld0NoaWxkLl9pbml0O1xuICAgICAgICAgIG5ld0NoaWxkID0gaW5pdChuZXdDaGlsZC5fcGF5bG9hZCk7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChuZXdDaGlsZC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgbmV3Q2hpbGRcbiAgICAgICAgKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIHVud3JhcFRoZW5hYmxlKG5ld0NoaWxkKSwgbGFuZXMpO1xuICAgICAgaWYgKG5ld0NoaWxkLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgdmFyIGtleSA9IG51bGwgIT09IG9sZEZpYmVyID8gb2xkRmliZXIua2V5IDogbnVsbDtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gbnVsbCAhPT0ga2V5XG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBvbGRGaWJlciwgXCJcIiArIG5ld0NoaWxkLCBsYW5lcyk7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICByZXR1cm4gbmV3Q2hpbGQua2V5ID09PSBrZXlcbiAgICAgICAgICAgID8gdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gbmV3Q2hpbGQua2V5ID09PSBrZXlcbiAgICAgICAgICAgID8gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGtleSA9IG5ld0NoaWxkLl9pbml0KSxcbiAgICAgICAgICAgIChuZXdDaGlsZCA9IGtleShuZXdDaGlsZC5fcGF5bG9hZCkpLFxuICAgICAgICAgICAgdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGtleVxuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDogdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMsIG51bGwpO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG5ld0NoaWxkLnRoZW4pXG4gICAgICAgIHJldHVybiB1cGRhdGVTbG90KFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgIHVud3JhcFRoZW5hYmxlKG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgaWYgKG5ld0NoaWxkLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpXG4gICAgICAgIHJldHVybiB1cGRhdGVTbG90KFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUZyb21NYXAoXG4gICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICByZXR1cm5GaWJlcixcbiAgICBuZXdJZHgsXG4gICAgbmV3Q2hpbGQsXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGwpLFxuICAgICAgICB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgXCJcIiArIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICk7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPVxuICAgICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmdldChcbiAgICAgICAgICAgICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgKSB8fCBudWxsKSxcbiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9XG4gICAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KFxuICAgICAgICAgICAgICAgIG51bGwgPT09IG5ld0NoaWxkLmtleSA/IG5ld0lkeCA6IG5ld0NoaWxkLmtleVxuICAgICAgICAgICAgICApIHx8IG51bGwpLFxuICAgICAgICAgICAgdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICBuZXdDaGlsZCA9IGluaXQobmV3Q2hpbGQuX3BheWxvYWQpO1xuICAgICAgICAgIHJldHVybiB1cGRhdGVGcm9tTWFwKFxuICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgbmV3SWR4LFxuICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUltcGwobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsKSxcbiAgICAgICAgICB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKVxuICAgICAgICApO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG5ld0NoaWxkLnRoZW4pXG4gICAgICAgIHJldHVybiB1cGRhdGVGcm9tTWFwKFxuICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgbmV3SWR4LFxuICAgICAgICAgIHVud3JhcFRoZW5hYmxlKG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgaWYgKG5ld0NoaWxkLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpXG4gICAgICAgIHJldHVybiB1cGRhdGVGcm9tTWFwKFxuICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgbmV3SWR4LFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGRyZW4sXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgZm9yIChcbiAgICAgIHZhciByZXN1bHRpbmdGaXJzdENoaWxkID0gbnVsbCxcbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG51bGwsXG4gICAgICAgIG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgIG5ld0lkeCA9IChjdXJyZW50Rmlyc3RDaGlsZCA9IDApLFxuICAgICAgICBuZXh0T2xkRmliZXIgPSBudWxsO1xuICAgICAgbnVsbCAhPT0gb2xkRmliZXIgJiYgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgbmV3SWR4KytcbiAgICApIHtcbiAgICAgIG9sZEZpYmVyLmluZGV4ID4gbmV3SWR4XG4gICAgICAgID8gKChuZXh0T2xkRmliZXIgPSBvbGRGaWJlciksIChvbGRGaWJlciA9IG51bGwpKVxuICAgICAgICA6IChuZXh0T2xkRmliZXIgPSBvbGRGaWJlci5zaWJsaW5nKTtcbiAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgbmV3Q2hpbGRyZW5bbmV3SWR4XSxcbiAgICAgICAgbGFuZXNcbiAgICAgICk7XG4gICAgICBpZiAobnVsbCA9PT0gbmV3RmliZXIpIHtcbiAgICAgICAgbnVsbCA9PT0gb2xkRmliZXIgJiYgKG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgIG9sZEZpYmVyICYmXG4gICAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KTtcbiAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyKVxuICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcik7XG4gICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXI7XG4gICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICB9XG4gICAgaWYgKG5ld0lkeCA9PT0gbmV3Q2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKSxcbiAgICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpLFxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkXG4gICAgICApO1xuICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgZm9yICg7IG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspXG4gICAgICAgIChvbGRGaWJlciA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZHJlbltuZXdJZHhdLCBsYW5lcykpLFxuICAgICAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmXG4gICAgICAgICAgICAoKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChcbiAgICAgICAgICAgICAgb2xkRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdJZHhcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gb2xkRmliZXIpXG4gICAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG9sZEZpYmVyKSxcbiAgICAgICAgICAgIChwcmV2aW91c05ld0ZpYmVyID0gb2xkRmliZXIpKTtcbiAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cbiAgICBmb3IgKFxuICAgICAgb2xkRmliZXIgPSBtYXBSZW1haW5pbmdDaGlsZHJlbihvbGRGaWJlcik7XG4gICAgICBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7XG4gICAgICBuZXdJZHgrK1xuICAgIClcbiAgICAgIChuZXh0T2xkRmliZXIgPSB1cGRhdGVGcm9tTWFwKFxuICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG5ld0lkeCxcbiAgICAgICAgbmV3Q2hpbGRyZW5bbmV3SWR4XSxcbiAgICAgICAgbGFuZXNcbiAgICAgICkpLFxuICAgICAgICBudWxsICE9PSBuZXh0T2xkRmliZXIgJiZcbiAgICAgICAgICAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gbmV4dE9sZEZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgb2xkRmliZXIuZGVsZXRlKFxuICAgICAgICAgICAgICBudWxsID09PSBuZXh0T2xkRmliZXIua2V5ID8gbmV3SWR4IDogbmV4dE9sZEZpYmVyLmtleVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKFxuICAgICAgICAgICAgbmV4dE9sZEZpYmVyLFxuICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICBuZXdJZHhcbiAgICAgICAgICApKSxcbiAgICAgICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV4dE9sZEZpYmVyKVxuICAgICAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV4dE9sZEZpYmVyKSxcbiAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IG5leHRPbGRGaWJlcikpO1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG9sZEZpYmVyLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfSk7XG4gICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpO1xuICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICB9XG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGRyZW4sXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgaWYgKG51bGwgPT0gbmV3Q2hpbGRyZW4pIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUxKSk7XG4gICAgZm9yIChcbiAgICAgIHZhciByZXN1bHRpbmdGaXJzdENoaWxkID0gbnVsbCxcbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG51bGwsXG4gICAgICAgIG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgIG5ld0lkeCA9IChjdXJyZW50Rmlyc3RDaGlsZCA9IDApLFxuICAgICAgICBuZXh0T2xkRmliZXIgPSBudWxsLFxuICAgICAgICBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpO1xuICAgICAgbnVsbCAhPT0gb2xkRmliZXIgJiYgIXN0ZXAuZG9uZTtcbiAgICAgIG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpXG4gICAgKSB7XG4gICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeFxuICAgICAgICA/ICgobmV4dE9sZEZpYmVyID0gb2xkRmliZXIpLCAob2xkRmliZXIgPSBudWxsKSlcbiAgICAgICAgOiAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZyk7XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgc3RlcC52YWx1ZSwgbGFuZXMpO1xuICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICBvbGRGaWJlciAmJlxuICAgICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChuZXdGaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCk7XG4gICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcilcbiAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXIpO1xuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuICAgIGlmIChzdGVwLmRvbmUpXG4gICAgICByZXR1cm4gKFxuICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpLFxuICAgICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCksXG4gICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGRcbiAgICAgICk7XG4gICAgaWYgKG51bGwgPT09IG9sZEZpYmVyKSB7XG4gICAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpXG4gICAgICAgIChzdGVwID0gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIHN0ZXAudmFsdWUsIGxhbmVzKSksXG4gICAgICAgICAgbnVsbCAhPT0gc3RlcCAmJlxuICAgICAgICAgICAgKChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoc3RlcCwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCkpLFxuICAgICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gc3RlcClcbiAgICAgICAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gc3RlcCksXG4gICAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IHN0ZXApKTtcbiAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cbiAgICBmb3IgKFxuICAgICAgb2xkRmliZXIgPSBtYXBSZW1haW5pbmdDaGlsZHJlbihvbGRGaWJlcik7XG4gICAgICAhc3RlcC5kb25lO1xuICAgICAgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KClcbiAgICApXG4gICAgICAoc3RlcCA9IHVwZGF0ZUZyb21NYXAob2xkRmliZXIsIHJldHVybkZpYmVyLCBuZXdJZHgsIHN0ZXAudmFsdWUsIGxhbmVzKSksXG4gICAgICAgIG51bGwgIT09IHN0ZXAgJiZcbiAgICAgICAgICAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gc3RlcC5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIG9sZEZpYmVyLmRlbGV0ZShudWxsID09PSBzdGVwLmtleSA/IG5ld0lkeCA6IHN0ZXAua2V5KSxcbiAgICAgICAgICAoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKHN0ZXAsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpKSxcbiAgICAgICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gc3RlcClcbiAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IHN0ZXApLFxuICAgICAgICAgIChwcmV2aW91c05ld0ZpYmVyID0gc3RlcCkpO1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG9sZEZpYmVyLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfSk7XG4gICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpO1xuICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICB9XG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICByZXR1cm5GaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICBuZXdDaGlsZCxcbiAgICBsYW5lc1xuICApIHtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiZcbiAgICAgIG51bGwgIT09IG5ld0NoaWxkICYmXG4gICAgICBuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFICYmXG4gICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgJiZcbiAgICAgIChuZXdDaGlsZCA9IG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSA9IG5ld0NoaWxkLmtleTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7ICkge1xuICAgICAgICAgICAgICBpZiAoY3VycmVudEZpcnN0Q2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBuZXdDaGlsZC50eXBlO1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgICAgICAgICAgICAgIGlmICg3ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlciA9IGxhbmVzO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5lbGVtZW50VHlwZSA9PT0ga2V5IHx8XG4gICAgICAgICAgICAgICAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIGtleSAmJlxuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSBrZXkgJiZcbiAgICAgICAgICAgICAgICAgICAga2V5LiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUxhenkoa2V5KSA9PT0gY3VycmVudEZpcnN0Q2hpbGQudHlwZSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZ1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzID0gdXNlRmliZXIoY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLnByb3BzKTtcbiAgICAgICAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlciA9IGxhbmVzO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEVcbiAgICAgICAgICAgICAgPyAoKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmtleVxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKVxuICAgICAgICAgICAgICA6ICgobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC50eXBlLFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQua2V5LFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgY29lcmNlUmVmKGxhbmVzLCBuZXdDaGlsZCksXG4gICAgICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZXR1cm5GaWJlcik7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgZm9yIChrZXkgPSBuZXdDaGlsZC5rZXk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkLmtleSA9PT0ga2V5KVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIDQgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZyAmJlxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmNvbnRhaW5lckluZm8gJiZcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiA9PT1cbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQuaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZ1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzID0gdXNlRmliZXIoY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFuZXMgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKTtcbiAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpO1xuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGtleSA9IG5ld0NoaWxkLl9pbml0KSxcbiAgICAgICAgICAgIChuZXdDaGlsZCA9IGtleShuZXdDaGlsZC5fcGF5bG9hZCkpLFxuICAgICAgICAgICAgcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUltcGwobmV3Q2hpbGQpKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRyZW5BcnJheShcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgaWYgKGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGtleSA9IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2Yga2V5KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MCkpO1xuICAgICAgICBuZXdDaGlsZCA9IGtleS5jYWxsKG5ld0NoaWxkKTtcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIHVud3JhcFRoZW5hYmxlKG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgaWYgKG5ld0NoaWxkLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpXG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgICAgPyAoKG5ld0NoaWxkID0gXCJcIiArIG5ld0NoaWxkKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQgJiYgNiA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnXG4gICAgICAgICAgPyAoZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpLFxuICAgICAgICAgICAgKGxhbmVzID0gdXNlRmliZXIoY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkKSksXG4gICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKVxuICAgICAgICAgIDogKGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgICAgICAobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UZXh0KG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSksXG4gICAgICAgIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpKVxuICAgICAgOiBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICB0cnkge1xuICAgICAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwO1xuICAgICAgdmFyIGZpcnN0Q2hpbGRGaWJlciA9IHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgbGFuZXNcbiAgICAgICk7XG4gICAgICB0aGVuYWJsZVN0YXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBmaXJzdENoaWxkRmliZXI7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgaWYgKHggPT09IFN1c3BlbnNlRXhjZXB0aW9uIHx8IHggPT09IFN1c3BlbnNlQWN0aW9uRXhjZXB0aW9uKSB0aHJvdyB4O1xuICAgICAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjksIHgsIG51bGwsIHJldHVybkZpYmVyLm1vZGUpO1xuICAgICAgZmliZXIubGFuZXMgPSBsYW5lcztcbiAgICAgIGZpYmVyLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGZpYmVyO1xuICAgIH0gZmluYWxseSB7XG4gICAgfVxuICB9O1xufVxudmFyIHJlY29uY2lsZUNoaWxkRmliZXJzID0gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKCEwKSxcbiAgbW91bnRDaGlsZEZpYmVycyA9IGNyZWF0ZUNoaWxkUmVjb25jaWxlcighMSksXG4gIHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBzaGVsbEJvdW5kYXJ5ID0gbnVsbDtcbmZ1bmN0aW9uIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcihoYW5kbGVyKSB7XG4gIHZhciBjdXJyZW50ID0gaGFuZGxlci5hbHRlcm5hdGU7XG4gIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50ICYgMSk7XG4gIHB1c2goc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IsIGhhbmRsZXIpO1xuICBudWxsID09PSBzaGVsbEJvdW5kYXJ5ICYmXG4gICAgKG51bGwgPT09IGN1cnJlbnQgfHwgbnVsbCAhPT0gY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50XG4gICAgICA/IChzaGVsbEJvdW5kYXJ5ID0gaGFuZGxlcilcbiAgICAgIDogbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmIChzaGVsbEJvdW5kYXJ5ID0gaGFuZGxlcikpO1xufVxuZnVuY3Rpb24gcHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlcihmaWJlcikge1xuICBpZiAoMjIgPT09IGZpYmVyLnRhZykge1xuICAgIGlmIChcbiAgICAgIChwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBmaWJlciksXG4gICAgICBudWxsID09PSBzaGVsbEJvdW5kYXJ5KVxuICAgICkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoc2hlbGxCb3VuZGFyeSA9IGZpYmVyKTtcbiAgICB9XG4gIH0gZWxzZSByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2soZmliZXIpO1xufVxuZnVuY3Rpb24gcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKCkge1xuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCk7XG4gIHB1c2goc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IsIHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xufVxuZnVuY3Rpb24gcG9wU3VzcGVuc2VIYW5kbGVyKGZpYmVyKSB7XG4gIHBvcChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvcik7XG4gIHNoZWxsQm91bmRhcnkgPT09IGZpYmVyICYmIChzaGVsbEJvdW5kYXJ5ID0gbnVsbCk7XG4gIHBvcChzdXNwZW5zZVN0YWNrQ3Vyc29yKTtcbn1cbnZhciBzdXNwZW5zZVN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKDApO1xuZnVuY3Rpb24gZmluZEZpcnN0U3VzcGVuZGVkKHJvdykge1xuICBmb3IgKHZhciBub2RlID0gcm93OyBudWxsICE9PSBub2RlOyApIHtcbiAgICBpZiAoMTMgPT09IG5vZGUudGFnKSB7XG4gICAgICB2YXIgc3RhdGUgPSBub2RlLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgIT09IHN0YXRlICYmXG4gICAgICAgICgoc3RhdGUgPSBzdGF0ZS5kZWh5ZHJhdGVkKSxcbiAgICAgICAgbnVsbCA9PT0gc3RhdGUgfHxcbiAgICAgICAgICBcIiQ/XCIgPT09IHN0YXRlLmRhdGEgfHxcbiAgICAgICAgICBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhzdGF0ZSkpXG4gICAgICApXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0gZWxzZSBpZiAoMTkgPT09IG5vZGUudGFnICYmIHZvaWQgMCAhPT0gbm9kZS5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKSB7XG4gICAgICBpZiAoMCAhPT0gKG5vZGUuZmxhZ3MgJiAxMjgpKSByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSByb3cpIGJyZWFrO1xuICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSByb3cpIHJldHVybiBudWxsO1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY3RvcixcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuICBuZXh0UHJvcHNcbikge1xuICBjdG9yID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgY3Rvcik7XG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9XG4gICAgbnVsbCA9PT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IHZvaWQgMCA9PT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXG4gICAgICA/IGN0b3JcbiAgICAgIDogYXNzaWduKHt9LCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAwID09PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcyAmJlxuICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xufVxudmFyIGNsYXNzQ29tcG9uZW50VXBkYXRlciA9IHtcbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoaW5zdCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgcGF5bG9hZCA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBwYXlsb2FkICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHBheWxvYWQsIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhwYXlsb2FkLCBpbnN0LCBsYW5lKSk7XG4gIH0sXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnRhZyA9IDE7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBwYXlsb2FkID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IHBheWxvYWQgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocGF5bG9hZCwgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHBheWxvYWQsIGluc3QsIGxhbmUpKTtcbiAgfSxcbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoaW5zdCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS50YWcgPSAyO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBjYWxsYmFjayA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBjYWxsYmFjayAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihjYWxsYmFjaywgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKGNhbGxiYWNrLCBpbnN0LCBsYW5lKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGN0b3IsXG4gIG9sZFByb3BzLFxuICBuZXdQcm9wcyxcbiAgb2xkU3RhdGUsXG4gIG5ld1N0YXRlLFxuICBuZXh0Q29udGV4dFxuKSB7XG4gIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3Muc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gICAgPyB3b3JrSW5Qcm9ncmVzcy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXh0Q29udGV4dClcbiAgICA6IGN0b3IucHJvdG90eXBlICYmIGN0b3IucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50XG4gICAgICA/ICFzaGFsbG93RXF1YWwob2xkUHJvcHMsIG5ld1Byb3BzKSB8fCAhc2hhbGxvd0VxdWFsKG9sZFN0YXRlLCBuZXdTdGF0ZSlcbiAgICAgIDogITA7XG59XG5mdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGluc3RhbmNlLFxuICBuZXdQcm9wcyxcbiAgbmV4dENvbnRleHRcbikge1xuICB3b3JrSW5Qcm9ncmVzcyA9IGluc3RhbmNlLnN0YXRlO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAmJlxuICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIGluc3RhbmNlLnN0YXRlICE9PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgIGNsYXNzQ29tcG9uZW50VXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGJhc2VQcm9wcykge1xuICB2YXIgbmV3UHJvcHMgPSBiYXNlUHJvcHM7XG4gIGlmIChcInJlZlwiIGluIGJhc2VQcm9wcykge1xuICAgIG5ld1Byb3BzID0ge307XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gYmFzZVByb3BzKVxuICAgICAgXCJyZWZcIiAhPT0gcHJvcE5hbWUgJiYgKG5ld1Byb3BzW3Byb3BOYW1lXSA9IGJhc2VQcm9wc1twcm9wTmFtZV0pO1xuICB9XG4gIGlmICgoQ29tcG9uZW50ID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcykpIHtcbiAgICBuZXdQcm9wcyA9PT0gYmFzZVByb3BzICYmIChuZXdQcm9wcyA9IGFzc2lnbih7fSwgbmV3UHJvcHMpKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSQ3MyBpbiBDb21wb25lbnQpXG4gICAgICB2b2lkIDAgPT09IG5ld1Byb3BzW3Byb3BOYW1lJDczXSAmJlxuICAgICAgICAobmV3UHJvcHNbcHJvcE5hbWUkNzNdID0gQ29tcG9uZW50W3Byb3BOYW1lJDczXSk7XG4gIH1cbiAgcmV0dXJuIG5ld1Byb3BzO1xufVxudmFyIHJlcG9ydEdsb2JhbEVycm9yID1cbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVwb3J0RXJyb3JcbiAgICA/IHJlcG9ydEVycm9yXG4gICAgOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3aW5kb3cuRXJyb3JFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkVycm9yRXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVycm9yICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcoZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9jZXNzICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJvY2Vzcy5lbWl0XG4gICAgICAgICkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9O1xuZnVuY3Rpb24gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcihlcnJvcikge1xuICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBkZWZhdWx0T25DYXVnaHRFcnJvcihlcnJvcikge1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IoZXJyb3IpIHtcbiAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gbG9nVW5jYXVnaHRFcnJvcihyb290LCBlcnJvckluZm8pIHtcbiAgdHJ5IHtcbiAgICB2YXIgb25VbmNhdWdodEVycm9yID0gcm9vdC5vblVuY2F1Z2h0RXJyb3I7XG4gICAgb25VbmNhdWdodEVycm9yKGVycm9ySW5mby52YWx1ZSwgeyBjb21wb25lbnRTdGFjazogZXJyb3JJbmZvLnN0YWNrIH0pO1xuICB9IGNhdGNoIChlJDc0KSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlJDc0O1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBsb2dDYXVnaHRFcnJvcihyb290LCBib3VuZGFyeSwgZXJyb3JJbmZvKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9uQ2F1Z2h0RXJyb3IgPSByb290Lm9uQ2F1Z2h0RXJyb3I7XG4gICAgb25DYXVnaHRFcnJvcihlcnJvckluZm8udmFsdWUsIHtcbiAgICAgIGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uc3RhY2ssXG4gICAgICBlcnJvckJvdW5kYXJ5OiAxID09PSBib3VuZGFyeS50YWcgPyBib3VuZGFyeS5zdGF0ZU5vZGUgOiBudWxsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUkNzUpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGUkNzU7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShyb290LCBlcnJvckluZm8sIGxhbmUpIHtcbiAgbGFuZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgbGFuZS50YWcgPSAzO1xuICBsYW5lLnBheWxvYWQgPSB7IGVsZW1lbnQ6IG51bGwgfTtcbiAgbGFuZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2dVbmNhdWdodEVycm9yKHJvb3QsIGVycm9ySW5mbyk7XG4gIH07XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShsYW5lKSB7XG4gIGxhbmUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGxhbmUudGFnID0gMztcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZSh1cGRhdGUsIHJvb3QsIGZpYmVyLCBlcnJvckluZm8pIHtcbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZpYmVyLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKSB7XG4gICAgdmFyIGVycm9yID0gZXJyb3JJbmZvLnZhbHVlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICB1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDYXVnaHRFcnJvcihyb290LCBmaWJlciwgZXJyb3JJbmZvKTtcbiAgICB9O1xuICB9XG4gIHZhciBpbnN0ID0gZmliZXIuc3RhdGVOb2RlO1xuICBudWxsICE9PSBpbnN0ICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdC5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICh1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDYXVnaHRFcnJvcihyb290LCBmaWJlciwgZXJyb3JJbmZvKTtcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAmJlxuICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWRcbiAgICAgICAgICA/IChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG5ldyBTZXQoW3RoaXNdKSlcbiAgICAgICAgICA6IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmFkZCh0aGlzKSk7XG4gICAgICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gICAgICB0aGlzLmNvbXBvbmVudERpZENhdGNoKGVycm9ySW5mby52YWx1ZSwge1xuICAgICAgICBjb21wb25lbnRTdGFjazogbnVsbCAhPT0gc3RhY2sgPyBzdGFjayA6IFwiXCJcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oXG4gIHJvb3QsXG4gIHJldHVybkZpYmVyLFxuICBzb3VyY2VGaWJlcixcbiAgdmFsdWUsXG4gIHJvb3RSZW5kZXJMYW5lc1xuKSB7XG4gIHNvdXJjZUZpYmVyLmZsYWdzIHw9IDMyNzY4O1xuICBpZiAoXG4gICAgbnVsbCAhPT0gdmFsdWUgJiZcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZS50aGVuXG4gICkge1xuICAgIHJldHVybkZpYmVyID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IHJldHVybkZpYmVyICYmXG4gICAgICBwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICByb290UmVuZGVyTGFuZXMsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIHNvdXJjZUZpYmVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICBpZiAobnVsbCAhPT0gc291cmNlRmliZXIpIHtcbiAgICAgIHN3aXRjaCAoc291cmNlRmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG51bGwgPT09IHNoZWxsQm91bmRhcnlcbiAgICAgICAgICAgICAgPyByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKClcbiAgICAgICAgICAgICAgOiBudWxsID09PSBzb3VyY2VGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgICAgICAwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAzKSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyAmPSAtMjU3KSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgPSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgdmFsdWUgPT09IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZVxuICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci5mbGFncyB8PSAxNjM4NClcbiAgICAgICAgICAgICAgOiAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSA9IG5ldyBTZXQoW3ZhbHVlXSkpXG4gICAgICAgICAgICAgICAgICA6IHJldHVybkZpYmVyLmFkZCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIHZhbHVlID09PSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGVcbiAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIuZmxhZ3MgfD0gMTYzODQpXG4gICAgICAgICAgICAgIDogKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgICBudWxsID09PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgPyAoKHJldHVybkZpYmVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25zOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIG1hcmtlckluc3RhbmNlczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICByZXRyeVF1ZXVlOiBuZXcgU2V0KFt2YWx1ZV0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAoc291cmNlRmliZXIudXBkYXRlUXVldWUgPSByZXR1cm5GaWJlcikpXG4gICAgICAgICAgICAgICAgICA6ICgoc291cmNlRmliZXIgPSByZXR1cm5GaWJlci5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IChyZXR1cm5GaWJlci5yZXRyeVF1ZXVlID0gbmV3IFNldChbdmFsdWVdKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHNvdXJjZUZpYmVyLmFkZCh2YWx1ZSkpLFxuICAgICAgICAgICAgICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQzNSwgc291cmNlRmliZXIudGFnKSk7XG4gICAgfVxuICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKTtcbiAgICByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG4gICAgcmV0dXJuICExO1xuICB9XG4gIGlmIChpc0h5ZHJhdGluZylcbiAgICByZXR1cm4gKFxuICAgICAgKHJldHVybkZpYmVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICBudWxsICE9PSByZXR1cm5GaWJlclxuICAgICAgICA/ICgwID09PSAocmV0dXJuRmliZXIuZmxhZ3MgJiA2NTUzNikgJiYgKHJldHVybkZpYmVyLmZsYWdzIHw9IDI1NiksXG4gICAgICAgICAgKHJldHVybkZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocmV0dXJuRmliZXIubGFuZXMgPSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIHZhbHVlICE9PSBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgKChyb290ID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjIpLCB7IGNhdXNlOiB2YWx1ZSB9KSksXG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHJvb3QsIHNvdXJjZUZpYmVyKSkpKVxuICAgICAgICA6ICh2YWx1ZSAhPT0gSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gJiZcbiAgICAgICAgICAgICgocmV0dXJuRmliZXIgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyMyksIHtcbiAgICAgICAgICAgICAgY2F1c2U6IHZhbHVlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKFxuICAgICAgICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihyZXR1cm5GaWJlciwgc291cmNlRmliZXIpXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAocm9vdCA9IHJvb3QuY3VycmVudC5hbHRlcm5hdGUpLFxuICAgICAgICAgIChyb290LmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocm9vdFJlbmRlckxhbmVzICY9IC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyb290LmxhbmVzIHw9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHZhbHVlID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZUZpYmVyKSksXG4gICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShcbiAgICAgICAgICAgIHJvb3Quc3RhdGVOb2RlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICByb290UmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUocm9vdCwgcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICA0ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDIpKSxcbiAgICAgICExXG4gICAgKTtcbiAgdmFyIHdyYXBwZXJFcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIwKSwgeyBjYXVzZTogdmFsdWUgfSk7XG4gIHdyYXBwZXJFcnJvciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHdyYXBwZXJFcnJvciwgc291cmNlRmliZXIpO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzXG4gICAgPyAod29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyA9IFt3cmFwcGVyRXJyb3JdKVxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycy5wdXNoKHdyYXBwZXJFcnJvcik7XG4gIDQgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAyKTtcbiAgaWYgKG51bGwgPT09IHJldHVybkZpYmVyKSByZXR1cm4gITA7XG4gIHZhbHVlID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZUZpYmVyKTtcbiAgc291cmNlRmliZXIgPSByZXR1cm5GaWJlcjtcbiAgZG8ge1xuICAgIHN3aXRjaCAoc291cmNlRmliZXIudGFnKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocm9vdCA9IHJvb3RSZW5kZXJMYW5lcyAmIC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyB8PSByb290KSxcbiAgICAgICAgICAocm9vdCA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShzb3VyY2VGaWJlci5zdGF0ZU5vZGUsIHZhbHVlLCByb290KSksXG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHNvdXJjZUZpYmVyLCByb290KSxcbiAgICAgICAgICAhMVxuICAgICAgICApO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnR5cGUpLFxuICAgICAgICAgICh3cmFwcGVyRXJyb3IgPSBzb3VyY2VGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgIDAgPT09IChzb3VyY2VGaWJlci5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5GaWJlci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAgICAgKG51bGwgIT09IHdyYXBwZXJFcnJvciAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdyYXBwZXJFcnJvci5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAgICAgIWxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmhhcyh3cmFwcGVyRXJyb3IpKSkpKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICAocm9vdFJlbmRlckxhbmVzICY9IC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzIHw9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAocm9vdFJlbmRlckxhbmVzID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShyb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgIGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICByb290UmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShzb3VyY2VGaWJlciwgcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICB9XG4gICAgc291cmNlRmliZXIgPSBzb3VyY2VGaWJlci5yZXR1cm47XG4gIH0gd2hpbGUgKG51bGwgIT09IHNvdXJjZUZpYmVyKTtcbiAgcmV0dXJuICExO1xufVxudmFyIFNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYxKSksXG4gIGRpZFJlY2VpdmVVcGRhdGUgPSAhMTtcbmZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID1cbiAgICBudWxsID09PSBjdXJyZW50XG4gICAgICA/IG1vdW50Q2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIG51bGwsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpXG4gICAgICA6IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgbmV4dENoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVGb3J3YXJkUmVmKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgQ29tcG9uZW50ID0gQ29tcG9uZW50LnJlbmRlcjtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKFwicmVmXCIgaW4gbmV4dFByb3BzKSB7XG4gICAgdmFyIHByb3BzV2l0aG91dFJlZiA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBuZXh0UHJvcHMpXG4gICAgICBcInJlZlwiICE9PSBrZXkgJiYgKHByb3BzV2l0aG91dFJlZltrZXldID0gbmV4dFByb3BzW2tleV0pO1xuICB9IGVsc2UgcHJvcHNXaXRob3V0UmVmID0gbmV4dFByb3BzO1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IHJlbmRlcldpdGhIb29rcyhcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIENvbXBvbmVudCxcbiAgICBwcm9wc1dpdGhvdXRSZWYsXG4gICAgcmVmLFxuICAgIHJlbmRlckxhbmVzXG4gICk7XG4gIGtleSA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIGtleSAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICB2YXIgdHlwZSA9IENvbXBvbmVudC50eXBlO1xuICAgIGlmIChcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUgJiZcbiAgICAgICFzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiZcbiAgICAgIHZvaWQgMCA9PT0gdHlwZS5kZWZhdWx0UHJvcHMgJiZcbiAgICAgIG51bGwgPT09IENvbXBvbmVudC5jb21wYXJlXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDE1KSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSB0eXBlKSxcbiAgICAgICAgdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIENvbXBvbmVudC50eXBlLFxuICAgICAgbnVsbCxcbiAgICAgIG5leHRQcm9wcyxcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgd29ya0luUHJvZ3Jlc3MubW9kZSxcbiAgICAgIHJlbmRlckxhbmVzXG4gICAgKTtcbiAgICBjdXJyZW50LnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgICBjdXJyZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50KTtcbiAgfVxuICB0eXBlID0gY3VycmVudC5jaGlsZDtcbiAgaWYgKCFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpIHtcbiAgICB2YXIgcHJldlByb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgIENvbXBvbmVudCA9IENvbXBvbmVudC5jb21wYXJlO1xuICAgIENvbXBvbmVudCA9IG51bGwgIT09IENvbXBvbmVudCA/IENvbXBvbmVudCA6IHNoYWxsb3dFcXVhbDtcbiAgICBpZiAoQ29tcG9uZW50KHByZXZQcm9wcywgbmV4dFByb3BzKSAmJiBjdXJyZW50LnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmKVxuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgfVxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICBjdXJyZW50ID0gY3JlYXRlV29ya0luUHJvZ3Jlc3ModHlwZSwgbmV4dFByb3BzKTtcbiAgY3VycmVudC5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIGN1cnJlbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gICAgaWYgKFxuICAgICAgc2hhbGxvd0VxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKSAmJlxuICAgICAgY3VycmVudC5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZlxuICAgIClcbiAgICAgIGlmIChcbiAgICAgICAgKChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzID0gbmV4dFByb3BzID0gcHJldlByb3BzKSxcbiAgICAgICAgY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpKVxuICAgICAgKVxuICAgICAgICAwICE9PSAoY3VycmVudC5mbGFncyAmIDEzMTA3MikgJiYgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gY3VycmVudC5sYW5lcyksXG4gICAgICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICAgICk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICByZW5kZXJMYW5lc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIG5leHRDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbixcbiAgICBwcmV2U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgaWYgKFwiaGlkZGVuXCIgPT09IG5leHRQcm9wcy5tb2RlKSB7XG4gICAgaWYgKDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkpIHtcbiAgICAgIG5leHRQcm9wcyA9XG4gICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5iYXNlTGFuZXMgfCByZW5kZXJMYW5lcyA6IHJlbmRlckxhbmVzO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQpIHtcbiAgICAgICAgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkO1xuICAgICAgICBmb3IgKHByZXZTdGF0ZSA9IDA7IG51bGwgIT09IG5leHRDaGlsZHJlbjsgKVxuICAgICAgICAgIChwcmV2U3RhdGUgPVxuICAgICAgICAgICAgcHJldlN0YXRlIHwgbmV4dENoaWxkcmVuLmxhbmVzIHwgbmV4dENoaWxkcmVuLmNoaWxkTGFuZXMpLFxuICAgICAgICAgICAgKG5leHRDaGlsZHJlbiA9IG5leHRDaGlsZHJlbi5zaWJsaW5nKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IHByZXZTdGF0ZSAmIH5uZXh0UHJvcHM7XG4gICAgICB9IGVsc2UgKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCk7XG4gICAgICByZXR1cm4gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoMCAhPT0gKHJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSlcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0geyBiYXNlTGFuZXM6IDAsIGNhY2hlUG9vbDogbnVsbCB9KSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIHB1c2hUcmFuc2l0aW9uKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuY2FjaGVQb29sIDogbnVsbFxuICAgICAgICAgICksXG4gICAgICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgICAgID8gcHVzaEhpZGRlbkNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZSlcbiAgICAgICAgICA6IHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzIDogcmVuZGVyTGFuZXMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfSBlbHNlXG4gICAgbnVsbCAhPT0gcHJldlN0YXRlXG4gICAgICA/IChwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlLmNhY2hlUG9vbCksXG4gICAgICAgIHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpLFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGwpKVxuICAgICAgOiAobnVsbCAhPT0gY3VycmVudCAmJiBwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgbnVsbCksXG4gICAgICAgIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSk7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0QmFzZUxhbmVzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgPyBudWxsXG4gICAgICA6IHsgcGFyZW50OiBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSwgcG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IH07XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgYmFzZUxhbmVzOiBuZXh0QmFzZUxhbmVzLFxuICAgIGNhY2hlUG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gIH07XG4gIG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpO1xuICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCk7XG4gIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMCk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAobnVsbCA9PT0gcmVmKVxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQucmVmICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDgxNik7XG4gIGVsc2Uge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiByZWYgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHJlZilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjg0KSk7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC5yZWYgIT09IHJlZilcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQ4MTY7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBDb21wb25lbnQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHZvaWQgMCxcbiAgICByZW5kZXJMYW5lc1xuICApO1xuICBuZXh0UHJvcHMgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAhZGlkUmVjZWl2ZVVwZGF0ZSlcbiAgICByZXR1cm4gKFxuICAgICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyksXG4gICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICApO1xuICBpc0h5ZHJhdGluZyAmJiBuZXh0UHJvcHMgJiYgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0UHJvcHMsXG4gIENvbXBvbmVudCxcbiAgc2Vjb25kQXJnLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICBuZXh0UHJvcHMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHNlY29uZEFyZ1xuICApO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgQ29tcG9uZW50ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgQ29tcG9uZW50ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3QsXG4gICAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlICYmXG4gICAgICAoY29udGV4dCA9IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKSk7XG4gICAgY29udGV4dCA9IG5ldyBDb21wb25lbnQobmV4dFByb3BzLCBjb250ZXh0KTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgIG51bGwgIT09IGNvbnRleHQuc3RhdGUgJiYgdm9pZCAwICE9PSBjb250ZXh0LnN0YXRlID8gY29udGV4dC5zdGF0ZSA6IG51bGw7XG4gICAgY29udGV4dC51cGRhdGVyID0gY2xhc3NDb21wb25lbnRVcGRhdGVyO1xuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGNvbnRleHQ7XG4gICAgY29udGV4dC5fcmVhY3RJbnRlcm5hbHMgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5yZWZzID0ge307XG4gICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0LmNvbnRleHQgPVxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmIG51bGwgIT09IGNvbnRleHRUeXBlXG4gICAgICAgID8gcmVhZENvbnRleHQoY29udGV4dFR5cGUpXG4gICAgICAgIDogZW1wdHlDb250ZXh0T2JqZWN0O1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJlxuICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICBjb250ZXh0VHlwZSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICgoY29udGV4dFR5cGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBjb250ZXh0VHlwZSAhPT0gY29udGV4dC5zdGF0ZSAmJlxuICAgICAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShjb250ZXh0LCBjb250ZXh0LnN0YXRlLCBudWxsKSxcbiAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyksXG4gICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCksXG4gICAgICAoY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKTtcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCk7XG4gICAgbmV4dFByb3BzID0gITA7XG4gIH0gZWxzZSBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIHVucmVzb2x2ZWRPbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMsXG4gICAgICBvbGRQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgdW5yZXNvbHZlZE9sZFByb3BzKTtcbiAgICBjb250ZXh0LnByb3BzID0gb2xkUHJvcHM7XG4gICAgdmFyIG9sZENvbnRleHQgPSBjb250ZXh0LmNvbnRleHQsXG4gICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0VHlwZSA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUkanNjb21wJDAgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICAoY29udGV4dFR5cGUgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSRqc2NvbXAkMCkpO1xuICAgIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgIT09IHVucmVzb2x2ZWRPbGRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKCh1bnJlc29sdmVkT2xkUHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gY29udGV4dFR5cGUpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIGNvbnRleHRUeXBlXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgdmFyIG9sZFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0LnN0YXRlID0gb2xkU3RhdGU7XG4gICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIGNvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCk7XG4gICAgb2xkQ29udGV4dCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRDb250ZXh0IHx8IGhhc0ZvcmNlVXBkYXRlXG4gICAgICA/IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgJiZcbiAgICAgICAgICAoYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgICAgICAgICAgIG5leHRQcm9wc1xuICAgICAgICAgICksXG4gICAgICAgICAgKG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChvbGRQcm9wcyA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgb2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG9sZENvbnRleHQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICAgICkpXG4gICAgICAgICAgPyAoY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gb2xkQ29udGV4dCkpLFxuICAgICAgICAoY29udGV4dC5wcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgIChjb250ZXh0LnN0YXRlID0gb2xkQ29udGV4dCksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBjb250ZXh0VHlwZSksXG4gICAgICAgIChuZXh0UHJvcHMgPSBvbGRQcm9wcykpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIGNvbnRleHRUeXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgY29udGV4dFR5cGUpO1xuICAgIGNvbnRleHQucHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMDtcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgb2xkU3RhdGUgPSBjb250ZXh0LmNvbnRleHQ7XG4gICAgb2xkQ29udGV4dCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBvbGRQcm9wcyA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2xkQ29udGV4dCAmJlxuICAgICAgbnVsbCAhPT0gb2xkQ29udGV4dCAmJlxuICAgICAgKG9sZFByb3BzID0gcmVhZENvbnRleHQob2xkQ29udGV4dCkpO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgKG9sZENvbnRleHQgPVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzIHx8XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKChjb250ZXh0VHlwZSAhPT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRQcm9wcykgJiZcbiAgICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgKSk7XG4gICAgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbiAgICBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIHZhciBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgIG9sZFN0YXRlICE9PSBuZXdTdGF0ZSB8fFxuICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICB1bnJlc29sdmVkT2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgICAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgICAgICAgIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCxcbiAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgIG9sZFN0YXRlLFxuICAgICAgICAgICAgbmV3U3RhdGUsXG4gICAgICAgICAgICBvbGRQcm9wc1xuICAgICAgICAgICkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5kZXBlbmRlbmNpZXMgJiZcbiAgICAgICAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50LmRlcGVuZGVuY2llcykpKVxuICAgICAgICAgID8gKG9sZENvbnRleHQgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXdTdGF0ZSwgb2xkUHJvcHMpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgJiZcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpKVxuICAgICAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG5ld1N0YXRlKSxcbiAgICAgICAgKGNvbnRleHQuY29udGV4dCA9IG9sZFByb3BzKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNvbnRleHRUeXBlJGpzY29tcCQwKSlcbiAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfVxuICBjb250ZXh0ID0gbmV4dFByb3BzO1xuICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KTtcbiAgY29udGV4dCB8fCBuZXh0UHJvcHNcbiAgICA/ICgoY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSksXG4gICAgICAoQ29tcG9uZW50ID1cbiAgICAgICAgbmV4dFByb3BzICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3JcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IGNvbnRleHQucmVuZGVyKCkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBuZXh0UHJvcHNcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpKVxuICAgIDogKGN1cnJlbnQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dENoaWxkcmVuLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjU2O1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbnZhciBTVVNQRU5ERURfTUFSS0VSID0ge1xuICBkZWh5ZHJhdGVkOiBudWxsLFxuICB0cmVlQ29udGV4dDogbnVsbCxcbiAgcmV0cnlMYW5lOiAwLFxuICBoeWRyYXRpb25FcnJvcnM6IG51bGxcbn07XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIHsgYmFzZUxhbmVzOiByZW5kZXJMYW5lcywgY2FjaGVQb29sOiBnZXRTdXNwZW5kZWRDYWNoZSgpIH07XG59XG5mdW5jdGlvbiBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgY3VycmVudCxcbiAgcHJpbWFyeVRyZWVEaWREZWZlcixcbiAgcmVuZGVyTGFuZXNcbikge1xuICBjdXJyZW50ID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuY2hpbGRMYW5lcyAmIH5yZW5kZXJMYW5lcyA6IDA7XG4gIHByaW1hcnlUcmVlRGlkRGVmZXIgJiYgKGN1cnJlbnQgfD0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIHNob3dGYWxsYmFjayA9ICExLFxuICAgIGRpZFN1c3BlbmQgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgKEpTQ29tcGlsZXJfdGVtcCA9IGRpZFN1c3BlbmQpIHx8XG4gICAgKEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/ICExXG4gICAgICAgIDogMCAhPT0gKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDIpKTtcbiAgSlNDb21waWxlcl90ZW1wICYmICgoc2hvd0ZhbGxiYWNrID0gITApLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTEyOSkpO1xuICBKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAzMik7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0zMztcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICA/IHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlLFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgaWYgKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UpKSB7XG4gICAgICAgICAgYzoge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gcm9vdE9yU2luZ2xldG9uQ29udGV4dDtcbiAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKCFuZXh0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlXG4gICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBkZWh5ZHJhdGVkOiBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgdHJlZUNvbnRleHQ6XG4gICAgICAgICAgICAgICAgICBudWxsICE9PSB0cmVlQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgID8geyBpZDogdHJlZUNvbnRleHRJZCwgb3ZlcmZsb3c6IHRyZWVDb250ZXh0T3ZlcmZsb3cgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgcmV0cnlMYW5lOiA1MzY4NzA5MTIsXG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uRXJyb3JzOiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc3RhdGVOb2RlID0gbmV4dEluc3RhbmNlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCksXG4gICAgICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9ICEwKSlcbiAgICAgICAgICAgIDogKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIG5leHRJbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZSAmJlxuICAgICAgICAoKG5leHRJbnN0YW5jZSA9IG5leHRJbnN0YW5jZS5kZWh5ZHJhdGVkKSwgbnVsbCAhPT0gbmV4dEluc3RhbmNlKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGlzU3VzcGVuc2VJbnN0YW5jZUZhbGxiYWNrKG5leHRJbnN0YW5jZSlcbiAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMzIpXG4gICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gICAgbmV4dEluc3RhbmNlID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgIG5leHRQcm9wcyA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAobmV4dEluc3RhbmNlID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgICAgICAgIHsgbW9kZTogXCJoaWRkZW5cIiwgY2hpbGRyZW46IG5leHRJbnN0YW5jZSB9LFxuICAgICAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICApKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZS5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChuZXh0UHJvcHMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobmV4dEluc3RhbmNlLnNpYmxpbmcgPSBuZXh0UHJvcHMpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUiksXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKTtcbiAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIHJldHVybiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBuZXh0SW5zdGFuY2UpO1xuICB9XG4gIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCAmJlxuICAgICgobmV4dEluc3RhbmNlID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLmRlaHlkcmF0ZWQpLFxuICAgIG51bGwgIT09IG5leHRJbnN0YW5jZSlcbiAgKSB7XG4gICAgaWYgKGRpZFN1c3BlbmQpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NlxuICAgICAgICA/IChwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjU3KSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgICAgOiAocmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sgPSBuZXh0UHJvcHMuZmFsbGJhY2spLFxuICAgICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICAgICAgICAgICAgeyBtb2RlOiBcInZpc2libGVcIiwgY2hpbGRyZW46IG5leHRQcm9wcy5jaGlsZHJlbiB9LFxuICAgICAgICAgICAgICBuZXh0SW5zdGFuY2VcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjayA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjay5mbGFncyB8PSAyKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5tZW1vaXplZFN0YXRlID1cbiAgICAgICAgICAgICAgbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAobmV4dFByb3BzLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gc2hvd0ZhbGxiYWNrKSk7XG4gICAgZWxzZSBpZiAoXG4gICAgICAocHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgIGlzU3VzcGVuc2VJbnN0YW5jZUZhbGxiYWNrKG5leHRJbnN0YW5jZSkpXG4gICAgKSB7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICBuZXh0SW5zdGFuY2UubmV4dFNpYmxpbmcgJiYgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG4gICAgICBpZiAoSlNDb21waWxlcl90ZW1wKSB2YXIgZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wLmRnc3Q7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPSBkaWdlc3Q7XG4gICAgICBuZXh0UHJvcHMgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOSkpO1xuICAgICAgbmV4dFByb3BzLnN0YWNrID0gXCJcIjtcbiAgICAgIG5leHRQcm9wcy5kaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXA7XG4gICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKHsgdmFsdWU6IG5leHRQcm9wcywgc291cmNlOiBudWxsLCBzdGFjazogbnVsbCB9KTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAgICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHJlbmRlckxhbmVzICYgY3VycmVudC5jaGlsZExhbmVzKSksXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlIHx8IEpTQ29tcGlsZXJfdGVtcClcbiAgICApIHtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzUm9vdDtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gSlNDb21waWxlcl90ZW1wICYmXG4gICAgICAgICgobmV4dFByb3BzID0gcmVuZGVyTGFuZXMgJiAtcmVuZGVyTGFuZXMpLFxuICAgICAgICAobmV4dFByb3BzID1cbiAgICAgICAgICAwICE9PSAobmV4dFByb3BzICYgNDIpXG4gICAgICAgICAgICA/IDFcbiAgICAgICAgICAgIDogZ2V0QnVtcGVkTGFuZUZvckh5ZHJhdGlvbkJ5TGFuZShuZXh0UHJvcHMpKSxcbiAgICAgICAgKG5leHRQcm9wcyA9XG4gICAgICAgICAgMCAhPT0gKG5leHRQcm9wcyAmIChKU0NvbXBpbGVyX3RlbXAuc3VzcGVuZGVkTGFuZXMgfCByZW5kZXJMYW5lcykpXG4gICAgICAgICAgICA/IDBcbiAgICAgICAgICAgIDogbmV4dFByb3BzKSxcbiAgICAgICAgMCAhPT0gbmV4dFByb3BzICYmIG5leHRQcm9wcyAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSlcbiAgICAgIClcbiAgICAgICAgdGhyb3cgKFxuICAgICAgICAgICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKEpTQ29tcGlsZXJfdGVtcCwgY3VycmVudCwgbmV4dFByb3BzKSxcbiAgICAgICAgICBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24pXG4gICAgICAgICk7XG4gICAgICBcIiQ/XCIgPT09IG5leHRJbnN0YW5jZS5kYXRhIHx8IHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIFwiJD9cIiA9PT0gbmV4dEluc3RhbmNlLmRhdGFcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE5MiksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgIDogKChjdXJyZW50ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnRyZWVDb250ZXh0KSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgIChpc0h5ZHJhdGluZyA9ICEwKSxcbiAgICAgICAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0SWQpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRPdmVyZmxvdyksXG4gICAgICAgICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dFByb3ZpZGVyKSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dElkID0gY3VycmVudC5pZCksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGN1cnJlbnQub3ZlcmZsb3cpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG5leHRQcm9wcy5jaGlsZHJlblxuICAgICAgICAgICkpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MDk2KSk7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICB9XG4gIGlmIChzaG93RmFsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gbmV4dFByb3BzLmZhbGxiYWNrKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgIChkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc2libGluZyksXG4gICAgICAobmV4dFByb3BzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLCB7XG4gICAgICAgIG1vZGU6IFwiaGlkZGVuXCIsXG4gICAgICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgIH0pKSxcbiAgICAgIChuZXh0UHJvcHMuc3VidHJlZUZsYWdzID1cbiAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnN1YnRyZWVGbGFncyAmIDY1MDExNzEyKSxcbiAgICAgIG51bGwgIT09IGRpZ2VzdFxuICAgICAgICA/IChzaG93RmFsbGJhY2sgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhkaWdlc3QsIHNob3dGYWxsYmFjaykpXG4gICAgICAgIDogKChzaG93RmFsbGJhY2sgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChzaG93RmFsbGJhY2suZmxhZ3MgfD0gMikpLFxuICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgKG5leHRQcm9wcyA9IHNob3dGYWxsYmFjayksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgKG5leHRJbnN0YW5jZSA9IGN1cnJlbnQuY2hpbGQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsID09PSBuZXh0SW5zdGFuY2VcbiAgICAgICAgPyAobmV4dEluc3RhbmNlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSlcbiAgICAgICAgOiAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZS5jYWNoZVBvb2wpLFxuICAgICAgICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgICAgPyAoKGRpZ2VzdCA9IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnBhcmVudCAhPT0gZGlnZXN0XG4gICAgICAgICAgICAgICAgICA/IHsgcGFyZW50OiBkaWdlc3QsIHBvb2w6IGRpZ2VzdCB9XG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCkpXG4gICAgICAgICAgICA6IChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBnZXRTdXNwZW5kZWRDYWNoZSgpKSxcbiAgICAgICAgICAobmV4dEluc3RhbmNlID0ge1xuICAgICAgICAgICAgYmFzZUxhbmVzOiBuZXh0SW5zdGFuY2UuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgIH0pKSxcbiAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG5leHRJbnN0YW5jZSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgbmV4dFByb3BzXG4gICAgKTtcbiAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgcmVuZGVyTGFuZXMgPSBjdXJyZW50LmNoaWxkO1xuICBjdXJyZW50ID0gcmVuZGVyTGFuZXMuc2libGluZztcbiAgcmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywge1xuICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgfSk7XG4gIHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICByZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICgoSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zKSxcbiAgICBudWxsID09PSBKU0NvbXBpbGVyX3RlbXBcbiAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBbY3VycmVudF0pLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTYpKVxuICAgICAgOiBKU0NvbXBpbGVyX3RlbXAucHVzaChjdXJyZW50KSk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gcmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4pIHtcbiAgcHJpbWFyeUNoaWxkcmVuID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgIHsgbW9kZTogXCJ2aXNpYmxlXCIsIGNoaWxkcmVuOiBwcmltYXJ5Q2hpbGRyZW4gfSxcbiAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlXG4gICk7XG4gIHByaW1hcnlDaGlsZHJlbi5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZHJlbik7XG59XG5mdW5jdGlvbiBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIob2Zmc2NyZWVuUHJvcHMsIG1vZGUpIHtcbiAgb2Zmc2NyZWVuUHJvcHMgPSBjcmVhdGVGaWJlckltcGxDbGFzcygyMiwgb2Zmc2NyZWVuUHJvcHMsIG51bGwsIG1vZGUpO1xuICBvZmZzY3JlZW5Qcm9wcy5sYW5lcyA9IDA7XG4gIG9mZnNjcmVlblByb3BzLnN0YXRlTm9kZSA9IHtcbiAgICBfdmlzaWJpbGl0eTogMSxcbiAgICBfcGVuZGluZ01hcmtlcnM6IG51bGwsXG4gICAgX3JldHJ5Q2FjaGU6IG51bGwsXG4gICAgX3RyYW5zaXRpb25zOiBudWxsXG4gIH07XG4gIHJldHVybiBvZmZzY3JlZW5Qcm9wcztcbn1cbmZ1bmN0aW9uIHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgY3VycmVudC5jaGlsZCwgbnVsbCwgcmVuZGVyTGFuZXMpO1xuICBjdXJyZW50ID0gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbihcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW5cbiAgKTtcbiAgY3VycmVudC5mbGFncyB8PSAyO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoZmliZXIsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgZmliZXIubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGFsdGVybmF0ZSAmJiAoYWx0ZXJuYXRlLmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChmaWJlci5yZXR1cm4sIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpO1xufVxuZnVuY3Rpb24gaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgaXNCYWNrd2FyZHMsXG4gIHRhaWwsXG4gIGxhc3RDb250ZW50Um93LFxuICB0YWlsTW9kZVxuKSB7XG4gIHZhciByZW5kZXJTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIG51bGwgPT09IHJlbmRlclN0YXRlXG4gICAgPyAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgaXNCYWNrd2FyZHM6IGlzQmFja3dhcmRzLFxuICAgICAgICByZW5kZXJpbmc6IG51bGwsXG4gICAgICAgIHJlbmRlcmluZ1N0YXJ0VGltZTogMCxcbiAgICAgICAgbGFzdDogbGFzdENvbnRlbnRSb3csXG4gICAgICAgIHRhaWw6IHRhaWwsXG4gICAgICAgIHRhaWxNb2RlOiB0YWlsTW9kZVxuICAgICAgfSlcbiAgICA6ICgocmVuZGVyU3RhdGUuaXNCYWNrd2FyZHMgPSBpc0JhY2t3YXJkcyksXG4gICAgICAocmVuZGVyU3RhdGUucmVuZGVyaW5nID0gbnVsbCksXG4gICAgICAocmVuZGVyU3RhdGUucmVuZGVyaW5nU3RhcnRUaW1lID0gMCksXG4gICAgICAocmVuZGVyU3RhdGUubGFzdCA9IGxhc3RDb250ZW50Um93KSxcbiAgICAgIChyZW5kZXJTdGF0ZS50YWlsID0gdGFpbCksXG4gICAgICAocmVuZGVyU3RhdGUudGFpbE1vZGUgPSB0YWlsTW9kZSkpO1xufVxuZnVuY3Rpb24gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIHJldmVhbE9yZGVyID0gbmV4dFByb3BzLnJldmVhbE9yZGVyLFxuICAgIHRhaWxNb2RlID0gbmV4dFByb3BzLnRhaWw7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMuY2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgbmV4dFByb3BzID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50O1xuICBpZiAoMCAhPT0gKG5leHRQcm9wcyAmIDIpKVxuICAgIChuZXh0UHJvcHMgPSAobmV4dFByb3BzICYgMSkgfCAyKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCk7XG4gIGVsc2Uge1xuICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIDAgIT09IChjdXJyZW50LmZsYWdzICYgMTI4KSlcbiAgICAgIGE6IGZvciAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBjdXJyZW50OyApIHtcbiAgICAgICAgaWYgKDEzID09PSBjdXJyZW50LnRhZylcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICAgIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihjdXJyZW50LCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBlbHNlIGlmICgxOSA9PT0gY3VycmVudC50YWcpXG4gICAgICAgICAgc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGN1cnJlbnQsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGVsc2UgaWYgKG51bGwgIT09IGN1cnJlbnQuY2hpbGQpIHtcbiAgICAgICAgICBjdXJyZW50LmNoaWxkLnJldHVybiA9IGN1cnJlbnQ7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuY2hpbGQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IHdvcmtJblByb2dyZXNzKSBicmVhayBhO1xuICAgICAgICBmb3IgKDsgbnVsbCA9PT0gY3VycmVudC5zaWJsaW5nOyApIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudC5yZXR1cm4gfHwgY3VycmVudC5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudC5zaWJsaW5nLnJldHVybiA9IGN1cnJlbnQucmV0dXJuO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5zaWJsaW5nO1xuICAgICAgfVxuICAgIG5leHRQcm9wcyAmPSAxO1xuICB9XG4gIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgbmV4dFByb3BzKTtcbiAgc3dpdGNoIChyZXZlYWxPcmRlcikge1xuICAgIGNhc2UgXCJmb3J3YXJkc1wiOlxuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIGZvciAocmV2ZWFsT3JkZXIgPSBudWxsOyBudWxsICE9PSByZW5kZXJMYW5lczsgKVxuICAgICAgICAoY3VycmVudCA9IHJlbmRlckxhbmVzLmFsdGVybmF0ZSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgbnVsbCA9PT0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpICYmXG4gICAgICAgICAgICAocmV2ZWFsT3JkZXIgPSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICByZW5kZXJMYW5lcyA9IHJldmVhbE9yZGVyO1xuICAgICAgbnVsbCA9PT0gcmVuZGVyTGFuZXNcbiAgICAgICAgPyAoKHJldmVhbE9yZGVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLCAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBudWxsKSlcbiAgICAgICAgOiAoKHJldmVhbE9yZGVyID0gcmVuZGVyTGFuZXMuc2libGluZyksIChyZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbCkpO1xuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgITEsXG4gICAgICAgIHJldmVhbE9yZGVyLFxuICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgdGFpbE1vZGVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYmFja3dhcmRzXCI6XG4gICAgICByZW5kZXJMYW5lcyA9IG51bGw7XG4gICAgICByZXZlYWxPcmRlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgZm9yICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGw7IG51bGwgIT09IHJldmVhbE9yZGVyOyApIHtcbiAgICAgICAgY3VycmVudCA9IHJldmVhbE9yZGVyLmFsdGVybmF0ZTtcbiAgICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCA9PT0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZXZlYWxPcmRlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gcmV2ZWFsT3JkZXIuc2libGluZztcbiAgICAgICAgcmV2ZWFsT3JkZXIuc2libGluZyA9IHJlbmRlckxhbmVzO1xuICAgICAgICByZW5kZXJMYW5lcyA9IHJldmVhbE9yZGVyO1xuICAgICAgICByZXZlYWxPcmRlciA9IGN1cnJlbnQ7XG4gICAgICB9XG4gICAgICBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAhMCxcbiAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRhaWxNb2RlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRvZ2V0aGVyXCI6XG4gICAgICBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUod29ya0luUHJvZ3Jlc3MsICExLCBudWxsLCBudWxsLCB2b2lkIDApO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIG51bGwgIT09IGN1cnJlbnQgJiYgKHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHdvcmtJblByb2dyZXNzLmxhbmVzO1xuICBpZiAoMCA9PT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcykpXG4gICAgaWYgKG51bGwgIT09IGN1cnJlbnQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgITFcbiAgICAgICAgKSxcbiAgICAgICAgMCA9PT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcykpXG4gICAgICApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgd29ya0luUHJvZ3Jlc3MuY2hpbGQgIT09IGN1cnJlbnQuY2hpbGQpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTMpKTtcbiAgaWYgKG51bGwgIT09IHdvcmtJblByb2dyZXNzLmNoaWxkKSB7XG4gICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIHJlbmRlckxhbmVzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudCwgY3VycmVudC5wZW5kaW5nUHJvcHMpO1xuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gICAgZm9yIChyZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzczsgbnVsbCAhPT0gY3VycmVudC5zaWJsaW5nOyApXG4gICAgICAoY3VycmVudCA9IGN1cnJlbnQuc2libGluZyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcgPVxuICAgICAgICAgIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIGN1cnJlbnQucGVuZGluZ1Byb3BzKSksXG4gICAgICAgIChyZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmVuZGVyTGFuZXMuc2libGluZyA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpIHtcbiAgaWYgKDAgIT09IChjdXJyZW50LmxhbmVzICYgcmVuZGVyTGFuZXMpKSByZXR1cm4gITA7XG4gIGN1cnJlbnQgPSBjdXJyZW50LmRlcGVuZGVuY2llcztcbiAgcmV0dXJuIG51bGwgIT09IGN1cnJlbnQgJiYgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQpID8gITAgOiAhMTtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMzpcbiAgICAgIHB1c2hIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHB1c2hIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEwOlxuICAgICAgcHVzaFByb3ZpZGVyKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcy52YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICB2YXIgc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgIT09IHN0YXRlKSB7XG4gICAgICAgIGlmIChudWxsICE9PSBzdGF0ZS5kZWh5ZHJhdGVkKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkLmNoaWxkTGFuZXMpKVxuICAgICAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBjdXJyZW50ID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5zaWJsaW5nIDogbnVsbDtcbiAgICAgIH1cbiAgICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgdmFyIGRpZFN1c3BlbmRCZWZvcmUgPSAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCk7XG4gICAgICBzdGF0ZSA9IDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpO1xuICAgICAgc3RhdGUgfHxcbiAgICAgICAgKHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgITFcbiAgICAgICAgKSxcbiAgICAgICAgKHN0YXRlID0gMCAhPT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcykpKTtcbiAgICAgIGlmIChkaWRTdXNwZW5kQmVmb3JlKSB7XG4gICAgICAgIGlmIChzdGF0ZSlcbiAgICAgICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjg7XG4gICAgICB9XG4gICAgICBkaWRTdXNwZW5kQmVmb3JlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG51bGwgIT09IGRpZFN1c3BlbmRCZWZvcmUgJiZcbiAgICAgICAgKChkaWRTdXNwZW5kQmVmb3JlLnJlbmRlcmluZyA9IG51bGwpLFxuICAgICAgICAoZGlkU3VzcGVuZEJlZm9yZS50YWlsID0gbnVsbCksXG4gICAgICAgIChkaWRTdXNwZW5kQmVmb3JlLmxhc3RFZmZlY3QgPSBudWxsKSk7XG4gICAgICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCk7XG4gICAgICBpZiAoc3RhdGUpIGJyZWFrO1xuICAgICAgZWxzZSByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwKSxcbiAgICAgICAgdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICAgICk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICB9XG4gIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG59XG5mdW5jdGlvbiBiZWdpbldvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIGlmIChudWxsICE9PSBjdXJyZW50KVxuICAgIGlmIChjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcylcbiAgICAgIGRpZFJlY2VpdmVVcGRhdGUgPSAhMDtcbiAgICBlbHNlIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSAmJlxuICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpXG4gICAgICApXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMSksXG4gICAgICAgICAgYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUoXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIGRpZFJlY2VpdmVVcGRhdGUgPSAwICE9PSAoY3VycmVudC5mbGFncyAmIDEzMTA3MikgPyAhMCA6ICExO1xuICAgIH1cbiAgZWxzZVxuICAgIChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgaXNIeWRyYXRpbmcgJiZcbiAgICAgICAgMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTA0ODU3NikgJiZcbiAgICAgICAgcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgdHJlZUZvcmtDb3VudCwgd29ya0luUHJvZ3Jlc3MuaW5kZXgpO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDA7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSAxNjpcbiAgICAgIGE6IHtcbiAgICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICAgICAgdmFyIGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSxcbiAgICAgICAgICBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcbiAgICAgICAgbGF6eUNvbXBvbmVudCA9IGluaXQobGF6eUNvbXBvbmVudC5fcGF5bG9hZCk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSBsYXp5Q29tcG9uZW50O1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbGF6eUNvbXBvbmVudClcbiAgICAgICAgICBzaG91bGRDb25zdHJ1Y3QobGF6eUNvbXBvbmVudClcbiAgICAgICAgICAgID8gKChjdXJyZW50ID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMobGF6eUNvbXBvbmVudCwgY3VycmVudCkpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudGFnID0gMSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICkpKVxuICAgICAgICAgICAgOiAoKHdvcmtJblByb2dyZXNzLnRhZyA9IDApLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApKSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh2b2lkIDAgIT09IGxhenlDb21wb25lbnQgJiYgbnVsbCAhPT0gbGF6eUNvbXBvbmVudClcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKChpbml0ID0gbGF6eUNvbXBvbmVudC4kJHR5cGVvZiksIGluaXQgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnID0gMTE7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlRm9yd2FyZFJlZihcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbml0ID09PSBSRUFDVF9NRU1PX1RZUEUpIHtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudGFnID0gMTQ7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIHdvcmtJblByb2dyZXNzID1cbiAgICAgICAgICAgIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShsYXp5Q29tcG9uZW50KSB8fCBsYXp5Q29tcG9uZW50O1xuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzA2LCB3b3JrSW5Qcm9ncmVzcywgXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGUpLFxuICAgICAgICAoaW5pdCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzXG4gICAgICAgICkpLFxuICAgICAgICB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgaW5pdCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApXG4gICAgICApO1xuICAgIGNhc2UgMzpcbiAgICAgIGE6IHtcbiAgICAgICAgcHVzaEhvc3RDb250YWluZXIoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBwcmV2U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBpbml0ID0gcHJldlN0YXRlLmVsZW1lbnQ7XG4gICAgICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgdmFyIG5leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBuZXh0U3RhdGUuY2FjaGU7XG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KTtcbiAgICAgICAgbGF6eUNvbXBvbmVudCAhPT0gcHJldlN0YXRlLmNhY2hlICYmXG4gICAgICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIFtDYWNoZUNvbnRleHRdLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAhMFxuICAgICAgICAgICk7XG4gICAgICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICAgICAgbGF6eUNvbXBvbmVudCA9IG5leHRTdGF0ZS5lbGVtZW50O1xuICAgICAgICBpZiAocHJldlN0YXRlLmlzRGVoeWRyYXRlZClcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKHByZXZTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgZWxlbWVudDogbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgaXNEZWh5ZHJhdGVkOiAhMSxcbiAgICAgICAgICAgICAgY2FjaGU6IG5leHRTdGF0ZS5jYWNoZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID0gcHJldlN0YXRlKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gcHJldlN0YXRlKSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhenlDb21wb25lbnQgIT09IGluaXQpIHtcbiAgICAgICAgICAgIGluaXQgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihcbiAgICAgICAgICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjQpKSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGluaXQpO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgICAgc3dpdGNoIChjdXJyZW50Lm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5ib2R5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgICAgICAgICAgXCJIVE1MXCIgPT09IGN1cnJlbnQubm9kZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgPyBjdXJyZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoY3VycmVudC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICBpc0h5ZHJhdGluZyA9ICEwO1xuICAgICAgICAgICAgaHlkcmF0aW9uRXJyb3JzID0gbnVsbDtcbiAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMDtcbiAgICAgICAgICAgIHJlbmRlckxhbmVzID0gbW91bnRDaGlsZEZpYmVycyhcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZm9yICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzOyByZW5kZXJMYW5lczsgKVxuICAgICAgICAgICAgICAocmVuZGVyTGFuZXMuZmxhZ3MgPSAocmVuZGVyTGFuZXMuZmxhZ3MgJiAtMykgfCA0MDk2KSxcbiAgICAgICAgICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAobGF6eUNvbXBvbmVudCA9PT0gaW5pdCkge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChyZW5kZXJMYW5lcyA9IGdldFJlc291cmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICA6IGlzSHlkcmF0aW5nIHx8XG4gICAgICAgICAgICAgICgocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgICAgICkuY3JlYXRlRWxlbWVudChyZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnRbaW50ZXJuYWxQcm9wc0tleV0gPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMobGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGxhenlDb21wb25lbnQpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCkpXG4gICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGdldFJlc291cmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICApKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgICAgKChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID1cbiAgICAgICAgICAgIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMCksXG4gICAgICAgICAgKGluaXQgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSxcbiAgICAgICAgICBpc1NpbmdsZXRvblNjb3BlKHdvcmtJblByb2dyZXNzLnR5cGUpXG4gICAgICAgICAgICA/ICgocHJldmlvdXNIeWRyYXRhYmxlT25FbnRlcmluZ1Njb3BlZFNpbmdsZXRvbiA9IGluaXQpLFxuICAgICAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDogKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBpbml0KSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA0KSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA1OlxuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgJiYgaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgaWYgKChpbml0ID0gbGF6eUNvbXBvbmVudCA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gY2FuSHlkcmF0ZUluc3RhbmNlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgICBudWxsICE9PSBsYXp5Q29tcG9uZW50XG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgICAgICAgIChpbml0ID0gITApKVxuICAgICAgICAgICAgICA6IChpbml0ID0gITEpO1xuICAgICAgICBpbml0IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBwcmV2U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICBuZXh0U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbnVsbDtcbiAgICAgIGxhenlDb21wb25lbnQgPSBwcmV2U3RhdGUuY2hpbGRyZW47XG4gICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBwcmV2U3RhdGUpXG4gICAgICAgID8gKGxhenlDb21wb25lbnQgPSBudWxsKVxuICAgICAgICA6IG51bGwgIT09IG5leHRTdGF0ZSAmJlxuICAgICAgICAgIHNob3VsZFNldFRleHRDb250ZW50KGluaXQsIG5leHRTdGF0ZSkgJiZcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMzIpO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKGluaXQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKEhvc3RUcmFuc2l0aW9uQ29udGV4dC5fY3VycmVudFZhbHVlID0gaW5pdCkpO1xuICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoY3VycmVudCA9IHJlbmRlckxhbmVzID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkpXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAoY3VycmVudCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoY3VycmVudCA9ICExKTtcbiAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSlcbiAgICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gdXBkYXRlRm9yd2FyZFJlZihcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudHlwZSwgbGF6eUNvbXBvbmVudC52YWx1ZSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbGF6eUNvbXBvbmVudC5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGluaXQgPSByZWFkQ29udGV4dChpbml0KSksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gbGF6eUNvbXBvbmVudChpbml0KSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAzMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0ge1xuICAgICAgICAgIG1vZGU6IGxhenlDb21wb25lbnQubW9kZSxcbiAgICAgICAgICBjaGlsZHJlbjogbGF6eUNvbXBvbmVudC5jaGlsZHJlblxuICAgICAgICB9KSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKChyZW5kZXJMYW5lcyA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHJlbmRlckxhbmVzLnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZiksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gcmVuZGVyTGFuZXMpKVxuICAgICAgICAgIDogKChyZW5kZXJMYW5lcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQuY2hpbGQsIGxhenlDb21wb25lbnQpKSxcbiAgICAgICAgICAgIChyZW5kZXJMYW5lcy5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWYpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHJlbmRlckxhbmVzKSksXG4gICAgICAgIHdvcmtJblByb2dyZXNzXG4gICAgICApO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXR1cm4gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSByZWFkQ29udGV4dChDYWNoZUNvbnRleHQpKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKChpbml0ID0gcGVla0NhY2hlRnJvbVBvb2woKSksXG4gICAgICAgICAgICBudWxsID09PSBpbml0ICYmXG4gICAgICAgICAgICAgICgoaW5pdCA9IHdvcmtJblByb2dyZXNzUm9vdCksXG4gICAgICAgICAgICAgIChwcmV2U3RhdGUgPSBjcmVhdGVDYWNoZSgpKSxcbiAgICAgICAgICAgICAgKGluaXQucG9vbGVkQ2FjaGUgPSBwcmV2U3RhdGUpLFxuICAgICAgICAgICAgICBwcmV2U3RhdGUucmVmQ291bnQrKyxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlICYmIChpbml0LnBvb2xlZENhY2hlTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgICAoaW5pdCA9IHByZXZTdGF0ZSkpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgIHBhcmVudDogbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgY2FjaGU6IGluaXRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBpbml0KSlcbiAgICAgICAgICA6ICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSAmJlxuICAgICAgICAgICAgICAoY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbnVsbCwgcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCkpLFxuICAgICAgICAgICAgKGluaXQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgICAgICAgKHByZXZTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICAgICAgaW5pdC5wYXJlbnQgIT09IGxhenlDb21wb25lbnRcbiAgICAgICAgICAgICAgPyAoKGluaXQgPSB7IHBhcmVudDogbGF6eUNvbXBvbmVudCwgY2FjaGU6IGxhenlDb21wb25lbnQgfSksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBpbml0KSxcbiAgICAgICAgICAgICAgICAwID09PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcyAmJlxuICAgICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICAgIGluaXQpLFxuICAgICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KSlcbiAgICAgICAgICAgICAgOiAoKGxhenlDb21wb25lbnQgPSBwcmV2U3RhdGUuY2FjaGUpLFxuICAgICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50ICE9PSBpbml0LmNhY2hlICYmXG4gICAgICAgICAgICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgIFtDYWNoZUNvbnRleHRdLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICkpKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAyOTpcbiAgICAgIHRocm93IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG5mdW5jdGlvbiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSB7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQ7XG59XG5mdW5jdGlvbiBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlc291cmNlKSB7XG4gIGlmIChcInN0eWxlc2hlZXRcIiAhPT0gcmVzb3VyY2UudHlwZSB8fCAwICE9PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpKVxuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNztcbiAgZWxzZSBpZiAoKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxNjc3NzIxNiksICFwcmVsb2FkUmVzb3VyY2UocmVzb3VyY2UpKSkge1xuICAgIHJlc291cmNlID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSByZXNvdXJjZSAmJlxuICAgICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDQxOTQwNDgpID09PVxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICAgPyBudWxsICE9PSBzaGVsbEJvdW5kYXJ5XG4gICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDYyOTE0NTYwKSAhPT1cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYmXG4gICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpKSB8fFxuICAgICAgICAgIHJlc291cmNlICE9PSBzaGVsbEJvdW5kYXJ5KVxuICAgIClcbiAgICAgIHRocm93IChcbiAgICAgICAgKChzdXNwZW5kZWRUaGVuYWJsZSA9IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSksXG4gICAgICAgIFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvbilcbiAgICAgICk7XG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MjtcbiAgfVxufVxuZnVuY3Rpb24gc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgcmV0cnlRdWV1ZSkge1xuICBudWxsICE9PSByZXRyeVF1ZXVlICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxNjM4NCAmJlxuICAgICgocmV0cnlRdWV1ZSA9XG4gICAgICAyMiAhPT0gd29ya0luUHJvZ3Jlc3MudGFnID8gY2xhaW1OZXh0UmV0cnlMYW5lKCkgOiA1MzY4NzA5MTIpLFxuICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyB8PSByZXRyeVF1ZXVlKSxcbiAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzIHw9IHJldHJ5UXVldWUpKTtcbn1cbmZ1bmN0aW9uIGN1dE9mZlRhaWxJZk5lZWRlZChyZW5kZXJTdGF0ZSwgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrKSB7XG4gIGlmICghaXNIeWRyYXRpbmcpXG4gICAgc3dpdGNoIChyZW5kZXJTdGF0ZS50YWlsTW9kZSkge1xuICAgICAgY2FzZSBcImhpZGRlblwiOlxuICAgICAgICBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2sgPSByZW5kZXJTdGF0ZS50YWlsO1xuICAgICAgICBmb3IgKHZhciBsYXN0VGFpbE5vZGUgPSBudWxsOyBudWxsICE9PSBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2s7IClcbiAgICAgICAgICBudWxsICE9PSBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2suYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICAobGFzdFRhaWxOb2RlID0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrKSxcbiAgICAgICAgICAgIChoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2sgPSBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2suc2libGluZyk7XG4gICAgICAgIG51bGwgPT09IGxhc3RUYWlsTm9kZVxuICAgICAgICAgID8gKHJlbmRlclN0YXRlLnRhaWwgPSBudWxsKVxuICAgICAgICAgIDogKGxhc3RUYWlsTm9kZS5zaWJsaW5nID0gbnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNvbGxhcHNlZFwiOlxuICAgICAgICBsYXN0VGFpbE5vZGUgPSByZW5kZXJTdGF0ZS50YWlsO1xuICAgICAgICBmb3IgKHZhciBsYXN0VGFpbE5vZGUkMTEzID0gbnVsbDsgbnVsbCAhPT0gbGFzdFRhaWxOb2RlOyApXG4gICAgICAgICAgbnVsbCAhPT0gbGFzdFRhaWxOb2RlLmFsdGVybmF0ZSAmJiAobGFzdFRhaWxOb2RlJDExMyA9IGxhc3RUYWlsTm9kZSksXG4gICAgICAgICAgICAobGFzdFRhaWxOb2RlID0gbGFzdFRhaWxOb2RlLnNpYmxpbmcpO1xuICAgICAgICBudWxsID09PSBsYXN0VGFpbE5vZGUkMTEzXG4gICAgICAgICAgPyBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2sgfHwgbnVsbCA9PT0gcmVuZGVyU3RhdGUudGFpbFxuICAgICAgICAgICAgPyAocmVuZGVyU3RhdGUudGFpbCA9IG51bGwpXG4gICAgICAgICAgICA6IChyZW5kZXJTdGF0ZS50YWlsLnNpYmxpbmcgPSBudWxsKVxuICAgICAgICAgIDogKGxhc3RUYWlsTm9kZSQxMTMuc2libGluZyA9IG51bGwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJ1YmJsZVByb3BlcnRpZXMoY29tcGxldGVkV29yaykge1xuICB2YXIgZGlkQmFpbG91dCA9XG4gICAgICBudWxsICE9PSBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZSAmJlxuICAgICAgY29tcGxldGVkV29yay5hbHRlcm5hdGUuY2hpbGQgPT09IGNvbXBsZXRlZFdvcmsuY2hpbGQsXG4gICAgbmV3Q2hpbGRMYW5lcyA9IDAsXG4gICAgc3VidHJlZUZsYWdzID0gMDtcbiAgaWYgKGRpZEJhaWxvdXQpXG4gICAgZm9yICh2YXIgY2hpbGQkMTE0ID0gY29tcGxldGVkV29yay5jaGlsZDsgbnVsbCAhPT0gY2hpbGQkMTE0OyApXG4gICAgICAobmV3Q2hpbGRMYW5lcyB8PSBjaGlsZCQxMTQubGFuZXMgfCBjaGlsZCQxMTQuY2hpbGRMYW5lcyksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTE0LnN1YnRyZWVGbGFncyAmIDY1MDExNzEyKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMTQuZmxhZ3MgJiA2NTAxMTcxMiksXG4gICAgICAgIChjaGlsZCQxMTQucmV0dXJuID0gY29tcGxldGVkV29yayksXG4gICAgICAgIChjaGlsZCQxMTQgPSBjaGlsZCQxMTQuc2libGluZyk7XG4gIGVsc2VcbiAgICBmb3IgKGNoaWxkJDExNCA9IGNvbXBsZXRlZFdvcmsuY2hpbGQ7IG51bGwgIT09IGNoaWxkJDExNDsgKVxuICAgICAgKG5ld0NoaWxkTGFuZXMgfD0gY2hpbGQkMTE0LmxhbmVzIHwgY2hpbGQkMTE0LmNoaWxkTGFuZXMpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDExNC5zdWJ0cmVlRmxhZ3MpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDExNC5mbGFncyksXG4gICAgICAgIChjaGlsZCQxMTQucmV0dXJuID0gY29tcGxldGVkV29yayksXG4gICAgICAgIChjaGlsZCQxMTQgPSBjaGlsZCQxMTQuc2libGluZyk7XG4gIGNvbXBsZXRlZFdvcmsuc3VidHJlZUZsYWdzIHw9IHN1YnRyZWVGbGFncztcbiAgY29tcGxldGVkV29yay5jaGlsZExhbmVzID0gbmV3Q2hpbGRMYW5lcztcbiAgcmV0dXJuIGRpZEJhaWxvdXQ7XG59XG5mdW5jdGlvbiBjb21wbGV0ZVdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMzE6XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDE1OlxuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgNzpcbiAgICBjYXNlIDg6XG4gICAgY2FzZSAxMjpcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgY2FzZSAzOlxuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIChuZXdQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSBuZXdQcm9wcyAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA0OCk7XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgcmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQgJiZcbiAgICAgICAgKChyZW5kZXJMYW5lcy5jb250ZXh0ID0gcmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQpLFxuICAgICAgICAocmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQgPSBudWxsKSk7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCBudWxsID09PSBjdXJyZW50LmNoaWxkKVxuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgICAoY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpKSB8fFxuICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgIHVwZ3JhZGVIeWRyYXRpb25FcnJvcnNUb1JlY292ZXJhYmxlKCkpO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSkpXG4gICAgICAgICAgOiByZW5kZXJMYW5lc1xuICAgICAgICAgICAgPyByZW5kZXJMYW5lcyAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICAgID8gKG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNzpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudClcbiAgICAgICAgICA6ICgoY3VycmVudCA9IHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBuZXdQcm9wcywgcmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpKTtcbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA1OlxuICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcykge1xuICAgICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2NikpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgICAgaWYgKHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKSlcbiAgICAgICAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdXJyZW50KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHlwZSA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzd2l0Y2ggKHJlbmRlckxhbmVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaW5uZXJIVE1MID0gXCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIjtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnJlbW92ZUNoaWxkKGN1cnJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgeyBpczogbmV3UHJvcHMuaXMgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHR5cGUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgICAgICAgICAgIG5ld1Byb3BzLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgID8gKGN1cnJlbnQubXVsdGlwbGUgPSAhMClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXdQcm9wcy5zaXplICYmIChjdXJyZW50LnNpemUgPSBuZXdQcm9wcy5zaXplKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gICAgICAgICAgYTogZm9yICh0eXBlID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IHR5cGU7ICkge1xuICAgICAgICAgICAgaWYgKDUgPT09IHR5cGUudGFnIHx8IDYgPT09IHR5cGUudGFnKVxuICAgICAgICAgICAgICBjdXJyZW50LmFwcGVuZENoaWxkKHR5cGUuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKDQgIT09IHR5cGUudGFnICYmIDI3ICE9PSB0eXBlLnRhZyAmJiBudWxsICE9PSB0eXBlLmNoaWxkKSB7XG4gICAgICAgICAgICAgIHR5cGUuY2hpbGQucmV0dXJuID0gdHlwZTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUuY2hpbGQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IHdvcmtJblByb2dyZXNzKSBicmVhayBhO1xuICAgICAgICAgICAgZm9yICg7IG51bGwgPT09IHR5cGUuc2libGluZzsgKSB7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB0eXBlLnJldHVybiB8fCB0eXBlLnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZS5zaWJsaW5nLnJldHVybiA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgdHlwZSA9IHR5cGUuc2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudDtcbiAgICAgICAgICBhOiBzd2l0Y2ggKFxuICAgICAgICAgICAgKHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnQsIHJlbmRlckxhbmVzLCBuZXdQcm9wcyksIHJlbmRlckxhbmVzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEhbmV3UHJvcHMuYXV0b0ZvY3VzO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3O1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA2OlxuICAgICAgaWYgKGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBuZXdQcm9wcyAmJiBudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgY3VycmVudCA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpIHtcbiAgICAgICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICAgICAgdHlwZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyO1xuICAgICAgICAgIGlmIChudWxsICE9PSB0eXBlKVxuICAgICAgICAgICAgc3dpdGNoICh0eXBlLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgbmV3UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgICAgY3VycmVudC5ub2RlVmFsdWUgPT09IHJlbmRlckxhbmVzIHx8XG4gICAgICAgICAgICAobnVsbCAhPT0gbmV3UHJvcHMgJiYgITAgPT09IG5ld1Byb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZykgfHxcbiAgICAgICAgICAgIGNoZWNrRm9yVW5tYXRjaGVkVGV4dChjdXJyZW50Lm5vZGVWYWx1ZSwgcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICAgID8gITBcbiAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICBjdXJyZW50IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIChjdXJyZW50ID1cbiAgICAgICAgICAgIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihjdXJyZW50KS5jcmVhdGVUZXh0Tm9kZShcbiAgICAgICAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKVxuICAgICAgKSB7XG4gICAgICAgIHR5cGUgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmIChudWxsICE9PSBuZXdQcm9wcyAmJiBudWxsICE9PSBuZXdQcm9wcy5kZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTgpKTtcbiAgICAgICAgICAgIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgdHlwZSA9IG51bGwgIT09IHR5cGUgPyB0eXBlLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgICAgICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgICAgICAgICAgdHlwZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpLFxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHR5cGUgPSAhMTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgKHR5cGUgPSB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpKSxcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgICAgIChjdXJyZW50Lm1lbW9pemVkU3RhdGUuaHlkcmF0aW9uRXJyb3JzID0gdHlwZSksXG4gICAgICAgICAgICAodHlwZSA9ICEwKTtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2KVxuICAgICAgICAgICAgcmV0dXJuIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksIHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBpZiAoMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSlcbiAgICAgICAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHJlbmRlckxhbmVzKSwgd29ya0luUHJvZ3Jlc3M7XG4gICAgICByZW5kZXJMYW5lcyA9IG51bGwgIT09IG5ld1Byb3BzO1xuICAgICAgY3VycmVudCA9IG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKHJlbmRlckxhbmVzKSB7XG4gICAgICAgIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgIHR5cGUgPSBudWxsO1xuICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgICh0eXBlID0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICAgICAgICB2YXIgY2FjaGUkMTI3ID0gbnVsbDtcbiAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKGNhY2hlJDEyNyA9IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICAgICAgICBjYWNoZSQxMjcgIT09IHR5cGUgJiYgKG5ld1Byb3BzLmZsYWdzIHw9IDIwNDgpO1xuICAgICAgfVxuICAgICAgcmVuZGVyTGFuZXMgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkLmZsYWdzIHw9IDgxOTIpO1xuICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BIb3N0Q29udGFpbmVyKCksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksXG4gICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BQcm92aWRlcih3b3JrSW5Qcm9ncmVzcy50eXBlKSwgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAxOTpcbiAgICAgIHBvcChzdXNwZW5zZVN0YWNrQ3Vyc29yKTtcbiAgICAgIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgPT09IHR5cGUpIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICAgIG5ld1Byb3BzID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KTtcbiAgICAgIGNhY2hlJDEyNyA9IHR5cGUucmVuZGVyaW5nO1xuICAgICAgaWYgKG51bGwgPT09IGNhY2hlJDEyNylcbiAgICAgICAgaWYgKG5ld1Byb3BzKSBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAwICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIHx8XG4gICAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJiAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCkpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgZm9yIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IGN1cnJlbnQ7ICkge1xuICAgICAgICAgICAgICBjYWNoZSQxMjcgPSBmaW5kRmlyc3RTdXNwZW5kZWQoY3VycmVudCk7XG4gICAgICAgICAgICAgIGlmIChudWxsICE9PSBjYWNoZSQxMjcpIHtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjg7XG4gICAgICAgICAgICAgICAgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY2FjaGUkMTI3LnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudDtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgPSAwO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgICAgICBmb3IgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IHJlbmRlckxhbmVzOyApXG4gICAgICAgICAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzKHJlbmRlckxhbmVzLCBjdXJyZW50KSxcbiAgICAgICAgICAgICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICAgICAgICAgICAgcHVzaChcbiAgICAgICAgICAgICAgICAgIHN1c3BlbnNlU3RhY2tDdXJzb3IsXG4gICAgICAgICAgICAgICAgICAoc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50ICYgMSkgfCAyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBudWxsICE9PSB0eXBlLnRhaWwgJiZcbiAgICAgICAgICAgIG5vdygpID4gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSAmJlxuICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDQxOTQzMDQpKTtcbiAgICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpXG4gICAgICAgICAgaWYgKCgoY3VycmVudCA9IGZpbmRGaXJzdFN1c3BlbmRlZChjYWNoZSQxMjcpKSwgbnVsbCAhPT0gY3VycmVudCkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQpLFxuICAgICAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCBjdXJyZW50KSxcbiAgICAgICAgICAgICAgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICEwKSxcbiAgICAgICAgICAgICAgbnVsbCA9PT0gdHlwZS50YWlsICYmXG4gICAgICAgICAgICAgICAgXCJoaWRkZW5cIiA9PT0gdHlwZS50YWlsTW9kZSAmJlxuICAgICAgICAgICAgICAgICFjYWNoZSQxMjcuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICAgICAgIWlzSHlkcmF0aW5nKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAyICogbm93KCkgLSB0eXBlLnJlbmRlcmluZ1N0YXJ0VGltZSA+XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgJiZcbiAgICAgICAgICAgICAgNTM2ODcwOTEyICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgICAgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gNDE5NDMwNCkpO1xuICAgICAgICB0eXBlLmlzQmFja3dhcmRzXG4gICAgICAgICAgPyAoKGNhY2hlJDEyNy5zaWJsaW5nID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2FjaGUkMTI3KSlcbiAgICAgICAgICA6ICgoY3VycmVudCA9IHR5cGUubGFzdCksXG4gICAgICAgICAgICBudWxsICE9PSBjdXJyZW50XG4gICAgICAgICAgICAgID8gKGN1cnJlbnQuc2libGluZyA9IGNhY2hlJDEyNylcbiAgICAgICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjYWNoZSQxMjcpLFxuICAgICAgICAgICAgKHR5cGUubGFzdCA9IGNhY2hlJDEyNykpO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgIT09IHR5cGUudGFpbClcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB0eXBlLnRhaWwpLFxuICAgICAgICAgICh0eXBlLnJlbmRlcmluZyA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAodHlwZS50YWlsID0gd29ya0luUHJvZ3Jlc3Muc2libGluZyksXG4gICAgICAgICAgKHR5cGUucmVuZGVyaW5nU3RhcnRUaW1lID0gbm93KCkpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gbnVsbCksXG4gICAgICAgICAgKGN1cnJlbnQgPSBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgICAgIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgbmV3UHJvcHMgPyAoY3VycmVudCAmIDEpIHwgMiA6IGN1cnJlbnQgJiAxKSxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICApO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBwb3BIaWRkZW5Db250ZXh0KCksXG4gICAgICAgIChuZXdQcm9wcyA9IG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50XG4gICAgICAgICAgPyAobnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSAhPT0gbmV3UHJvcHMgJiZcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKVxuICAgICAgICAgIDogbmV3UHJvcHMgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpLFxuICAgICAgICBuZXdQcm9wc1xuICAgICAgICAgID8gMCAhPT0gKHJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSAmJlxuICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgKGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzICYgNiAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MikpXG4gICAgICAgICAgOiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLnJldHJ5UXVldWUpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAocmVuZGVyTGFuZXMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpLFxuICAgICAgICAobmV3UHJvcHMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCksXG4gICAgICAgIG5ld1Byb3BzICE9PSByZW5kZXJMYW5lcyAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA0OCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IG51bGwpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGUgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpLFxuICAgICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpLFxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI1OlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAzMDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbmZ1bmN0aW9uIHVud2luZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgMCAhPT0gKGN1cnJlbnQgJiA2NTUzNikgJiYgMCA9PT0gKGN1cnJlbnQgJiAxMjgpXG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50LmRlaHlkcmF0ZWQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MCkpO1xuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3M7XG4gICAgICByZXR1cm4gY3VycmVudCAmIDY1NTM2XG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICA6IG51bGw7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvciksIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250YWluZXIoKSwgbnVsbDtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLnR5cGUpLCBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHBvcEhpZGRlbkNvbnRleHQoKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksIG51bGw7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIGludGVycnVwdGVkV29yaykge1xuICBwb3BUcmVlQ29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICBzd2l0Y2ggKGludGVycnVwdGVkV29yay50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHBvcFByb3ZpZGVyKGludGVycnVwdGVkV29yay50eXBlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgcG9wSGlkZGVuQ29udGV4dCgpO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KGZsYWdzLCBmaW5pc2hlZFdvcmspIHtcbiAgdHJ5IHtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUsXG4gICAgICBsYXN0RWZmZWN0ID0gbnVsbCAhPT0gdXBkYXRlUXVldWUgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gbGFzdEVmZmVjdCkge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgdXBkYXRlUXVldWUgPSBmaXJzdEVmZmVjdDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCh1cGRhdGVRdWV1ZS50YWcgJiBmbGFncykgPT09IGZsYWdzKSB7XG4gICAgICAgICAgbGFzdEVmZmVjdCA9IHZvaWQgMDtcbiAgICAgICAgICB2YXIgY3JlYXRlID0gdXBkYXRlUXVldWUuY3JlYXRlLFxuICAgICAgICAgICAgaW5zdCA9IHVwZGF0ZVF1ZXVlLmluc3Q7XG4gICAgICAgICAgbGFzdEVmZmVjdCA9IGNyZWF0ZSgpO1xuICAgICAgICAgIGluc3QuZGVzdHJveSA9IGxhc3RFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAodXBkYXRlUXVldWUgIT09IGZpcnN0RWZmZWN0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudChcbiAgZmxhZ3MsXG4gIGZpbmlzaGVkV29yayxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMFxuKSB7XG4gIHRyeSB7XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlLFxuICAgICAgbGFzdEVmZmVjdCA9IG51bGwgIT09IHVwZGF0ZVF1ZXVlID8gdXBkYXRlUXVldWUubGFzdEVmZmVjdCA6IG51bGw7XG4gICAgaWYgKG51bGwgIT09IGxhc3RFZmZlY3QpIHtcbiAgICAgIHZhciBmaXJzdEVmZmVjdCA9IGxhc3RFZmZlY3QubmV4dDtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gZmlyc3RFZmZlY3Q7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgodXBkYXRlUXVldWUudGFnICYgZmxhZ3MpID09PSBmbGFncykge1xuICAgICAgICAgIHZhciBpbnN0ID0gdXBkYXRlUXVldWUuaW5zdCxcbiAgICAgICAgICAgIGRlc3Ryb3kgPSBpbnN0LmRlc3Ryb3k7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZGVzdHJveSkge1xuICAgICAgICAgICAgaW5zdC5kZXN0cm95ID0gdm9pZCAwO1xuICAgICAgICAgICAgbGFzdEVmZmVjdCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgIHZhciBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gbmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMCxcbiAgICAgICAgICAgICAgZGVzdHJveV8gPSBkZXN0cm95O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGVzdHJveV8oKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICAgIGxhc3RFZmZlY3QsXG4gICAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlICh1cGRhdGVRdWV1ZSAhPT0gZmlyc3RFZmZlY3QpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKSB7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgIT09IHVwZGF0ZVF1ZXVlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICB0cnkge1xuICAgICAgY29tbWl0Q2FsbGJhY2tzKHVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICBjdXJyZW50LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBpbnN0YW5jZVxuKSB7XG4gIGluc3RhbmNlLnByb3BzID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgY3VycmVudC50eXBlLFxuICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICApO1xuICBpbnN0YW5jZS5zdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgdHJ5IHtcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5QXR0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcmVmID0gY3VycmVudC5yZWY7XG4gICAgaWYgKG51bGwgIT09IHJlZikge1xuICAgICAgc3dpdGNoIChjdXJyZW50LnRhZykge1xuICAgICAgICBjYXNlIDI2OlxuICAgICAgICBjYXNlIDI3OlxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgdmFyIGluc3RhbmNlVG9Vc2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICBpbnN0YW5jZVRvVXNlID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgfVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmXG4gICAgICAgID8gKGN1cnJlbnQucmVmQ2xlYW51cCA9IHJlZihpbnN0YW5jZVRvVXNlKSlcbiAgICAgICAgOiAocmVmLmN1cnJlbnQgPSBpbnN0YW5jZVRvVXNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB2YXIgcmVmID0gY3VycmVudC5yZWYsXG4gICAgcmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgaWYgKG51bGwgIT09IHJlZilcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cClcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZkNsZWFudXAoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQuYWx0ZXJuYXRlKSxcbiAgICAgICAgICBudWxsICE9IGN1cnJlbnQgJiYgKGN1cnJlbnQucmVmQ2xlYW51cCA9IG51bGwpO1xuICAgICAgfVxuICAgIGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZilcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZihudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yJDE0Mykge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvciQxNDMpO1xuICAgICAgfVxuICAgIGVsc2UgcmVmLmN1cnJlbnQgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yaykge1xuICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLFxuICAgIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICB0cnkge1xuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgcHJvcHMuYXV0b0ZvY3VzICYmIGluc3RhbmNlLmZvY3VzKCk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgIHByb3BzLnNyY1xuICAgICAgICAgID8gKGluc3RhbmNlLnNyYyA9IHByb3BzLnNyYylcbiAgICAgICAgICA6IHByb3BzLnNyY1NldCAmJiAoaW5zdGFuY2Uuc3Jjc2V0ID0gcHJvcHMuc3JjU2V0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RVcGRhdGUoZmluaXNoZWRXb3JrLCBuZXdQcm9wcywgb2xkUHJvcHMpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCBmaW5pc2hlZFdvcmsudHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzSG9zdFBhcmVudChmaWJlcikge1xuICByZXR1cm4gKFxuICAgIDUgPT09IGZpYmVyLnRhZyB8fFxuICAgIDMgPT09IGZpYmVyLnRhZyB8fFxuICAgIDI2ID09PSBmaWJlci50YWcgfHxcbiAgICAoMjcgPT09IGZpYmVyLnRhZyAmJiBpc1NpbmdsZXRvblNjb3BlKGZpYmVyLnR5cGUpKSB8fFxuICAgIDQgPT09IGZpYmVyLnRhZ1xuICApO1xufVxuZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmcoZmliZXIpIHtcbiAgYTogZm9yICg7Oykge1xuICAgIGZvciAoOyBudWxsID09PSBmaWJlci5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5yZXR1cm4gfHwgaXNIb3N0UGFyZW50KGZpYmVyLnJldHVybikpIHJldHVybiBudWxsO1xuICAgICAgZmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgfVxuICAgIGZpYmVyLnNpYmxpbmcucmV0dXJuID0gZmliZXIucmV0dXJuO1xuICAgIGZvciAoXG4gICAgICBmaWJlciA9IGZpYmVyLnNpYmxpbmc7XG4gICAgICA1ICE9PSBmaWJlci50YWcgJiYgNiAhPT0gZmliZXIudGFnICYmIDE4ICE9PSBmaWJlci50YWc7XG5cbiAgICApIHtcbiAgICAgIGlmICgyNyA9PT0gZmliZXIudGFnICYmIGlzU2luZ2xldG9uU2NvcGUoZmliZXIudHlwZSkpIGNvbnRpbnVlIGE7XG4gICAgICBpZiAoZmliZXIuZmxhZ3MgJiAyKSBjb250aW51ZSBhO1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLmNoaWxkIHx8IDQgPT09IGZpYmVyLnRhZykgY29udGludWUgYTtcbiAgICAgIGVsc2UgKGZpYmVyLmNoaWxkLnJldHVybiA9IGZpYmVyKSwgKGZpYmVyID0gZmliZXIuY2hpbGQpO1xuICAgIH1cbiAgICBpZiAoIShmaWJlci5mbGFncyAmIDIpKSByZXR1cm4gZmliZXIuc3RhdGVOb2RlO1xuICB9XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKG5vZGUsIGJlZm9yZSwgcGFyZW50KSB7XG4gIHZhciB0YWcgPSBub2RlLnRhZztcbiAgaWYgKDUgPT09IHRhZyB8fCA2ID09PSB0YWcpXG4gICAgKG5vZGUgPSBub2RlLnN0YXRlTm9kZSksXG4gICAgICBiZWZvcmVcbiAgICAgICAgPyAoOSA9PT0gcGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgICA/IHBhcmVudC5ib2R5XG4gICAgICAgICAgICA6IFwiSFRNTFwiID09PSBwYXJlbnQubm9kZU5hbWVcbiAgICAgICAgICAgICAgPyBwYXJlbnQub3duZXJEb2N1bWVudC5ib2R5XG4gICAgICAgICAgICAgIDogcGFyZW50XG4gICAgICAgICAgKS5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKVxuICAgICAgICA6ICgoYmVmb3JlID1cbiAgICAgICAgICAgIDkgPT09IHBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgICA/IHBhcmVudC5ib2R5XG4gICAgICAgICAgICAgIDogXCJIVE1MXCIgPT09IHBhcmVudC5ub2RlTmFtZVxuICAgICAgICAgICAgICAgID8gcGFyZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgIDogcGFyZW50KSxcbiAgICAgICAgICBiZWZvcmUuYXBwZW5kQ2hpbGQobm9kZSksXG4gICAgICAgICAgKHBhcmVudCA9IHBhcmVudC5fcmVhY3RSb290Q29udGFpbmVyKSxcbiAgICAgICAgICAobnVsbCAhPT0gcGFyZW50ICYmIHZvaWQgMCAhPT0gcGFyZW50KSB8fFxuICAgICAgICAgICAgbnVsbCAhPT0gYmVmb3JlLm9uY2xpY2sgfHxcbiAgICAgICAgICAgIChiZWZvcmUub25jbGljayA9IG5vb3AkMSkpO1xuICBlbHNlIGlmIChcbiAgICA0ICE9PSB0YWcgJiZcbiAgICAoMjcgPT09IHRhZyAmJlxuICAgICAgaXNTaW5nbGV0b25TY29wZShub2RlLnR5cGUpICYmXG4gICAgICAoKHBhcmVudCA9IG5vZGUuc3RhdGVOb2RlKSwgKGJlZm9yZSA9IG51bGwpKSxcbiAgICAobm9kZSA9IG5vZGUuY2hpbGQpLFxuICAgIG51bGwgIT09IG5vZGUpXG4gIClcbiAgICBmb3IgKFxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlID8gcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpIDogcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICBlbHNlIGlmIChcbiAgICA0ICE9PSB0YWcgJiZcbiAgICAoMjcgPT09IHRhZyAmJiBpc1NpbmdsZXRvblNjb3BlKG5vZGUudHlwZSkgJiYgKHBhcmVudCA9IG5vZGUuc3RhdGVOb2RlKSxcbiAgICAobm9kZSA9IG5vZGUuY2hpbGQpLFxuICAgIG51bGwgIT09IG5vZGUpXG4gIClcbiAgICBmb3IgKFxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKG5vZGUsIGJlZm9yZSwgcGFyZW50KSwgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgIG51bGwgIT09IG5vZGU7XG5cbiAgICApXG4gICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpLCAobm9kZSA9IG5vZGUuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRIb3N0U2luZ2xldG9uQWNxdWlzaXRpb24oZmluaXNoZWRXb3JrKSB7XG4gIHZhciBzaW5nbGV0b24gPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlLFxuICAgIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gIHRyeSB7XG4gICAgZm9yIChcbiAgICAgIHZhciB0eXBlID0gZmluaXNoZWRXb3JrLnR5cGUsIGF0dHJpYnV0ZXMgPSBzaW5nbGV0b24uYXR0cmlidXRlcztcbiAgICAgIGF0dHJpYnV0ZXMubGVuZ3RoO1xuXG4gICAgKVxuICAgICAgc2luZ2xldG9uLnJlbW92ZUF0dHJpYnV0ZU5vZGUoYXR0cmlidXRlc1swXSk7XG4gICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoc2luZ2xldG9uLCB0eXBlLCBwcm9wcyk7XG4gICAgc2luZ2xldG9uW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgIHNpbmdsZXRvbltpbnRlcm5hbFByb3BzS2V5XSA9IHByb3BzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG52YXIgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gITEsXG4gIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSAhMSxcbiAgbmVlZHNGb3JtUmVzZXQgPSAhMSxcbiAgUG9zc2libHlXZWFrU2V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgV2Vha1NldCA/IFdlYWtTZXQgOiBTZXQsXG4gIG5leHRFZmZlY3QgPSBudWxsO1xuZnVuY3Rpb24gY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpcnN0Q2hpbGQpIHtcbiAgcm9vdCA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgZXZlbnRzRW5hYmxlZCA9IF9lbmFibGVkO1xuICByb290ID0gZ2V0QWN0aXZlRWxlbWVudERlZXAocm9vdCk7XG4gIGlmIChoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocm9vdCkpIHtcbiAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIHJvb3QpXG4gICAgICB2YXIgSlNDb21waWxlcl90ZW1wID0ge1xuICAgICAgICBzdGFydDogcm9vdC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiByb290LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICBlbHNlXG4gICAgICBhOiB7XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgICAgKChKU0NvbXBpbGVyX3RlbXAgPSByb290Lm93bmVyRG9jdW1lbnQpICYmXG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZGVmYXVsdFZpZXcpIHx8XG4gICAgICAgICAgd2luZG93O1xuICAgICAgICB2YXIgc2VsZWN0aW9uID1cbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZ2V0U2VsZWN0aW9uICYmIEpTQ29tcGlsZXJfdGVtcC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiAwICE9PSBzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgICAgICAgIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5ub2RlVHlwZSwgZm9jdXNOb2RlLm5vZGVUeXBlO1xuICAgICAgICAgIH0gY2F0Y2ggKGUkMjApIHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGVuZ3RoID0gMCxcbiAgICAgICAgICAgIHN0YXJ0ID0gLTEsXG4gICAgICAgICAgICBlbmQgPSAtMSxcbiAgICAgICAgICAgIGluZGV4V2l0aGluQW5jaG9yID0gMCxcbiAgICAgICAgICAgIGluZGV4V2l0aGluRm9jdXMgPSAwLFxuICAgICAgICAgICAgbm9kZSA9IHJvb3QsXG4gICAgICAgICAgICBwYXJlbnROb2RlID0gbnVsbDtcbiAgICAgICAgICBiOiBmb3IgKDs7KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuZXh0OyA7ICkge1xuICAgICAgICAgICAgICBub2RlICE9PSBKU0NvbXBpbGVyX3RlbXAgfHxcbiAgICAgICAgICAgICAgICAoMCAhPT0gYW5jaG9yT2Zmc2V0ICYmIDMgIT09IG5vZGUubm9kZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoICsgYW5jaG9yT2Zmc2V0KTtcbiAgICAgICAgICAgICAgbm9kZSAhPT0gZm9jdXNOb2RlIHx8XG4gICAgICAgICAgICAgICAgKDAgIT09IHNlbGVjdGlvbiAmJiAzICE9PSBub2RlLm5vZGVUeXBlKSB8fFxuICAgICAgICAgICAgICAgIChlbmQgPSBsZW5ndGggKyBzZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAzID09PSBub2RlLm5vZGVUeXBlICYmIChsZW5ndGggKz0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgPT09IChuZXh0ID0gbm9kZS5maXJzdENoaWxkKSkgYnJlYWs7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHJvb3QpIGJyZWFrIGI7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICAgICsraW5kZXhXaXRoaW5BbmNob3IgPT09IGFuY2hvck9mZnNldCAmJlxuICAgICAgICAgICAgICAgIChzdGFydCA9IGxlbmd0aCk7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPT09IGZvY3VzTm9kZSAmJlxuICAgICAgICAgICAgICAgICsraW5kZXhXaXRoaW5Gb2N1cyA9PT0gc2VsZWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGVuZCA9IGxlbmd0aCk7XG4gICAgICAgICAgICAgIGlmIChudWxsICE9PSAobmV4dCA9IG5vZGUubmV4dFNpYmxpbmcpKSBicmVhaztcbiAgICAgICAgICAgICAgbm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAgIC0xID09PSBzdGFydCB8fCAtMSA9PT0gZW5kID8gbnVsbCA6IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9IGVsc2UgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgICAgIH1cbiAgICBKU0NvbXBpbGVyX3RlbXAgPSBKU0NvbXBpbGVyX3RlbXAgfHwgeyBzdGFydDogMCwgZW5kOiAwIH07XG4gIH0gZWxzZSBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IHsgZm9jdXNlZEVsZW06IHJvb3QsIHNlbGVjdGlvblJhbmdlOiBKU0NvbXBpbGVyX3RlbXAgfTtcbiAgX2VuYWJsZWQgPSAhMTtcbiAgZm9yIChuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKVxuICAgIGlmIChcbiAgICAgICgoZmlyc3RDaGlsZCA9IG5leHRFZmZlY3QpLFxuICAgICAgKHJvb3QgPSBmaXJzdENoaWxkLmNoaWxkKSxcbiAgICAgIDAgIT09IChmaXJzdENoaWxkLnN1YnRyZWVGbGFncyAmIDEwMjQpICYmIG51bGwgIT09IHJvb3QpXG4gICAgKVxuICAgICAgKHJvb3QucmV0dXJuID0gZmlyc3RDaGlsZCksIChuZXh0RWZmZWN0ID0gcm9vdCk7XG4gICAgZWxzZVxuICAgICAgZm9yICg7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBmaXJzdENoaWxkID0gbmV4dEVmZmVjdDtcbiAgICAgICAgZm9jdXNOb2RlID0gZmlyc3RDaGlsZC5hbHRlcm5hdGU7XG4gICAgICAgIHJvb3QgPSBmaXJzdENoaWxkLmZsYWdzO1xuICAgICAgICBzd2l0Y2ggKGZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkgJiYgbnVsbCAhPT0gZm9jdXNOb2RlKSB7XG4gICAgICAgICAgICAgIHJvb3QgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgIGFuY2hvck9mZnNldCA9IGZvY3VzTm9kZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICBmb2N1c05vZGUgPSBmb2N1c05vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgc2VsZWN0aW9uID0gSlNDb21waWxlcl90ZW1wLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZWRQcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC50eXBlLFxuICAgICAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLmVsZW1lbnRUeXBlID09PSBKU0NvbXBpbGVyX3RlbXAudHlwZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcm9vdCA9IHNlbGVjdGlvbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIHJlc29sdmVkUHJldlByb3BzLFxuICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUgPSByb290O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLnJldHVybixcbiAgICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkpXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKHJvb3QgPSBmaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxcbiAgICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wID0gcm9vdC5ub2RlVHlwZSksXG4gICAgICAgICAgICAgICAgOSA9PT0gSlNDb21waWxlcl90ZW1wKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkocm9vdCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKDEgPT09IEpTQ29tcGlsZXJfdGVtcClcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJvb3Qubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJIRUFEXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiSFRNTFwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcIkJPRFlcIjpcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkocm9vdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcm9vdC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdCA9IGZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgaWYgKG51bGwgIT09IHJvb3QpIHtcbiAgICAgICAgICByb290LnJldHVybiA9IGZpcnN0Q2hpbGQucmV0dXJuO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSByb290O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRFZmZlY3QgPSBmaXJzdENoaWxkLnJldHVybjtcbiAgICAgIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIoZmluaXNoZWRSb290LCBjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQpXG4gICAgICAgIGlmICgoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLCBudWxsID09PSBjdXJyZW50KSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICApO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRVcGRhdGUoXG4gICAgICAgICAgICAgIHByZXZQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yJDE0Mikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgICAgZXJyb3IkMTQyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZmxhZ3MgJiA2NCAmJiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoXG4gICAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLCBudWxsICE9PSBmaW5pc2hlZFJvb3QpXG4gICAgICApIHtcbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFdvcmsuY2hpbGQpXG4gICAgICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsuY2hpbGQudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBjdXJyZW50ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb21taXRDYWxsYmFja3MoZmluaXNoZWRSb290LCBjdXJyZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIGNvbW1pdEhvc3RTaW5nbGV0b25BY3F1aXNpdGlvbihmaW5pc2hlZFdvcmspO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSA1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgbnVsbCA9PT0gY3VycmVudCAmJiBmbGFncyAmIDQgJiYgY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJiBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290LmRlaHlkcmF0ZWQpLFxuICAgICAgICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgICAgKChmaW5pc2hlZFdvcmsgPSByZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5LmJpbmQoXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICByZWdpc3RlclN1c3BlbnNlSW5zdGFuY2VSZXRyeShmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaykpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgZmxhZ3MgPSBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSB8fCBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICBpZiAoIWZsYWdzKSB7XG4gICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICBwcmV2UHJvcHMgPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICAgIHZhciBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IGZsYWdzO1xuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IGN1cnJlbnQpICYmICFwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlblxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldlByb3BzO1xuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDMwOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgKChmaWJlci5hbHRlcm5hdGUgPSBudWxsKSwgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoYWx0ZXJuYXRlKSk7XG4gIGZpYmVyLmNoaWxkID0gbnVsbDtcbiAgZmliZXIuZGVsZXRpb25zID0gbnVsbDtcbiAgZmliZXIuc2libGluZyA9IG51bGw7XG4gIDUgPT09IGZpYmVyLnRhZyAmJlxuICAgICgoYWx0ZXJuYXRlID0gZmliZXIuc3RhdGVOb2RlKSxcbiAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGFsdGVybmF0ZSkpO1xuICBmaWJlci5zdGF0ZU5vZGUgPSBudWxsO1xuICBmaWJlci5yZXR1cm4gPSBudWxsO1xuICBmaWJlci5kZXBlbmRlbmNpZXMgPSBudWxsO1xuICBmaWJlci5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgZmliZXIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIGZpYmVyLnBlbmRpbmdQcm9wcyA9IG51bGw7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IG51bGw7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbn1cbnZhciBob3N0UGFyZW50ID0gbnVsbCxcbiAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIHBhcmVudFxuKSB7XG4gIGZvciAocGFyZW50ID0gcGFyZW50LmNoaWxkOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkUm9vdCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgcGFyZW50KSxcbiAgICAgIChwYXJlbnQgPSBwYXJlbnQuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIGRlbGV0ZWRGaWJlclxuKSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJVbm1vdW50KVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQocmVuZGVyZXJJRCwgZGVsZXRlZEZpYmVyKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIHN3aXRjaCAoZGVsZXRlZEZpYmVyLnRhZykge1xuICAgIGNhc2UgMjY6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlLmNvdW50LS1cbiAgICAgICAgOiBkZWxldGVkRmliZXIuc3RhdGVOb2RlICYmXG4gICAgICAgICAgKChkZWxldGVkRmliZXIgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgICAgICBkZWxldGVkRmliZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgdmFyIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudCxcbiAgICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGlzU2luZ2xldG9uU2NvcGUoZGVsZXRlZEZpYmVyLnR5cGUpICYmXG4gICAgICAgICgoaG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLCAoaG9zdFBhcmVudElzQ29udGFpbmVyID0gITEpKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgcmVsZWFzZVNpbmdsZXRvbkluc3RhbmNlKGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgY2FzZSA2OlxuICAgICAgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgaWYgKG51bGwgIT09IGhvc3RQYXJlbnQpXG4gICAgICAgIGlmIChob3N0UGFyZW50SXNDb250YWluZXIpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICg5ID09PSBob3N0UGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgICAgID8gaG9zdFBhcmVudC5ib2R5XG4gICAgICAgICAgICAgIDogXCJIVE1MXCIgPT09IGhvc3RQYXJlbnQubm9kZU5hbWVcbiAgICAgICAgICAgICAgICA/IGhvc3RQYXJlbnQub3duZXJEb2N1bWVudC5ib2R5XG4gICAgICAgICAgICAgICAgOiBob3N0UGFyZW50XG4gICAgICAgICAgICApLnJlbW92ZUNoaWxkKGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdFBhcmVudC5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIG51bGwgIT09IGhvc3RQYXJlbnQgJiZcbiAgICAgICAgKGhvc3RQYXJlbnRJc0NvbnRhaW5lclxuICAgICAgICAgID8gKChmaW5pc2hlZFJvb3QgPSBob3N0UGFyZW50KSxcbiAgICAgICAgICAgIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShcbiAgICAgICAgICAgICAgOSA9PT0gZmluaXNoZWRSb290Lm5vZGVUeXBlXG4gICAgICAgICAgICAgICAgPyBmaW5pc2hlZFJvb3QuYm9keVxuICAgICAgICAgICAgICAgIDogXCJIVE1MXCIgPT09IGZpbmlzaGVkUm9vdC5ub2RlTmFtZVxuICAgICAgICAgICAgICAgICAgPyBmaW5pc2hlZFJvb3Qub3duZXJEb2N1bWVudC5ib2R5XG4gICAgICAgICAgICAgICAgICA6IGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oZmluaXNoZWRSb290KSlcbiAgICAgICAgICA6IGNsZWFyU3VzcGVuc2VCb3VuZGFyeShob3N0UGFyZW50LCBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwcmV2SG9zdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG4gICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgaG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICEwO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNDpcbiAgICBjYXNlIDE1OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoMiwgZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDQsIGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgKHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpLFxuICAgICAgICAocHJldkhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJldkhvc3RQYXJlbnQuY29tcG9uZW50V2lsbFVubW91bnQgJiZcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gICAgICAgICAgICBkZWxldGVkRmliZXIsXG4gICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgcHJldkhvc3RQYXJlbnRcbiAgICAgICAgICApKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPVxuICAgICAgICAocHJldkhvc3RQYXJlbnQgPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuKSB8fFxuICAgICAgICBudWxsICE9PSBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaykge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUpLFxuICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QuZGVoeWRyYXRlZCksIG51bGwgIT09IGZpbmlzaGVkUm9vdCkpKVxuICApXG4gICAgdHJ5IHtcbiAgICAgIHJldHJ5SWZCbG9ja2VkT24oZmluaXNoZWRSb290KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmV0cnlDYWNoZShmaW5pc2hlZFdvcmspIHtcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAxMzpcbiAgICBjYXNlIDE5OlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCA9PT0gcmV0cnlDYWNoZSAmJlxuICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBuZXcgUG9zc2libHlXZWFrU2V0KCkpO1xuICAgICAgcmV0dXJuIHJldHJ5Q2FjaGU7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSxcbiAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuX3JldHJ5Q2FjaGUpLFxuICAgICAgICBudWxsID09PSByZXRyeUNhY2hlICYmXG4gICAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuX3JldHJ5Q2FjaGUgPSBuZXcgUG9zc2libHlXZWFrU2V0KCkpLFxuICAgICAgICByZXRyeUNhY2hlXG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQzNSwgZmluaXNoZWRXb3JrLnRhZykpO1xuICB9XG59XG5mdW5jdGlvbiBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgd2FrZWFibGVzKSB7XG4gIHZhciByZXRyeUNhY2hlID0gZ2V0UmV0cnlDYWNoZShmaW5pc2hlZFdvcmspO1xuICB3YWtlYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAod2FrZWFibGUpIHtcbiAgICB2YXIgcmV0cnkgPSByZXNvbHZlUmV0cnlXYWtlYWJsZS5iaW5kKG51bGwsIGZpbmlzaGVkV29yaywgd2FrZWFibGUpO1xuICAgIHJldHJ5Q2FjaGUuaGFzKHdha2VhYmxlKSB8fFxuICAgICAgKHJldHJ5Q2FjaGUuYWRkKHdha2VhYmxlKSwgd2FrZWFibGUudGhlbihyZXRyeSwgcmV0cnkpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QkanNjb21wJDAsIHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldLFxuICAgICAgICByb290ID0gcm9vdCRqc2NvbXAkMCxcbiAgICAgICAgcmV0dXJuRmliZXIgPSBwYXJlbnRGaWJlcixcbiAgICAgICAgcGFyZW50ID0gcmV0dXJuRmliZXI7XG4gICAgICBhOiBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICAgICAgc3dpdGNoIChwYXJlbnQudGFnKSB7XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIGlmIChpc1NpbmdsZXRvblNjb3BlKHBhcmVudC50eXBlKSkge1xuICAgICAgICAgICAgICBob3N0UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBob3N0UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICEwO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgPT09IGhvc3RQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYwKSk7XG4gICAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKHJvb3QsIHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICByb290ID0gY2hpbGRUb0RlbGV0ZS5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSByb290ICYmIChyb290LnJldHVybiA9IG51bGwpO1xuICAgICAgY2hpbGRUb0RlbGV0ZS5yZXR1cm4gPSBudWxsO1xuICAgIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEzODc4KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIocGFyZW50RmliZXIsIHJvb3QkanNjb21wJDApLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbnZhciBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IG51bGw7XG5mdW5jdGlvbiBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCkge1xuICB2YXIgY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIChjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoMywgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCgzLCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoNSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgZmxhZ3MgJiA2NCAmJlxuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gJiZcbiAgICAgICAgKChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsgJiZcbiAgICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLmNhbGxiYWNrcyksXG4gICAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICgoY3VycmVudCA9IGZpbmlzaGVkV29yay5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzKSxcbiAgICAgICAgICAgIChmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9XG4gICAgICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgPyBmbGFncyA6IGN1cnJlbnQuY29uY2F0KGZsYWdzKSkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgdmFyIGhvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIHZhciBjdXJyZW50UmVzb3VyY2UgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpXG4gICAgICAgICAgaWYgKG51bGwgPT09IGZsYWdzKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgICAgICAgICBiOiBzd2l0Y2ggKGZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGl0bGVcIilbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAhY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5uYW1lc3BhY2VVUkkgfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IHRpdGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlTm9kZXMgPSBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUoXG4gICAgICAgICAgICAgICAgICAgICAgXCJsaW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJocmVmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmhyZWYgfHwgXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVOb2RlcylcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHJlZiB8fCBcIlwiID09PSBjdXJyZW50LmhyZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmhyZWYpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucmVsID8gbnVsbCA6IGN1cnJlbnQucmVsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQudGl0bGUgPyBudWxsIDogY3VycmVudC50aXRsZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNyb3NzT3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY3Jvc3NPcmlnaW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIChtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmNvbnRlbnQgfHwgXCJcIikpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCIgKyBjdXJyZW50LmNvbnRlbnQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lm5hbWUgPyBudWxsIDogY3VycmVudC5uYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudC5wcm9wZXJ0eSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHR0cC1lcXVpdlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHR0cEVxdWl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuaHR0cEVxdWl2KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjaGFyc2V0XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jaGFyU2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY2hhclNldCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVOb2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChmbGFncyk7XG4gICAgICAgICAgICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnRSZXNvdXJjZSwgZmxhZ3MsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuYXBwZW5kQ2hpbGQoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2OCwgZmxhZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gZmxhZ3M7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY3VycmVudFJlc291cmNlICE9PSBmbGFnc1xuICAgICAgICAgICAgPyAobnVsbCA9PT0gY3VycmVudFJlc291cmNlXG4gICAgICAgICAgICAgICAgPyBudWxsICE9PSBjdXJyZW50LnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgKChjdXJyZW50ID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpKVxuICAgICAgICAgICAgICAgIDogY3VycmVudFJlc291cmNlLmNvdW50LS0sXG4gICAgICAgICAgICAgIG51bGwgPT09IGZsYWdzXG4gICAgICAgICAgICAgICAgPyBtb3VudEhvaXN0YWJsZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGVcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiBudWxsID09PSBmbGFncyAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICYmXG4gICAgICAgICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmluaXNoZWRXb3JrLmZsYWdzICYgMzIpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoaG9pc3RhYmxlUm9vdCwgXCJcIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICBudWxsICE9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgJiZcbiAgICAgICAgKChob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMpLFxuICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBob2lzdGFibGVSb290LFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50Lm1lbW9pemVkUHJvcHMgOiBob2lzdGFibGVSb290XG4gICAgICAgICkpO1xuICAgICAgZmxhZ3MgJiAxMDI0ICYmIChuZWVkc0Zvcm1SZXNldCA9ICEwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICBpZiAobnVsbCA9PT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MikpO1xuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICBjdXJyZW50ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjdXJyZW50Lm5vZGVWYWx1ZSA9IGZsYWdzO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB0YWdDYWNoZXMgPSBudWxsO1xuICAgICAgaG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KHJvb3QuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Q7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQgJiYgbnVsbCAhPT0gY3VycmVudCAmJiBjdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24ocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgbmVlZHNGb3JtUmVzZXQgJiZcbiAgICAgICAgKChuZWVkc0Zvcm1SZXNldCA9ICExKSwgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpbmlzaGVkV29yaykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZmxhZ3MgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChcbiAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICApO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGZsYWdzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmNoaWxkLmZsYWdzICYgODE5MiAmJlxuICAgICAgICAobnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpICE9PVxuICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICAgKGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgPSBub3coKSk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgaG9pc3RhYmxlUm9vdCA9IG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlO1xuICAgICAgdmFyIHdhc0hpZGRlbiA9IG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlLFxuICAgICAgICBwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuLFxuICAgICAgICBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHwgd2FzSGlkZGVuO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgODE5MilcbiAgICAgICAgYTogZm9yIChcbiAgICAgICAgICByb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSxcbiAgICAgICAgICAgIHJvb3QuX3Zpc2liaWxpdHkgPSBob2lzdGFibGVSb290XG4gICAgICAgICAgICAgID8gcm9vdC5fdmlzaWJpbGl0eSAmIC0yXG4gICAgICAgICAgICAgIDogcm9vdC5fdmlzaWJpbGl0eSB8IDEsXG4gICAgICAgICAgICBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgICAgIChudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgICAgICAgd2FzSGlkZGVuIHx8XG4gICAgICAgICAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIHx8XG4gICAgICAgICAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yaykpLFxuICAgICAgICAgICAgY3VycmVudCA9IG51bGwsXG4gICAgICAgICAgICByb290ID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgIDtcblxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoNSA9PT0gcm9vdC50YWcgfHwgMjYgPT09IHJvb3QudGFnKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICB3YXNIaWRkZW4gPSBjdXJyZW50ID0gcm9vdDtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoKChjdXJyZW50UmVzb3VyY2UgPSB3YXNIaWRkZW4uc3RhdGVOb2RlKSwgaG9pc3RhYmxlUm9vdCkpXG4gICAgICAgICAgICAgICAgICAobWF5YmVOb2RlcyA9IGN1cnJlbnRSZXNvdXJjZS5zdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlTm9kZXMuc2V0UHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICA/IG1heWJlTm9kZXMuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsIFwibm9uZVwiLCBcImltcG9ydGFudFwiKVxuICAgICAgICAgICAgICAgICAgICAgIDogKG1heWJlTm9kZXMuZGlzcGxheSA9IFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGkgPSB3YXNIaWRkZW4uc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlUHJvcCA9IHdhc0hpZGRlbi5tZW1vaXplZFByb3BzLnN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHN0eWxlUHJvcCAmJlxuICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHN0eWxlUHJvcCAmJlxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlUHJvcC5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc3R5bGVQcm9wLmRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgIGkuc3R5bGUuZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT0gZGlzcGxheSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICA6IChcIlwiICsgZGlzcGxheSkudHJpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcih3YXNIaWRkZW4sIHdhc0hpZGRlbi5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoNiA9PT0gcm9vdC50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIHdhc0hpZGRlbiA9IHJvb3Q7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd2FzSGlkZGVuLnN0YXRlTm9kZS5ub2RlVmFsdWUgPSBob2lzdGFibGVSb290XG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogd2FzSGlkZGVuLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3Iod2FzSGlkZGVuLCB3YXNIaWRkZW4ucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKCgyMiAhPT0gcm9vdC50YWcgJiYgMjMgIT09IHJvb3QudGFnKSB8fFxuICAgICAgICAgICAgICBudWxsID09PSByb290Lm1lbW9pemVkU3RhdGUgfHxcbiAgICAgICAgICAgICAgcm9vdCA9PT0gZmluaXNoZWRXb3JrKSAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gcm9vdC5jaGlsZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcm9vdC5jaGlsZC5yZXR1cm4gPSByb290O1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QuY2hpbGQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvb3QgPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICBmb3IgKDsgbnVsbCA9PT0gcm9vdC5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSByb290LnJldHVybiB8fCByb290LnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSBicmVhayBhO1xuICAgICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID09PSByb290ICYmIChjdXJyZW50ID0gbnVsbCk7XG4gICAgICAgICAgcm9vdC5zaWJsaW5nLnJldHVybiA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIHJvb3QgPSByb290LnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGN1cnJlbnQgPSBmbGFncy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICAoKGZsYWdzLnJldHJ5UXVldWUgPSBudWxsKSxcbiAgICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBjdXJyZW50KSkpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzA6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIxOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBpZiAoZmxhZ3MgJiAyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBob3N0UGFyZW50RmliZXIsIHBhcmVudEZpYmVyID0gZmluaXNoZWRXb3JrLnJldHVybjtcbiAgICAgICAgbnVsbCAhPT0gcGFyZW50RmliZXI7XG5cbiAgICAgICkge1xuICAgICAgICBpZiAoaXNIb3N0UGFyZW50KHBhcmVudEZpYmVyKSkge1xuICAgICAgICAgIGhvc3RQYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIucmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgPT0gaG9zdFBhcmVudEZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgc3dpdGNoIChob3N0UGFyZW50RmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgdmFyIHBhcmVudCA9IGhvc3RQYXJlbnRGaWJlci5zdGF0ZU5vZGUsXG4gICAgICAgICAgICBiZWZvcmUgPSBnZXRIb3N0U2libGluZyhmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSwgcGFyZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBwYXJlbnQkMTQ0ID0gaG9zdFBhcmVudEZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICBob3N0UGFyZW50RmliZXIuZmxhZ3MgJiAzMiAmJlxuICAgICAgICAgICAgKHNldFRleHRDb250ZW50KHBhcmVudCQxNDQsIFwiXCIpLCAoaG9zdFBhcmVudEZpYmVyLmZsYWdzICY9IC0zMykpO1xuICAgICAgICAgIHZhciBiZWZvcmUkMTQ1ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUkMTQ1LCBwYXJlbnQkMTQ0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgdmFyIHBhcmVudCQxNDYgPSBob3N0UGFyZW50RmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sXG4gICAgICAgICAgICBiZWZvcmUkMTQ3ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgYmVmb3JlJDE0NyxcbiAgICAgICAgICAgIHBhcmVudCQxNDZcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYxKSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTM7XG4gIH1cbiAgZmxhZ3MgJiA0MDk2ICYmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTQwOTcpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlSZXNldEZvcm1zKHBhcmVudEZpYmVyKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI0KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpYmVyID0gcGFyZW50RmliZXI7XG4gICAgICByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmliZXIpO1xuICAgICAgNSA9PT0gZmliZXIudGFnICYmIGZpYmVyLmZsYWdzICYgMTAyNCAmJiBmaWJlci5zdGF0ZU5vZGUucmVzZXQoKTtcbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhyb290LCBwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKHJvb3QsIHBhcmVudEZpYmVyLmFsdGVybmF0ZSwgcGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIHZhciBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcjtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE0OlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDQsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQgJiZcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmsucmV0dXJuLFxuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjc6XG4gICAgICAgIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKTtcbiAgICAgIGNhc2UgMjY6XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHNhZmVseURldGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMwOlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgY3VycmVudCA9IHBhcmVudEZpYmVyLmFsdGVybmF0ZSxcbiAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg0LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBjdXJyZW50LnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpbmlzaGVkUm9vdCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGlkZGVuQ2FsbGJhY2tzID0gZmluaXNoZWRSb290LnNoYXJlZC5oaWRkZW5DYWxsYmFja3M7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gaGlkZGVuQ2FsbGJhY2tzKVxuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzID0gbnVsbCwgZmluaXNoZWRSb290ID0gMDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPCBoaWRkZW5DYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCsrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjYWxsQ2FsbGJhY2soaGlkZGVuQ2FsbGJhY2tzW2ZpbmlzaGVkUm9vdF0sIGluc3RhbmNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgICBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI3OlxuICAgICAgICBjb21taXRIb3N0U2luZ2xldG9uQWNxdWlzaXRpb24oZmluaXNoZWRXb3JrKTtcbiAgICAgIGNhc2UgMjY6XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICAgY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yayk7XG4gICAgICAgIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTI6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAgIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMDpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBwcmV2aW91c0NhY2hlID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAocHJldmlvdXNDYWNoZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgIChjdXJyZW50ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ICE9PSBwcmV2aW91c0NhY2hlICYmXG4gICAgKG51bGwgIT0gY3VycmVudCAmJiBjdXJyZW50LnJlZkNvdW50KyssXG4gICAgbnVsbCAhPSBwcmV2aW91c0NhY2hlICYmIHJlbGVhc2VDYWNoZShwcmV2aW91c0NhY2hlKSk7XG59XG5mdW5jdGlvbiBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIG51bGwgIT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gIGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlO1xuICBmaW5pc2hlZFdvcmsgIT09IGN1cnJlbnQgJiZcbiAgICAoZmluaXNoZWRXb3JrLnJlZkNvdW50KyssIG51bGwgIT0gY3VycmVudCAmJiByZWxlYXNlQ2FjaGUoY3VycmVudCkpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gIHJvb3QsXG4gIHBhcmVudEZpYmVyLFxuICBjb21taXR0ZWRMYW5lcyxcbiAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50RmliZXIsXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiYgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg5LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAoKGZpbmlzaGVkUm9vdCA9IG51bGwpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZSksXG4gICAgICAgIChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZSksXG4gICAgICAgIGZpbmlzaGVkV29yayAhPT0gZmluaXNoZWRSb290ICYmXG4gICAgICAgICAgKGZpbmlzaGVkV29yay5yZWZDb3VudCsrLFxuICAgICAgICAgIG51bGwgIT0gZmluaXNoZWRSb290ICYmIHJlbGVhc2VDYWNoZShmaW5pc2hlZFJvb3QpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgaWYgKGZsYWdzICYgMjA0OCkge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICAgICk7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIF9maW5pc2hlZFdvcmskbWVtb2l6ZTIgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgIGlkID0gX2ZpbmlzaGVkV29yayRtZW1vaXplMi5pZCxcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdCA9IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIub25Qb3N0Q29tbWl0O1xuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG9uUG9zdENvbW1pdCAmJlxuICAgICAgICAgICAgb25Qb3N0Q29tbWl0KFxuICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSA/IFwibW91bnRcIiA6IFwidXBkYXRlXCIsXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5wYXNzaXZlRWZmZWN0RHVyYXRpb24sXG4gICAgICAgICAgICAgIC0wXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2VcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMzpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIGlkID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gX2ZpbmlzaGVkV29yayRtZW1vaXplMi5fdmlzaWJpbGl0eSAmIDJcbiAgICAgICAgICA/IHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspXG4gICAgICAgIDogX2ZpbmlzaGVkV29yayRtZW1vaXplMi5fdmlzaWJpbGl0eSAmIDJcbiAgICAgICAgICA/IHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAoKF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgfD0gMiksXG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgICAgICAgICApKTtcbiAgICAgIGZsYWdzICYgMjA0OCAmJiBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKGlkLCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMkanNjb21wJDAsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zJGpzY29tcCQwLFxuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4pIHtcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyA9XG4gICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJiAwICE9PSAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290JGpzY29tcCQwLFxuICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICBjb21taXR0ZWRMYW5lcyA9IGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMgPSBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg4LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjM6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGVcbiAgICAgICAgICA/IGluc3RhbmNlLl92aXNpYmlsaXR5ICYgMlxuICAgICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChpbnN0YW5jZS5fdmlzaWJpbGl0eSB8PSAyKSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgKSk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gIHBhcmVudEZpYmVyXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgfVxuICAgICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICAgIH1cbn1cbnZhciBzdXNwZW5zZXlDb21taXRGbGFnID0gODE5MjtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZylcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgICAgIGZpYmVyLmZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZyAmJlxuICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIHN1c3BlbmRSZXNvdXJjZShcbiAgICAgICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgIGZpYmVyLm1lbW9pemVkUHJvcHNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KGZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IHByZXZpb3VzSG9pc3RhYmxlUm9vdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBudWxsID09PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICgocHJldmlvdXNIb2lzdGFibGVSb290ID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgICAgbnVsbCAhPT0gcHJldmlvdXNIb2lzdGFibGVSb290ICYmXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IHN1c3BlbnNleUNvbW1pdEZsYWcpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSAxNjc3NzIxNiksXG4gICAgICAgICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3QpKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpIHtcbiAgdmFyIHByZXZpb3VzRmliZXIgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBwcmV2aW91c0ZpYmVyICYmXG4gICAgKChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIuY2hpbGQpLCBudWxsICE9PSBwYXJlbnRGaWJlcilcbiAgKSB7XG4gICAgcHJldmlvdXNGaWJlci5jaGlsZCA9IG51bGw7XG4gICAgZG9cbiAgICAgIChwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyksXG4gICAgICAgIChwYXJlbnRGaWJlci5zaWJsaW5nID0gbnVsbCksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIpO1xuICAgIHdoaWxlIChudWxsICE9PSBwYXJlbnRGaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMocGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKDAgIT09IChwYXJlbnRGaWJlci5mbGFncyAmIDE2KSkge1xuICAgIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXTtcbiAgICAgICAgbmV4dEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gICAgICAgICAgY2hpbGRUb0RlbGV0ZSxcbiAgICAgICAgICBwYXJlbnRGaWJlclxuICAgICAgICApO1xuICAgICAgfVxuICAgIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKTtcbiAgfVxuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIoZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg5LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgIGluc3RhbmNlLl92aXNpYmlsaXR5ICYgMiAmJlxuICAgICAgKG51bGwgPT09IGZpbmlzaGVkV29yay5yZXR1cm4gfHwgMTMgIT09IGZpbmlzaGVkV29yay5yZXR1cm4udGFnKVxuICAgICAgICA/ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgJj0gLTMpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRXb3JrKSlcbiAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgZGVsZXRpb25zID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChkZWxldGlvbnMudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGRlbGV0aW9ucywgZGVsZXRpb25zLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBpID0gZGVsZXRpb25zLnN0YXRlTm9kZTtcbiAgICAgICAgaS5fdmlzaWJpbGl0eSAmIDIgJiZcbiAgICAgICAgICAoKGkuX3Zpc2liaWxpdHkgJj0gLTMpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhkZWxldGlvbnMpO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gIGRlbGV0ZWRTdWJ0cmVlUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvclxuKSB7XG4gIGZvciAoOyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG51bGwgIT09IGZpYmVyLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgY2FjaGUgPSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sO1xuICAgICAgICAgIG51bGwgIT0gY2FjaGUgJiYgY2FjaGUucmVmQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlbGVhc2VDYWNoZShmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICB9XG4gICAgY2FjaGUgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gY2FjaGUpIChjYWNoZS5yZXR1cm4gPSBmaWJlciksIChuZXh0RWZmZWN0ID0gY2FjaGUpO1xuICAgIGVsc2VcbiAgICAgIGE6IGZvciAoZmliZXIgPSBkZWxldGVkU3VidHJlZVJvb3Q7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBjYWNoZSA9IG5leHRFZmZlY3Q7XG4gICAgICAgIHZhciBzaWJsaW5nID0gY2FjaGUuc2libGluZyxcbiAgICAgICAgICByZXR1cm5GaWJlciA9IGNhY2hlLnJldHVybjtcbiAgICAgICAgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoY2FjaGUpO1xuICAgICAgICBpZiAoY2FjaGUgPT09IGZpYmVyKSB7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IG51bGw7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykge1xuICAgICAgICAgIHNpYmxpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0RWZmZWN0ID0gcmV0dXJuRmliZXI7XG4gICAgICB9XG4gIH1cbn1cbnZhciBEZWZhdWx0QXN5bmNEaXNwYXRjaGVyID0ge1xuICAgIGdldENhY2hlRm9yVHlwZTogZnVuY3Rpb24gKHJlc291cmNlVHlwZSkge1xuICAgICAgdmFyIGNhY2hlID0gcmVhZENvbnRleHQoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgY2FjaGVGb3JUeXBlID0gY2FjaGUuZGF0YS5nZXQocmVzb3VyY2VUeXBlKTtcbiAgICAgIHZvaWQgMCA9PT0gY2FjaGVGb3JUeXBlICYmXG4gICAgICAgICgoY2FjaGVGb3JUeXBlID0gcmVzb3VyY2VUeXBlKCkpLFxuICAgICAgICBjYWNoZS5kYXRhLnNldChyZXNvdXJjZVR5cGUsIGNhY2hlRm9yVHlwZSkpO1xuICAgICAgcmV0dXJuIGNhY2hlRm9yVHlwZTtcbiAgICB9XG4gIH0sXG4gIFBvc3NpYmx5V2Vha01hcCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtNYXAgPyBXZWFrTWFwIDogTWFwLFxuICBleGVjdXRpb25Db250ZXh0ID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3MgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9ICExLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9ICExLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMSxcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSA9ICExLFxuICBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IEluZmluaXR5LFxuICB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCxcbiAgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBudWxsLFxuICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDAsXG4gIHBlbmRpbmdFZmZlY3RzUm9vdCA9IG51bGwsXG4gIHBlbmRpbmdGaW5pc2hlZFdvcmsgPSBudWxsLFxuICBwZW5kaW5nRWZmZWN0c0xhbmVzID0gMCxcbiAgcGVuZGluZ0VmZmVjdHNSZW1haW5pbmdMYW5lcyA9IDAsXG4gIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsLFxuICBwZW5kaW5nUmVjb3ZlcmFibGVFcnJvcnMgPSBudWxsLFxuICBuZXN0ZWRVcGRhdGVDb3VudCA9IDAsXG4gIHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGw7XG5mdW5jdGlvbiByZXF1ZXN0VXBkYXRlTGFuZSgpIHtcbiAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiYgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMpXG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgLXdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzO1xuICBpZiAobnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCkge1xuICAgIHZhciBhY3Rpb25TY29wZUxhbmUgPSBjdXJyZW50RW50YW5nbGVkTGFuZTtcbiAgICByZXR1cm4gMCAhPT0gYWN0aW9uU2NvcGVMYW5lID8gYWN0aW9uU2NvcGVMYW5lIDogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpO1xufVxuZnVuY3Rpb24gcmVxdWVzdERlZmVycmVkTGFuZSgpIHtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgPVxuICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSB8fCBpc0h5ZHJhdGluZ1xuICAgICAgICA/IGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKClcbiAgICAgICAgOiA1MzY4NzA5MTIpO1xuICB2YXIgc3VzcGVuc2VIYW5kbGVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyICYmIChzdXNwZW5zZUhhbmRsZXIuZmxhZ3MgfD0gMzIpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmU7XG59XG5mdW5jdGlvbiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIGxhbmUpIHtcbiAgaWYgKFxuICAgIChyb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiZcbiAgICAgICgyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiB8fFxuICAgICAgICA5ID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikpIHx8XG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0XG4gIClcbiAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCAwKSxcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICByb290LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICExXG4gICAgICApO1xuICBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCBsYW5lKTtcbiAgaWYgKDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgfHwgcm9vdCAhPT0gd29ya0luUHJvZ3Jlc3NSb290KVxuICAgIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICAgKDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiZcbiAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9IGxhbmUpLFxuICAgICAgNCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICByb290LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICExXG4gICAgICAgICkpLFxuICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3Qocm9vdCRqc2NvbXAkMCwgbGFuZXMsIGZvcmNlU3luYykge1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgdmFyIHNob3VsZFRpbWVTbGljZSA9XG4gICAgICAoIWZvcmNlU3luYyAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiAxMjQpICYmXG4gICAgICAgIDAgPT09IChsYW5lcyAmIHJvb3QkanNjb21wJDAuZXhwaXJlZExhbmVzKSkgfHxcbiAgICAgIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCRqc2NvbXAkMCwgbGFuZXMpLFxuICAgIGV4aXRTdGF0dXMgPSBzaG91bGRUaW1lU2xpY2VcbiAgICAgID8gcmVuZGVyUm9vdENvbmN1cnJlbnQocm9vdCRqc2NvbXAkMCwgbGFuZXMpXG4gICAgICA6IHJlbmRlclJvb3RTeW5jKHJvb3QkanNjb21wJDAsIGxhbmVzLCAhMCksXG4gICAgcmVuZGVyV2FzQ29uY3VycmVudCA9IHNob3VsZFRpbWVTbGljZTtcbiAgZG8ge1xuICAgIGlmICgwID09PSBleGl0U3RhdHVzKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyAmJlxuICAgICAgICAhc2hvdWxkVGltZVNsaWNlICYmXG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QkanNjb21wJDAsIGxhbmVzLCAwLCAhMSk7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yY2VTeW5jID0gcm9vdCRqc2NvbXAkMC5jdXJyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAhaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZvcmNlU3luYylcbiAgICAgICkge1xuICAgICAgICBleGl0U3RhdHVzID0gcmVuZGVyUm9vdFN5bmMocm9vdCRqc2NvbXAkMCwgbGFuZXMsICExKTtcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgyID09PSBleGl0U3RhdHVzKSB7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBsYW5lcztcbiAgICAgICAgaWYgKHJvb3QkanNjb21wJDAuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJiByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHJvb3QkanNjb21wJDAucGVuZGluZ0xhbmVzICYgLTUzNjg3MDkxMyksXG4gICAgICAgICAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDUzNjg3MDkxMlxuICAgICAgICAgICAgICAgICAgPyA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgIGlmICgwICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICBsYW5lcyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycztcbiAgICAgICAgICAgIHZhciB3YXNSb290RGVoeWRyYXRlZCA9IHJvb3QuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZDtcbiAgICAgICAgICAgIHdhc1Jvb3REZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIChwcmVwYXJlRnJlc2hTdGFjayhyb290LCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLmZsYWdzIHw9IDI1Nik7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByZW5kZXJSb290U3luYyhcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICgyICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciAmJlxuICAgICAgICAgICAgICAgICF3YXNSb290RGVoeWRyYXRlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByb290LmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzIHw9IHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD1cbiAgICAgICAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnM7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gZXhpdFN0YXR1cztcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAgICAgICAgIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9yc1xuICAgICAgICAgICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICAgICAgICAgICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycy5wdXNoLmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnRcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gITE7XG4gICAgICAgICAgaWYgKDIgIT09IGV4aXRTdGF0dXMpIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoMSA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290JGpzY29tcCQwLCAwKTtcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCRqc2NvbXAkMCwgbGFuZXMsIDAsICEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHNob3VsZFRpbWVTbGljZSA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBleGl0U3RhdHVzO1xuICAgICAgICBzd2l0Y2ggKHJlbmRlcldhc0NvbmN1cnJlbnQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDUpKTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBpZiAoKGxhbmVzICYgNDE5NDA0OCkgIT09IGxhbmVzKSBicmVhaztcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAgICF3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKGxhbmVzICYgNjI5MTQ1NjApID09PSBsYW5lcyAmJlxuICAgICAgICAgICgoZXhpdFN0YXR1cyA9IGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgKyAzMDAgLSBub3coKSksXG4gICAgICAgICAgMTAgPCBleGl0U3RhdHVzKVxuICAgICAgICApIHtcbiAgICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoMCAhPT0gZ2V0TmV4dExhbmVzKHNob3VsZFRpbWVTbGljZSwgMCwgITApKSBicmVhayBhO1xuICAgICAgICAgIHNob3VsZFRpbWVTbGljZS50aW1lb3V0SGFuZGxlID0gc2NoZWR1bGVUaW1lb3V0KFxuICAgICAgICAgICAgY29tbWl0Um9vdFdoZW5SZWFkeS5iaW5kKFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICAgIGZvcmNlU3luYyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUsXG4gICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50LFxuICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICAtMCxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGV4aXRTdGF0dXNcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0Um9vdFdoZW5SZWFkeShcbiAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgZm9yY2VTeW5jLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSxcbiAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAtMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IHdoaWxlICgxKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QkanNjb21wJDApO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdFdoZW5SZWFkeShcbiAgcm9vdCxcbiAgZmluaXNoZWRXb3JrLFxuICByZWNvdmVyYWJsZUVycm9ycyxcbiAgdHJhbnNpdGlvbnMsXG4gIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSxcbiAgbGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gIGRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgZXhpdFN0YXR1cyxcbiAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbikge1xuICByb290LnRpbWVvdXRIYW5kbGUgPSAtMTtcbiAgc3VzcGVuZGVkQ29tbWl0UmVhc29uID0gZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncztcbiAgaWYgKFxuICAgIHN1c3BlbmRlZENvbW1pdFJlYXNvbiAmIDgxOTIgfHxcbiAgICAxNjc4NTQwOCA9PT0gKHN1c3BlbmRlZENvbW1pdFJlYXNvbiAmIDE2Nzg1NDA4KVxuICApXG4gICAgaWYgKFxuICAgICAgKChzdXNwZW5kZWRTdGF0ZSA9IHsgc3R5bGVzaGVldHM6IG51bGwsIGNvdW50OiAwLCB1bnN1c3BlbmQ6IG5vb3AgfSksXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihmaW5pc2hlZFdvcmspLFxuICAgICAgKHN1c3BlbmRlZENvbW1pdFJlYXNvbiA9IHdhaXRGb3JDb21taXRUb0JlUmVhZHkoKSksXG4gICAgICBudWxsICE9PSBzdXNwZW5kZWRDb21taXRSZWFzb24pXG4gICAgKSB7XG4gICAgICByb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBzdXNwZW5kZWRDb21taXRSZWFzb24oXG4gICAgICAgIGNvbW1pdFJvb3QuYmluZChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgIHJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgIHRyYW5zaXRpb25zLFxuICAgICAgICAgIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSxcbiAgICAgICAgICBzcGF3bmVkTGFuZSxcbiAgICAgICAgICB1cGRhdGVkTGFuZXMsXG4gICAgICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICBleGl0U3RhdHVzLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICAgICAgICAgIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QsIGxhbmVzLCBzcGF3bmVkTGFuZSwgIWRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICBjb21taXRSb290KFxuICAgIHJvb3QsXG4gICAgZmluaXNoZWRXb3JrLFxuICAgIGxhbmVzLFxuICAgIHJlY292ZXJhYmxlRXJyb3JzLFxuICAgIHRyYW5zaXRpb25zLFxuICAgIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSxcbiAgICBzcGF3bmVkTGFuZSxcbiAgICB1cGRhdGVkTGFuZXMsXG4gICAgc3VzcGVuZGVkUmV0cnlMYW5lc1xuICApO1xufVxuZnVuY3Rpb24gaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZpbmlzaGVkV29yaykge1xuICBmb3IgKHZhciBub2RlID0gZmluaXNoZWRXb3JrOyA7ICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICAoMCA9PT0gdGFnIHx8IDExID09PSB0YWcgfHwgMTUgPT09IHRhZykgJiZcbiAgICAgIG5vZGUuZmxhZ3MgJiAxNjM4NCAmJlxuICAgICAgKCh0YWcgPSBub2RlLnVwZGF0ZVF1ZXVlKSxcbiAgICAgIG51bGwgIT09IHRhZyAmJiAoKHRhZyA9IHRhZy5zdG9yZXMpLCBudWxsICE9PSB0YWcpKVxuICAgIClcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVjayA9IHRhZ1tpXSxcbiAgICAgICAgICBnZXRTbmFwc2hvdCA9IGNoZWNrLmdldFNuYXBzaG90O1xuICAgICAgICBjaGVjayA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghb2JqZWN0SXMoZ2V0U25hcHNob3QoKSwgY2hlY2spKSByZXR1cm4gITE7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgdGFnID0gbm9kZS5jaGlsZDtcbiAgICBpZiAobm9kZS5zdWJ0cmVlRmxhZ3MgJiAxNjM4NCAmJiBudWxsICE9PSB0YWcpXG4gICAgICAodGFnLnJldHVybiA9IG5vZGUpLCAobm9kZSA9IHRhZyk7XG4gICAgZWxzZSB7XG4gICAgICBpZiAobm9kZSA9PT0gZmluaXNoZWRXb3JrKSBicmVhaztcbiAgICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgcmV0dXJuICEwO1xuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFN1c3BlbmRlZChcbiAgcm9vdCxcbiAgc3VzcGVuZGVkTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICBkaWRBdHRlbXB0RW50aXJlVHJlZVxuKSB7XG4gIHN1c3BlbmRlZExhbmVzICY9IH53b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcztcbiAgc3VzcGVuZGVkTGFuZXMgJj0gfndvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzIHw9IHN1c3BlbmRlZExhbmVzO1xuICByb290LnBpbmdlZExhbmVzICY9IH5zdXNwZW5kZWRMYW5lcztcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWUgJiYgKHJvb3Qud2FybUxhbmVzIHw9IHN1c3BlbmRlZExhbmVzKTtcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWUgPSByb290LmV4cGlyYXRpb25UaW1lcztcbiAgZm9yICh2YXIgbGFuZXMgPSBzdXNwZW5kZWRMYW5lczsgMCA8IGxhbmVzOyApIHtcbiAgICB2YXIgaW5kZXgkNCA9IDMxIC0gY2x6MzIobGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNDtcbiAgICBkaWRBdHRlbXB0RW50aXJlVHJlZVtpbmRleCQ0XSA9IC0xO1xuICAgIGxhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmXG4gICAgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIHN1c3BlbmRlZExhbmVzKTtcbn1cbmZ1bmN0aW9uIGZsdXNoU3luY1dvcmskMSgpIHtcbiAgcmV0dXJuIDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgNilcbiAgICA/IChmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSksICExKVxuICAgIDogITA7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKSB7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbilcbiAgICAgIHZhciBpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm47XG4gICAgZWxzZVxuICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsKSxcbiAgICAgICAgcmVzZXRIb29rc09uVW53aW5kKGludGVycnVwdGVkV29yayksXG4gICAgICAgICh0aGVuYWJsZVN0YXRlID0gbnVsbCksXG4gICAgICAgICh0aGVuYWJsZUluZGV4Q291bnRlciA9IDApLFxuICAgICAgICAoaW50ZXJydXB0ZWRXb3JrID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgIGZvciAoOyBudWxsICE9PSBpbnRlcnJ1cHRlZFdvcms7IClcbiAgICAgIHVud2luZEludGVycnVwdGVkV29yayhpbnRlcnJ1cHRlZFdvcmsuYWx0ZXJuYXRlLCBpbnRlcnJ1cHRlZFdvcmspLFxuICAgICAgICAoaW50ZXJydXB0ZWRXb3JrID0gaW50ZXJydXB0ZWRXb3JrLnJldHVybik7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcykge1xuICB2YXIgdGltZW91dEhhbmRsZSA9IHJvb3QudGltZW91dEhhbmRsZTtcbiAgLTEgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QudGltZW91dEhhbmRsZSA9IC0xKSwgY2FuY2VsVGltZW91dCh0aW1lb3V0SGFuZGxlKSk7XG4gIHRpbWVvdXRIYW5kbGUgPSByb290LmNhbmNlbFBlbmRpbmdDb21taXQ7XG4gIG51bGwgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGwpLCB0aW1lb3V0SGFuZGxlKCkpO1xuICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0aW1lb3V0SGFuZGxlID0gY3JlYXRlV29ya0luUHJvZ3Jlc3Mocm9vdC5jdXJyZW50LCBudWxsKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gITE7XG4gIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCBsYW5lcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9XG4gICAgICAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPVxuICAgIG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMTtcbiAgMCAhPT0gKGxhbmVzICYgOCkgJiYgKGxhbmVzIHw9IGxhbmVzICYgMzIpO1xuICB2YXIgYWxsRW50YW5nbGVkTGFuZXMgPSByb290LmVudGFuZ2xlZExhbmVzO1xuICBpZiAoMCAhPT0gYWxsRW50YW5nbGVkTGFuZXMpXG4gICAgZm9yIChcbiAgICAgIHJvb3QgPSByb290LmVudGFuZ2xlbWVudHMsIGFsbEVudGFuZ2xlZExhbmVzICY9IGxhbmVzO1xuICAgICAgMCA8IGFsbEVudGFuZ2xlZExhbmVzO1xuXG4gICAgKSB7XG4gICAgICB2YXIgaW5kZXgkMiA9IDMxIC0gY2x6MzIoYWxsRW50YW5nbGVkTGFuZXMpLFxuICAgICAgICBsYW5lID0gMSA8PCBpbmRleCQyO1xuICAgICAgbGFuZXMgfD0gcm9vdFtpbmRleCQyXTtcbiAgICAgIGFsbEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICAgIH1cbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpO1xuICByZXR1cm4gdGltZW91dEhhbmRsZTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgdGhyb3duVmFsdWUgPT09IFN1c3BlbnNlRXhjZXB0aW9uIHx8IHRocm93blZhbHVlID09PSBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvblxuICAgID8gKCh0aHJvd25WYWx1ZSA9IGdldFN1c3BlbmRlZFRoZW5hYmxlKCkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMykpXG4gICAgOiB0aHJvd25WYWx1ZSA9PT0gU3VzcGVuc2V5Q29tbWl0RXhjZXB0aW9uXG4gICAgICA/ICgodGhyb3duVmFsdWUgPSBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNCkpXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9XG4gICAgICAgICAgdGhyb3duVmFsdWUgPT09IFNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvblxuICAgICAgICAgICAgPyA4XG4gICAgICAgICAgICA6IG51bGwgIT09IHRocm93blZhbHVlICYmXG4gICAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHRocm93blZhbHVlICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdGhyb3duVmFsdWUudGhlblxuICAgICAgICAgICAgICA/IDZcbiAgICAgICAgICAgICAgOiAxKTtcbiAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IHRocm93blZhbHVlO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgICgod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDEpLFxuICAgIGxvZ1VuY2F1Z2h0RXJyb3IoXG4gICAgICByb290LFxuICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodGhyb3duVmFsdWUsIHJvb3QuY3VycmVudClcbiAgICApKTtcbn1cbmZ1bmN0aW9uIHB1c2hEaXNwYXRjaGVyKCkge1xuICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5IO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuICByZXR1cm4gbnVsbCA9PT0gcHJldkRpc3BhdGNoZXIgPyBDb250ZXh0T25seURpc3BhdGNoZXIgOiBwcmV2RGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHB1c2hBc3luY0Rpc3BhdGNoZXIoKSB7XG4gIHZhciBwcmV2QXN5bmNEaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuQTtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuQSA9IERlZmF1bHRBc3luY0Rpc3BhdGNoZXI7XG4gIHJldHVybiBwcmV2QXN5bmNEaXNwYXRjaGVyO1xufVxuZnVuY3Rpb24gcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpIHtcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDQ7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyB8fFxuICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA0MTk0MDQ4KSAhPT1cbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYmXG4gICAgICBudWxsICE9PSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KSB8fFxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9ICEwKTtcbiAgKDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgJiAxMzQyMTc3MjcpICYmXG4gICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzICYgMTM0MjE3NzI3KSkgfHxcbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgfHxcbiAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdCxcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAhMVxuICAgICk7XG59XG5mdW5jdGlvbiByZW5kZXJSb290U3luYyhyb290LCBsYW5lcywgc2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmcpIHtcbiAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgZXhlY3V0aW9uQ29udGV4dCB8PSAyO1xuICB2YXIgcHJldkRpc3BhdGNoZXIgPSBwdXNoRGlzcGF0Y2hlcigpLFxuICAgIHByZXZBc3luY0Rpc3BhdGNoZXIgPSBwdXNoQXN5bmNEaXNwYXRjaGVyKCk7XG4gIGlmICh3b3JrSW5Qcm9ncmVzc1Jvb3QgIT09IHJvb3QgfHwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgIT09IGxhbmVzKVxuICAgICh3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCksIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKTtcbiAgbGFuZXMgPSAhMTtcbiAgdmFyIGV4aXRTdGF0dXMgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzO1xuICBhOiBkb1xuICAgIHRyeSB7XG4gICAgICBpZiAoMCAhPT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gJiYgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgdmFyIHVuaXRPZldvcmsgPSB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB0aHJvd25WYWx1ZSA9IHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWU7XG4gICAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHtcbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgICAgICAgICAgIGV4aXRTdGF0dXMgPSA2O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBudWxsID09PSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50ICYmIChsYW5lcyA9ICEwKTtcbiAgICAgICAgICAgIHZhciByZWFzb24gPSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbjtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBleGl0U3RhdHVzID0gMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAocmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BTeW5jKCk7XG4gICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgICAgIGJyZWFrO1xuICAgIH0gY2F0Y2ggKHRocm93blZhbHVlJDE2Nykge1xuICAgICAgaGFuZGxlVGhyb3cocm9vdCwgdGhyb3duVmFsdWUkMTY3KTtcbiAgICB9XG4gIHdoaWxlICgxKTtcbiAgbGFuZXMgJiYgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyKys7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBwcmV2RGlzcGF0Y2hlcjtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuQSA9IHByZXZBc3luY0Rpc3BhdGNoZXI7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzICYmXG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsKSxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwKSxcbiAgICBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCkpO1xuICByZXR1cm4gZXhpdFN0YXR1cztcbn1cbmZ1bmN0aW9uIHdvcmtMb29wU3luYygpIHtcbiAgZm9yICg7IG51bGwgIT09IHdvcmtJblByb2dyZXNzOyApIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKTtcbn1cbmZ1bmN0aW9uIHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QsIGxhbmVzKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gMjtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKSxcbiAgICBwcmV2QXN5bmNEaXNwYXRjaGVyID0gcHVzaEFzeW5jRGlzcGF0Y2hlcigpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgIT09IHJvb3QgfHwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgIT09IGxhbmVzXG4gICAgPyAoKHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lID0gbm93KCkgKyA1MDApLFxuICAgICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpKVxuICAgIDogKHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhcbiAgICAgICAgcm9vdCxcbiAgICAgICAgbGFuZXNcbiAgICAgICkpO1xuICBhOiBkb1xuICAgIHRyeSB7XG4gICAgICBpZiAoMCAhPT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gJiYgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgbGFuZXMgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgdmFyIHRocm93blZhbHVlID0gd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZTtcbiAgICAgICAgYjogc3dpdGNoICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlUmVzb2x2ZWQodGhyb3duVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAoMiAhPT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAgICAgICA5ICE9PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikgfHxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QgIT09IHJvb3QgfHxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA3KTtcbiAgICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRocm93blZhbHVlLnRoZW4obGFuZXMsIGxhbmVzKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA3O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDU7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlzVGhlbmFibGVSZXNvbHZlZCh0aHJvd25WYWx1ZSlcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgdmFyIGhvc3RGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZSA/IHByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkgOiAxKSB7XG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gaG9zdEZpYmVyLnNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykgd29ya0luUHJvZ3Jlc3MgPSBzaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5GaWJlciA9IGhvc3RGaWJlci5yZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVVbml0T2ZXb3JrKHJldHVybkZpYmVyKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA1KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDYpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wQ29uY3VycmVudEJ5U2NoZWR1bGVyKCk7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjkpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2OSk7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gcHJldkRpc3BhdGNoZXI7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBwcmV2QXN5bmNEaXNwYXRjaGVyO1xuICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykgcmV0dXJuIDA7XG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMDtcbiAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbn1cbmZ1bmN0aW9uIHdvcmtMb29wQ29uY3VycmVudEJ5U2NoZWR1bGVyKCkge1xuICBmb3IgKDsgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgIXNob3VsZFlpZWxkKCk7IClcbiAgICBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwZXJmb3JtVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBuZXh0ID0gYmVnaW5Xb3JrKHVuaXRPZldvcmsuYWx0ZXJuYXRlLCB1bml0T2ZXb3JrLCBlbnRhbmdsZWRSZW5kZXJMYW5lcyk7XG4gIHVuaXRPZldvcmsubWVtb2l6ZWRQcm9wcyA9IHVuaXRPZldvcmsucGVuZGluZ1Byb3BzO1xuICBudWxsID09PSBuZXh0ID8gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIDogKHdvcmtJblByb2dyZXNzID0gbmV4dCk7XG59XG5mdW5jdGlvbiByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgdmFyIG5leHQgPSB1bml0T2ZXb3JrO1xuICB2YXIgY3VycmVudCA9IG5leHQuYWx0ZXJuYXRlO1xuICBzd2l0Y2ggKG5leHQudGFnKSB7XG4gICAgY2FzZSAxNTpcbiAgICBjYXNlIDA6XG4gICAgICBuZXh0ID0gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIG5leHQucGVuZGluZ1Byb3BzLFxuICAgICAgICBuZXh0LnR5cGUsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExOlxuICAgICAgbmV4dCA9IHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBuZXh0LFxuICAgICAgICBuZXh0LnBlbmRpbmdQcm9wcyxcbiAgICAgICAgbmV4dC50eXBlLnJlbmRlcixcbiAgICAgICAgbmV4dC5yZWYsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgcmVzZXRIb29rc09uVW53aW5kKG5leHQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoY3VycmVudCwgbmV4dCksXG4gICAgICAgIChuZXh0ID0gd29ya0luUHJvZ3Jlc3MgPVxuICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3MobmV4dCwgZW50YW5nbGVkUmVuZGVyTGFuZXMpKSxcbiAgICAgICAgKG5leHQgPSBiZWdpbldvcmsoY3VycmVudCwgbmV4dCwgZW50YW5nbGVkUmVuZGVyTGFuZXMpKTtcbiAgfVxuICB1bml0T2ZXb3JrLm1lbW9pemVkUHJvcHMgPSB1bml0T2ZXb3JrLnBlbmRpbmdQcm9wcztcbiAgbnVsbCA9PT0gbmV4dCA/IGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSA6ICh3b3JrSW5Qcm9ncmVzcyA9IG5leHQpO1xufVxuZnVuY3Rpb24gdGhyb3dBbmRVbndpbmRXb3JrTG9vcChcbiAgcm9vdCxcbiAgdW5pdE9mV29yayxcbiAgdGhyb3duVmFsdWUsXG4gIHN1c3BlbmRlZFJlYXNvblxuKSB7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICByZXNldEhvb2tzT25VbndpbmQodW5pdE9mV29yayk7XG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG4gIHZhciByZXR1cm5GaWJlciA9IHVuaXRPZldvcmsucmV0dXJuO1xuICB0cnkge1xuICAgIGlmIChcbiAgICAgIHRocm93RXhjZXB0aW9uKFxuICAgICAgICByb290LFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgdW5pdE9mV29yayxcbiAgICAgICAgdGhyb3duVmFsdWUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICApXG4gICAgKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMTtcbiAgICAgIGxvZ1VuY2F1Z2h0RXJyb3IoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgICApO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAobnVsbCAhPT0gcmV0dXJuRmliZXIpIHRocm93ICgod29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlciksIGVycm9yKTtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMTtcbiAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgcm9vdCxcbiAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgKTtcbiAgICB3b3JrSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh1bml0T2ZXb3JrLmZsYWdzICYgMzI3NjgpIHtcbiAgICBpZiAoaXNIeWRyYXRpbmcgfHwgMSA9PT0gc3VzcGVuZGVkUmVhc29uKSByb290ID0gITA7XG4gICAgZWxzZSBpZiAoXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyB8fFxuICAgICAgMCAhPT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKVxuICAgIClcbiAgICAgIHJvb3QgPSAhMTtcbiAgICBlbHNlIGlmIChcbiAgICAgICgod29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gcm9vdCA9ICEwKSxcbiAgICAgIDIgPT09IHN1c3BlbmRlZFJlYXNvbiB8fFxuICAgICAgICA5ID09PSBzdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgMyA9PT0gc3VzcGVuZGVkUmVhc29uIHx8XG4gICAgICAgIDYgPT09IHN1c3BlbmRlZFJlYXNvbilcbiAgICApXG4gICAgICAoc3VzcGVuZGVkUmVhc29uID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICAgIG51bGwgIT09IHN1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgIDEzID09PSBzdXNwZW5kZWRSZWFzb24udGFnICYmXG4gICAgICAgICAgKHN1c3BlbmRlZFJlYXNvbi5mbGFncyB8PSAxNjM4NCk7XG4gICAgdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCByb290KTtcbiAgfSBlbHNlIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKTtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgZG8ge1xuICAgIGlmICgwICE9PSAoY29tcGxldGVkV29yay5mbGFncyAmIDMyNzY4KSkge1xuICAgICAgdW53aW5kVW5pdE9mV29yayhcbiAgICAgICAgY29tcGxldGVkV29yayxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1bml0T2ZXb3JrID0gY29tcGxldGVkV29yay5yZXR1cm47XG4gICAgdmFyIG5leHQgPSBjb21wbGV0ZVdvcmsoXG4gICAgICBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICBlbnRhbmdsZWRSZW5kZXJMYW5lc1xuICAgICk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbmV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcGxldGVkV29yayA9IGNvbXBsZXRlZFdvcmsuc2libGluZztcbiAgICBpZiAobnVsbCAhPT0gY29tcGxldGVkV29yaykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IGNvbXBsZXRlZFdvcmsgPSB1bml0T2ZXb3JrO1xuICB9IHdoaWxlIChudWxsICE9PSBjb21wbGV0ZWRXb3JrKTtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDUpO1xufVxuZnVuY3Rpb24gdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCBza2lwU2libGluZ3MpIHtcbiAgZG8ge1xuICAgIHZhciBuZXh0ID0gdW53aW5kV29yayh1bml0T2ZXb3JrLmFsdGVybmF0ZSwgdW5pdE9mV29yayk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIG5leHQuZmxhZ3MgJj0gMzI3Njc7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgICBudWxsICE9PSBuZXh0ICYmXG4gICAgICAoKG5leHQuZmxhZ3MgfD0gMzI3NjgpLCAobmV4dC5zdWJ0cmVlRmxhZ3MgPSAwKSwgKG5leHQuZGVsZXRpb25zID0gbnVsbCkpO1xuICAgIGlmIChcbiAgICAgICFza2lwU2libGluZ3MgJiZcbiAgICAgICgodW5pdE9mV29yayA9IHVuaXRPZldvcmsuc2libGluZyksIG51bGwgIT09IHVuaXRPZldvcmspXG4gICAgKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcms7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzID0gdW5pdE9mV29yayA9IG5leHQ7XG4gIH0gd2hpbGUgKG51bGwgIT09IHVuaXRPZldvcmspO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdChcbiAgcm9vdCxcbiAgZmluaXNoZWRXb3JrLFxuICBsYW5lcyxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICByb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsO1xuICBkbyBmbHVzaFBlbmRpbmdFZmZlY3RzKCk7XG4gIHdoaWxlICgwICE9PSBwZW5kaW5nRWZmZWN0c1N0YXR1cyk7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICBpZiAobnVsbCAhPT0gZmluaXNoZWRXb3JrKSB7XG4gICAgaWYgKGZpbmlzaGVkV29yayA9PT0gcm9vdC5jdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE3NykpO1xuICAgIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSA9IGZpbmlzaGVkV29yay5sYW5lcyB8IGZpbmlzaGVkV29yay5jaGlsZExhbmVzO1xuICAgIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSB8PSBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXM7XG4gICAgbWFya1Jvb3RGaW5pc2hlZChcbiAgICAgIHJvb3QsXG4gICAgICBsYW5lcyxcbiAgICAgIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSxcbiAgICAgIHNwYXduZWRMYW5lLFxuICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lc1xuICAgICk7XG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgICAoKHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwKSk7XG4gICAgcGVuZGluZ0ZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yaztcbiAgICBwZW5kaW5nRWZmZWN0c1Jvb3QgPSByb290O1xuICAgIHBlbmRpbmdFZmZlY3RzTGFuZXMgPSBsYW5lcztcbiAgICBwZW5kaW5nRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlO1xuICAgIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucztcbiAgICBwZW5kaW5nUmVjb3ZlcmFibGVFcnJvcnMgPSByZWNvdmVyYWJsZUVycm9ycztcbiAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KSB8fFxuICAgIDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMDI1NilcbiAgICAgID8gKChyb290LmNhbGxiYWNrTm9kZSA9IG51bGwpLFxuICAgICAgICAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMCksXG4gICAgICAgIHNjaGVkdWxlQ2FsbGJhY2skMShOb3JtYWxQcmlvcml0eSQxLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZmx1c2hQYXNzaXZlRWZmZWN0cyghMCk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pKVxuICAgICAgOiAoKHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbCksIChyb290LmNhbGxiYWNrUHJpb3JpdHkgPSAwKSk7XG4gICAgcmVjb3ZlcmFibGVFcnJvcnMgPSAwICE9PSAoZmluaXNoZWRXb3JrLmZsYWdzICYgMTM4NzgpO1xuICAgIGlmICgwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEzODc4KSB8fCByZWNvdmVyYWJsZUVycm9ycykge1xuICAgICAgcmVjb3ZlcmFibGVFcnJvcnMgPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICB0cmFuc2l0aW9ucyA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMjtcbiAgICAgIHNwYXduZWRMYW5lID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgICAgIGV4ZWN1dGlvbkNvbnRleHQgfD0gNDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmssIGxhbmVzKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIChleGVjdXRpb25Db250ZXh0ID0gc3Bhd25lZExhbmUpLFxuICAgICAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gdHJhbnNpdGlvbnMpLFxuICAgICAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcmVjb3ZlcmFibGVFcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDE7XG4gICAgZmx1c2hNdXRhdGlvbkVmZmVjdHMoKTtcbiAgICBmbHVzaExheW91dEVmZmVjdHMoKTtcbiAgICBmbHVzaFNwYXduZWRXb3JrKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoTXV0YXRpb25FZmZlY3RzKCkge1xuICBpZiAoMSA9PT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMpIHtcbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDA7XG4gICAgdmFyIHJvb3QgPSBwZW5kaW5nRWZmZWN0c1Jvb3QsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwZW5kaW5nRmluaXNoZWRXb3JrLFxuICAgICAgcm9vdE11dGF0aW9uSGFzRWZmZWN0ID0gMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEzODc4KTtcbiAgICBpZiAoMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMzg3OCkgfHwgcm9vdE11dGF0aW9uSGFzRWZmZWN0KSB7XG4gICAgICByb290TXV0YXRpb25IYXNFZmZlY3QgPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMjtcbiAgICAgIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgICB0cnkge1xuICAgICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCk7XG4gICAgICAgIHZhciBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID0gc2VsZWN0aW9uSW5mb3JtYXRpb24sXG4gICAgICAgICAgY3VyRm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50RGVlcChyb290LmNvbnRhaW5lckluZm8pLFxuICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY3VyRm9jdXNlZEVsZW0gIT09IHByaW9yRm9jdXNlZEVsZW0gJiZcbiAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtICYmXG4gICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbS5vd25lckRvY3VtZW50ICYmXG4gICAgICAgICAgY29udGFpbnNOb2RlKFxuICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW1cbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIG51bGwgIT09IHByaW9yU2VsZWN0aW9uUmFuZ2UgJiZcbiAgICAgICAgICAgIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgZW5kID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5lbmQ7XG4gICAgICAgICAgICB2b2lkIDAgPT09IGVuZCAmJiAoZW5kID0gc3RhcnQpO1xuICAgICAgICAgICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiBwcmlvckZvY3VzZWRFbGVtKVxuICAgICAgICAgICAgICAocHJpb3JGb2N1c2VkRWxlbS5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0KSxcbiAgICAgICAgICAgICAgICAocHJpb3JGb2N1c2VkRWxlbS5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0udmFsdWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGRvYyA9IHByaW9yRm9jdXNlZEVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCxcbiAgICAgICAgICAgICAgICB3aW4gPSAoZG9jICYmIGRvYy5kZWZhdWx0VmlldykgfHwgd2luZG93O1xuICAgICAgICAgICAgICBpZiAod2luLmdldFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW4uZ2V0U2VsZWN0aW9uKCksXG4gICAgICAgICAgICAgICAgICBsZW5ndGggPSBwcmlvckZvY3VzZWRFbGVtLnRleHRDb250ZW50Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgIHN0YXJ0JGpzY29tcCQwID0gTWF0aC5taW4ocHJpb3JTZWxlY3Rpb25SYW5nZS5zdGFydCwgbGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgIGVuZCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gcHJpb3JTZWxlY3Rpb25SYW5nZS5lbmRcbiAgICAgICAgICAgICAgICAgICAgICA/IHN0YXJ0JGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1pbihwcmlvclNlbGVjdGlvblJhbmdlLmVuZCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAhc2VsZWN0aW9uLmV4dGVuZCAmJlxuICAgICAgICAgICAgICAgICAgc3RhcnQkanNjb21wJDAgPiBlbmQkanNjb21wJDAgJiZcbiAgICAgICAgICAgICAgICAgICgoY3VyRm9jdXNlZEVsZW0gPSBlbmQkanNjb21wJDApLFxuICAgICAgICAgICAgICAgICAgKGVuZCRqc2NvbXAkMCA9IHN0YXJ0JGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgICAgIChzdGFydCRqc2NvbXAkMCA9IGN1ckZvY3VzZWRFbGVtKSk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQkanNjb21wJDBcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KFxuICAgICAgICAgICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtLFxuICAgICAgICAgICAgICAgICAgICBlbmQkanNjb21wJDBcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgc3RhcnRNYXJrZXIgJiZcbiAgICAgICAgICAgICAgICAgIGVuZE1hcmtlciAmJlxuICAgICAgICAgICAgICAgICAgKDEgIT09IHNlbGVjdGlvbi5yYW5nZUNvdW50IHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5hbmNob3JOb2RlICE9PSBzdGFydE1hcmtlci5ub2RlIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQgIT09IHN0YXJ0TWFya2VyLm9mZnNldCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZm9jdXNOb2RlICE9PSBlbmRNYXJrZXIubm9kZSB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZm9jdXNPZmZzZXQgIT09IGVuZE1hcmtlci5vZmZzZXQpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICBzdGFydCRqc2NvbXAkMCA+IGVuZCRqc2NvbXAkMFxuICAgICAgICAgICAgICAgICAgICA/IChzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpLFxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5leHRlbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpKVxuICAgICAgICAgICAgICAgICAgICA6IChyYW5nZS5zZXRFbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBkb2MgPSBbXTtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgc2VsZWN0aW9uID0gcHJpb3JGb2N1c2VkRWxlbTtcbiAgICAgICAgICAgIChzZWxlY3Rpb24gPSBzZWxlY3Rpb24ucGFyZW50Tm9kZSk7XG5cbiAgICAgICAgICApXG4gICAgICAgICAgICAxID09PSBzZWxlY3Rpb24ubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgZG9jLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzZWxlY3Rpb24uc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgICAgICB0b3A6IHNlbGVjdGlvbi5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJpb3JGb2N1c2VkRWxlbS5mb2N1cyAmJlxuICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbS5mb2N1cygpO1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtID0gMDtcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0gPCBkb2MubGVuZ3RoO1xuICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IGRvY1twcmlvckZvY3VzZWRFbGVtXTtcbiAgICAgICAgICAgIGluZm8uZWxlbWVudC5zY3JvbGxMZWZ0ID0gaW5mby5sZWZ0O1xuICAgICAgICAgICAgaW5mby5lbGVtZW50LnNjcm9sbFRvcCA9IGluZm8udG9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfZW5hYmxlZCA9ICEhZXZlbnRzRW5hYmxlZDtcbiAgICAgICAgc2VsZWN0aW9uSW5mb3JtYXRpb24gPSBldmVudHNFbmFibGVkID0gbnVsbDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIChleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQpLFxuICAgICAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSByb290TXV0YXRpb25IYXNFZmZlY3QpO1xuICAgICAgfVxuICAgIH1cbiAgICByb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAyO1xuICB9XG59XG5mdW5jdGlvbiBmbHVzaExheW91dEVmZmVjdHMoKSB7XG4gIGlmICgyID09PSBwZW5kaW5nRWZmZWN0c1N0YXR1cykge1xuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMDtcbiAgICB2YXIgcm9vdCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBlbmRpbmdGaW5pc2hlZFdvcmssXG4gICAgICByb290SGFzTGF5b3V0RWZmZWN0ID0gMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDg3NzIpO1xuICAgIGlmICgwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDg3NzIpIHx8IHJvb3RIYXNMYXlvdXRFZmZlY3QpIHtcbiAgICAgIHJvb3RIYXNMYXlvdXRFZmZlY3QgPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMjtcbiAgICAgIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgICB0cnkge1xuICAgICAgICBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKHJvb3QsIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0KSxcbiAgICAgICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcm9vdEhhc0xheW91dEVmZmVjdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMztcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hTcGF3bmVkV29yaygpIHtcbiAgaWYgKDQgPT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzIHx8IDMgPT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzKSB7XG4gICAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAwO1xuICAgIHJlcXVlc3RQYWludCgpO1xuICAgIHZhciByb290ID0gcGVuZGluZ0VmZmVjdHNSb290LFxuICAgICAgZmluaXNoZWRXb3JrID0gcGVuZGluZ0ZpbmlzaGVkV29yayxcbiAgICAgIGxhbmVzID0gcGVuZGluZ0VmZmVjdHNMYW5lcyxcbiAgICAgIHJlY292ZXJhYmxlRXJyb3JzID0gcGVuZGluZ1JlY292ZXJhYmxlRXJyb3JzO1xuICAgIDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTAyNTYpIHx8XG4gICAgMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEwMjU2KVxuICAgICAgPyAocGVuZGluZ0VmZmVjdHNTdGF0dXMgPSA1KVxuICAgICAgOiAoKHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMCksXG4gICAgICAgIChwZW5kaW5nRmluaXNoZWRXb3JrID0gcGVuZGluZ0VmZmVjdHNSb290ID0gbnVsbCksXG4gICAgICAgIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcm9vdC5wZW5kaW5nTGFuZXMpKTtcbiAgICB2YXIgcmVtYWluaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgICAwID09PSByZW1haW5pbmdMYW5lcyAmJiAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBudWxsKTtcbiAgICBsYW5lc1RvRXZlbnRQcmlvcml0eShsYW5lcyk7XG4gICAgZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyUm9vdClcbiAgICAgIHRyeSB7XG4gICAgICAgIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyUm9vdChcbiAgICAgICAgICByZW5kZXJlcklELFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgMTI4ID09PSAoZmluaXNoZWRXb3JrLmN1cnJlbnQuZmxhZ3MgJiAxMjgpXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgaWYgKG51bGwgIT09IHJlY292ZXJhYmxlRXJyb3JzKSB7XG4gICAgICBmaW5pc2hlZFdvcmsgPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICAgICAgcmVtYWluaW5nTGFuZXMgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIG9uUmVjb3ZlcmFibGVFcnJvciA9IHJvb3Qub25SZWNvdmVyYWJsZUVycm9yLCBpID0gMDtcbiAgICAgICAgICBpIDwgcmVjb3ZlcmFibGVFcnJvcnMubGVuZ3RoO1xuICAgICAgICAgIGkrK1xuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgcmVjb3ZlcmFibGVFcnJvciA9IHJlY292ZXJhYmxlRXJyb3JzW2ldO1xuICAgICAgICAgIG9uUmVjb3ZlcmFibGVFcnJvcihyZWNvdmVyYWJsZUVycm9yLnZhbHVlLCB7XG4gICAgICAgICAgICBjb21wb25lbnRTdGFjazogcmVjb3ZlcmFibGVFcnJvci5zdGFja1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IGZpbmlzaGVkV29yayksXG4gICAgICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSByZW1haW5pbmdMYW5lcyk7XG4gICAgICB9XG4gICAgfVxuICAgIDAgIT09IChwZW5kaW5nRWZmZWN0c0xhbmVzICYgMykgJiYgZmx1c2hQZW5kaW5nRWZmZWN0cygpO1xuICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbiAgICByZW1haW5pbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIDAgIT09IChsYW5lcyAmIDQxOTQwOTApICYmIDAgIT09IChyZW1haW5pbmdMYW5lcyAmIDQyKVxuICAgICAgPyByb290ID09PSByb290V2l0aE5lc3RlZFVwZGF0ZXNcbiAgICAgICAgPyBuZXN0ZWRVcGRhdGVDb3VudCsrXG4gICAgICAgIDogKChuZXN0ZWRVcGRhdGVDb3VudCA9IDApLCAocm9vdFdpdGhOZXN0ZWRVcGRhdGVzID0gcm9vdCkpXG4gICAgICA6IChuZXN0ZWRVcGRhdGVDb3VudCA9IDApO1xuICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcykge1xuICAwID09PSAocm9vdC5wb29sZWRDYWNoZUxhbmVzICY9IHJlbWFpbmluZ0xhbmVzKSAmJlxuICAgICgocmVtYWluaW5nTGFuZXMgPSByb290LnBvb2xlZENhY2hlKSxcbiAgICBudWxsICE9IHJlbWFpbmluZ0xhbmVzICYmXG4gICAgICAoKHJvb3QucG9vbGVkQ2FjaGUgPSBudWxsKSwgcmVsZWFzZUNhY2hlKHJlbWFpbmluZ0xhbmVzKSkpO1xufVxuZnVuY3Rpb24gZmx1c2hQZW5kaW5nRWZmZWN0cyh3YXNEZWxheWVkQ29tbWl0KSB7XG4gIGZsdXNoTXV0YXRpb25FZmZlY3RzKCk7XG4gIGZsdXNoTGF5b3V0RWZmZWN0cygpO1xuICBmbHVzaFNwYXduZWRXb3JrKCk7XG4gIHJldHVybiBmbHVzaFBhc3NpdmVFZmZlY3RzKHdhc0RlbGF5ZWRDb21taXQpO1xufVxuZnVuY3Rpb24gZmx1c2hQYXNzaXZlRWZmZWN0cygpIHtcbiAgaWYgKDUgIT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzKSByZXR1cm4gITE7XG4gIHZhciByb290ID0gcGVuZGluZ0VmZmVjdHNSb290LFxuICAgIHJlbWFpbmluZ0xhbmVzID0gcGVuZGluZ0VmZmVjdHNSZW1haW5pbmdMYW5lcztcbiAgcGVuZGluZ0VmZmVjdHNSZW1haW5pbmdMYW5lcyA9IDA7XG4gIHZhciByZW5kZXJQcmlvcml0eSA9IGxhbmVzVG9FdmVudFByaW9yaXR5KHBlbmRpbmdFZmZlY3RzTGFuZXMpLFxuICAgIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMzIgPiByZW5kZXJQcmlvcml0eSA/IDMyIDogcmVuZGVyUHJpb3JpdHk7XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgcmVuZGVyUHJpb3JpdHkgPSBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zO1xuICAgIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsO1xuICAgIHZhciByb290JGpzY29tcCQwID0gcGVuZGluZ0VmZmVjdHNSb290LFxuICAgICAgbGFuZXMgPSBwZW5kaW5nRWZmZWN0c0xhbmVzO1xuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMDtcbiAgICBwZW5kaW5nRmluaXNoZWRXb3JrID0gcGVuZGluZ0VmZmVjdHNSb290ID0gbnVsbDtcbiAgICBwZW5kaW5nRWZmZWN0c0xhbmVzID0gMDtcbiAgICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMzEpKTtcbiAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgIGV4ZWN1dGlvbkNvbnRleHQgfD0gNDtcbiAgICBjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIocm9vdCRqc2NvbXAkMC5jdXJyZW50KTtcbiAgICBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKFxuICAgICAgcm9vdCRqc2NvbXAkMCxcbiAgICAgIHJvb3QkanNjb21wJDAuY3VycmVudCxcbiAgICAgIGxhbmVzLFxuICAgICAgcmVuZGVyUHJpb3JpdHlcbiAgICApO1xuICAgIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcbiAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gICAgaWYgKFxuICAgICAgaW5qZWN0ZWRIb29rICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Qb3N0Q29tbWl0RmliZXJSb290XG4gICAgKVxuICAgICAgdHJ5IHtcbiAgICAgICAgaW5qZWN0ZWRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290JGpzY29tcCQwKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICByZXR1cm4gITA7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb24pLFxuICAgICAgcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KHJvb3RGaWJlciwgc291cmNlRmliZXIsIGVycm9yKSB7XG4gIHNvdXJjZUZpYmVyID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgc291cmNlRmliZXIgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUocm9vdEZpYmVyLnN0YXRlTm9kZSwgc291cmNlRmliZXIsIDIpO1xuICByb290RmliZXIgPSBlbnF1ZXVlVXBkYXRlKHJvb3RGaWJlciwgc291cmNlRmliZXIsIDIpO1xuICBudWxsICE9PSByb290RmliZXIgJiZcbiAgICAobWFya1Jvb3RVcGRhdGVkJDEocm9vdEZpYmVyLCAyKSwgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3RGaWJlcikpO1xufVxuZnVuY3Rpb24gY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3Ioc291cmNlRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKSB7XG4gIGlmICgzID09PSBzb3VyY2VGaWJlci50YWcpXG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3Qoc291cmNlRmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcik7XG4gIGVsc2VcbiAgICBmb3IgKDsgbnVsbCAhPT0gbmVhcmVzdE1vdW50ZWRBbmNlc3RvcjsgKSB7XG4gICAgICBpZiAoMyA9PT0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci50YWcpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3QoXG4gICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICBzb3VyY2VGaWJlcixcbiAgICAgICAgICBlcnJvclxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoMSA9PT0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci50YWcpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09XG4gICAgICAgICAgICB0eXBlb2YgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciB8fFxuICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICAgICAgICAgKG51bGwgPT09IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIHx8XG4gICAgICAgICAgICAgICFsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5oYXMoaW5zdGFuY2UpKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgc291cmNlRmliZXIgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihlcnJvciwgc291cmNlRmliZXIpO1xuICAgICAgICAgIGVycm9yID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSgyKTtcbiAgICAgICAgICBpbnN0YW5jZSA9IGVucXVldWVVcGRhdGUobmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IsIDIpO1xuICAgICAgICAgIG51bGwgIT09IGluc3RhbmNlICYmXG4gICAgICAgICAgICAoaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUoXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgc291cmNlRmliZXJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBtYXJrUm9vdFVwZGF0ZWQkMShpbnN0YW5jZSwgMiksXG4gICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoaW5zdGFuY2UpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IucmV0dXJuO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB3YWtlYWJsZSwgbGFuZXMpIHtcbiAgdmFyIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlO1xuICBpZiAobnVsbCA9PT0gcGluZ0NhY2hlKSB7XG4gICAgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG4gICAgdmFyIHRocmVhZElEcyA9IG5ldyBTZXQoKTtcbiAgICBwaW5nQ2FjaGUuc2V0KHdha2VhYmxlLCB0aHJlYWRJRHMpO1xuICB9IGVsc2VcbiAgICAodGhyZWFkSURzID0gcGluZ0NhY2hlLmdldCh3YWtlYWJsZSkpLFxuICAgICAgdm9pZCAwID09PSB0aHJlYWRJRHMgJiZcbiAgICAgICAgKCh0aHJlYWRJRHMgPSBuZXcgU2V0KCkpLCBwaW5nQ2FjaGUuc2V0KHdha2VhYmxlLCB0aHJlYWRJRHMpKTtcbiAgdGhyZWFkSURzLmhhcyhsYW5lcykgfHxcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICEwKSxcbiAgICB0aHJlYWRJRHMuYWRkKGxhbmVzKSxcbiAgICAocm9vdCA9IHBpbmdTdXNwZW5kZWRSb290LmJpbmQobnVsbCwgcm9vdCwgd2FrZWFibGUsIGxhbmVzKSksXG4gICAgd2FrZWFibGUudGhlbihyb290LCByb290KSk7XG59XG5mdW5jdGlvbiBwaW5nU3VzcGVuZGVkUm9vdChyb290LCB3YWtlYWJsZSwgcGluZ2VkTGFuZXMpIHtcbiAgdmFyIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlO1xuICBudWxsICE9PSBwaW5nQ2FjaGUgJiYgcGluZ0NhY2hlLmRlbGV0ZSh3YWtlYWJsZSk7XG4gIHJvb3QucGluZ2VkTGFuZXMgfD0gcm9vdC5zdXNwZW5kZWRMYW5lcyAmIHBpbmdlZExhbmVzO1xuICByb290Lndhcm1MYW5lcyAmPSB+cGluZ2VkTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzUm9vdCA9PT0gcm9vdCAmJlxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHBpbmdlZExhbmVzKSA9PT0gcGluZ2VkTGFuZXMgJiZcbiAgICAoNCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyB8fFxuICAgICgzID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MjkxNDU2MCkgPT09XG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYmXG4gICAgICAzMDAgPiBub3coKSAtIGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUpXG4gICAgICA/IDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiYgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgMClcbiAgICAgIDogKHdvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzIHw9IHBpbmdlZExhbmVzKSxcbiAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID0gMCkpO1xuICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG59XG5mdW5jdGlvbiByZXRyeVRpbWVkT3V0Qm91bmRhcnkoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKSB7XG4gIDAgPT09IHJldHJ5TGFuZSAmJiAocmV0cnlMYW5lID0gY2xhaW1OZXh0UmV0cnlMYW5lKCkpO1xuICBib3VuZGFyeUZpYmVyID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG4gIG51bGwgIT09IGJvdW5kYXJ5RmliZXIgJiZcbiAgICAobWFya1Jvb3RVcGRhdGVkJDEoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKSxcbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoYm91bmRhcnlGaWJlcikpO1xufVxuZnVuY3Rpb24gcmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeShib3VuZGFyeUZpYmVyKSB7XG4gIHZhciBzdXNwZW5zZVN0YXRlID0gYm91bmRhcnlGaWJlci5tZW1vaXplZFN0YXRlLFxuICAgIHJldHJ5TGFuZSA9IDA7XG4gIG51bGwgIT09IHN1c3BlbnNlU3RhdGUgJiYgKHJldHJ5TGFuZSA9IHN1c3BlbnNlU3RhdGUucmV0cnlMYW5lKTtcbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiByZXNvbHZlUmV0cnlXYWtlYWJsZShib3VuZGFyeUZpYmVyLCB3YWtlYWJsZSkge1xuICB2YXIgcmV0cnlMYW5lID0gMDtcbiAgc3dpdGNoIChib3VuZGFyeUZpYmVyLnRhZykge1xuICAgIGNhc2UgMTM6XG4gICAgICB2YXIgcmV0cnlDYWNoZSA9IGJvdW5kYXJ5RmliZXIuc3RhdGVOb2RlO1xuICAgICAgdmFyIHN1c3BlbnNlU3RhdGUgPSBib3VuZGFyeUZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSBzdXNwZW5zZVN0YXRlICYmIChyZXRyeUxhbmUgPSBzdXNwZW5zZVN0YXRlLnJldHJ5TGFuZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0cnlDYWNoZSA9IGJvdW5kYXJ5RmliZXIuc3RhdGVOb2RlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZS5fcmV0cnlDYWNoZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNCkpO1xuICB9XG4gIG51bGwgIT09IHJldHJ5Q2FjaGUgJiYgcmV0cnlDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICByZXRyeVRpbWVkT3V0Qm91bmRhcnkoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2skMShwcmlvcml0eUxldmVsLCBjYWxsYmFjaykge1xuICByZXR1cm4gc2NoZWR1bGVDYWxsYmFjayQzKHByaW9yaXR5TGV2ZWwsIGNhbGxiYWNrKTtcbn1cbnZhciBmaXJzdFNjaGVkdWxlZFJvb3QgPSBudWxsLFxuICBsYXN0U2NoZWR1bGVkUm9vdCA9IG51bGwsXG4gIGRpZFNjaGVkdWxlTWljcm90YXNrID0gITEsXG4gIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9ICExLFxuICBpc0ZsdXNoaW5nV29yayA9ICExLFxuICBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IDA7XG5mdW5jdGlvbiBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCkge1xuICByb290ICE9PSBsYXN0U2NoZWR1bGVkUm9vdCAmJlxuICAgIG51bGwgPT09IHJvb3QubmV4dCAmJlxuICAgIChudWxsID09PSBsYXN0U2NoZWR1bGVkUm9vdFxuICAgICAgPyAoZmlyc3RTY2hlZHVsZWRSb290ID0gbGFzdFNjaGVkdWxlZFJvb3QgPSByb290KVxuICAgICAgOiAobGFzdFNjaGVkdWxlZFJvb3QgPSBsYXN0U2NoZWR1bGVkUm9vdC5uZXh0ID0gcm9vdCkpO1xuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMDtcbiAgZGlkU2NoZWR1bGVNaWNyb3Rhc2sgfHxcbiAgICAoKGRpZFNjaGVkdWxlTWljcm90YXNrID0gITApLCBzY2hlZHVsZUltbWVkaWF0ZVJvb3RTY2hlZHVsZVRhc2soKSk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbChzeW5jVHJhbnNpdGlvbkxhbmVzLCBvbmx5TGVnYWN5KSB7XG4gIGlmICghaXNGbHVzaGluZ1dvcmsgJiYgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrKSB7XG4gICAgaXNGbHVzaGluZ1dvcmsgPSAhMDtcbiAgICBkbyB7XG4gICAgICB2YXIgZGlkUGVyZm9ybVNvbWVXb3JrID0gITE7XG4gICAgICBmb3IgKHZhciByb290JDE3NCA9IGZpcnN0U2NoZWR1bGVkUm9vdDsgbnVsbCAhPT0gcm9vdCQxNzQ7ICkge1xuICAgICAgICBpZiAoIW9ubHlMZWdhY3kpXG4gICAgICAgICAgaWYgKDAgIT09IHN5bmNUcmFuc2l0aW9uTGFuZXMpIHtcbiAgICAgICAgICAgIHZhciBwZW5kaW5nTGFuZXMgPSByb290JDE3NC5wZW5kaW5nTGFuZXM7XG4gICAgICAgICAgICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc3VzcGVuZGVkTGFuZXMgPSByb290JDE3NC5zdXNwZW5kZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBwaW5nZWRMYW5lcyA9IHJvb3QkMTc0LnBpbmdlZExhbmVzO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgICAgICgxIDw8ICgzMSAtIGNsejMyKDQyIHwgc3luY1RyYW5zaXRpb25MYW5lcykgKyAxKSkgLSAxO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJj1cbiAgICAgICAgICAgICAgICBwZW5kaW5nTGFuZXMgJiB+KHN1c3BlbmRlZExhbmVzICYgfnBpbmdlZExhbmVzKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY3NDFcbiAgICAgICAgICAgICAgICAgID8gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDIwMTMyNjc0MSkgfCAxXG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB8IDJcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzQsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdldE5leHRMYW5lcyhcbiAgICAgICAgICAgICAgICByb290JDE3NCxcbiAgICAgICAgICAgICAgICByb290JDE3NCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IDogMCxcbiAgICAgICAgICAgICAgICBudWxsICE9PSByb290JDE3NC5jYW5jZWxQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgICAgICAgICAtMSAhPT0gcm9vdCQxNzQudGltZW91dEhhbmRsZVxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgMCA9PT0gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDMpIHx8XG4gICAgICAgICAgICAgICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290JDE3NCwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB8fFxuICAgICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICAgIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290JDE3NCwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSk7XG4gICAgICAgIHJvb3QkMTc0ID0gcm9vdCQxNzQubmV4dDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChkaWRQZXJmb3JtU29tZVdvcmspO1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb290U2NoZWR1bGVJbkltbWVkaWF0ZVRhc2soKSB7XG4gIHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaygpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrKCkge1xuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSBkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICExO1xuICB2YXIgc3luY1RyYW5zaXRpb25MYW5lcyA9IDA7XG4gIDAgIT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lICYmXG4gICAgKHNob3VsZEF0dGVtcHRFYWdlclRyYW5zaXRpb24oKSAmJlxuICAgICAgKHN5bmNUcmFuc2l0aW9uTGFuZXMgPSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSksXG4gICAgKGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID0gMCkpO1xuICBmb3IgKFxuICAgIHZhciBjdXJyZW50VGltZSA9IG5vdygpLCBwcmV2ID0gbnVsbCwgcm9vdCA9IGZpcnN0U2NoZWR1bGVkUm9vdDtcbiAgICBudWxsICE9PSByb290O1xuXG4gICkge1xuICAgIHZhciBuZXh0ID0gcm9vdC5uZXh0LFxuICAgICAgbmV4dExhbmVzID0gc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBjdXJyZW50VGltZSk7XG4gICAgaWYgKDAgPT09IG5leHRMYW5lcylcbiAgICAgIChyb290Lm5leHQgPSBudWxsKSxcbiAgICAgICAgbnVsbCA9PT0gcHJldiA/IChmaXJzdFNjaGVkdWxlZFJvb3QgPSBuZXh0KSA6IChwcmV2Lm5leHQgPSBuZXh0KSxcbiAgICAgICAgbnVsbCA9PT0gbmV4dCAmJiAobGFzdFNjaGVkdWxlZFJvb3QgPSBwcmV2KTtcbiAgICBlbHNlIGlmIChcbiAgICAgICgocHJldiA9IHJvb3QpLCAwICE9PSBzeW5jVHJhbnNpdGlvbkxhbmVzIHx8IDAgIT09IChuZXh0TGFuZXMgJiAzKSlcbiAgICApXG4gICAgICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMDtcbiAgICByb290ID0gbmV4dDtcbiAgfVxuICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbChzeW5jVHJhbnNpdGlvbkxhbmVzLCAhMSk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIGN1cnJlbnRUaW1lKSB7XG4gIGZvciAoXG4gICAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcyxcbiAgICAgIHBpbmdlZExhbmVzID0gcm9vdC5waW5nZWRMYW5lcyxcbiAgICAgIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzLFxuICAgICAgbGFuZXMgPSByb290LnBlbmRpbmdMYW5lcyAmIC02MjkxNDU2MTtcbiAgICAwIDwgbGFuZXM7XG5cbiAgKSB7XG4gICAgdmFyIGluZGV4JDMgPSAzMSAtIGNsejMyKGxhbmVzKSxcbiAgICAgIGxhbmUgPSAxIDw8IGluZGV4JDMsXG4gICAgICBleHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lc1tpbmRleCQzXTtcbiAgICBpZiAoLTEgPT09IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICBpZiAoMCA9PT0gKGxhbmUgJiBzdXNwZW5kZWRMYW5lcykgfHwgMCAhPT0gKGxhbmUgJiBwaW5nZWRMYW5lcykpXG4gICAgICAgIGV4cGlyYXRpb25UaW1lc1tpbmRleCQzXSA9IGNvbXB1dGVFeHBpcmF0aW9uVGltZShsYW5lLCBjdXJyZW50VGltZSk7XG4gICAgfSBlbHNlIGV4cGlyYXRpb25UaW1lIDw9IGN1cnJlbnRUaW1lICYmIChyb290LmV4cGlyZWRMYW5lcyB8PSBsYW5lKTtcbiAgICBsYW5lcyAmPSB+bGFuZTtcbiAgfVxuICBjdXJyZW50VGltZSA9IHdvcmtJblByb2dyZXNzUm9vdDtcbiAgc3VzcGVuZGVkTGFuZXMgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgc3VzcGVuZGVkTGFuZXMgPSBnZXROZXh0TGFuZXMoXG4gICAgcm9vdCxcbiAgICByb290ID09PSBjdXJyZW50VGltZSA/IHN1c3BlbmRlZExhbmVzIDogMCxcbiAgICBudWxsICE9PSByb290LmNhbmNlbFBlbmRpbmdDb21taXQgfHwgLTEgIT09IHJvb3QudGltZW91dEhhbmRsZVxuICApO1xuICBwaW5nZWRMYW5lcyA9IHJvb3QuY2FsbGJhY2tOb2RlO1xuICBpZiAoXG4gICAgMCA9PT0gc3VzcGVuZGVkTGFuZXMgfHxcbiAgICAocm9vdCA9PT0gY3VycmVudFRpbWUgJiZcbiAgICAgICgyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiB8fFxuICAgICAgICA5ID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikpIHx8XG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0XG4gIClcbiAgICByZXR1cm4gKFxuICAgICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiZcbiAgICAgICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiZcbiAgICAgICAgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyksXG4gICAgICAocm9vdC5jYWxsYmFja05vZGUgPSBudWxsKSxcbiAgICAgIChyb290LmNhbGxiYWNrUHJpb3JpdHkgPSAwKVxuICAgICk7XG4gIGlmIChcbiAgICAwID09PSAoc3VzcGVuZGVkTGFuZXMgJiAzKSB8fFxuICAgIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgc3VzcGVuZGVkTGFuZXMpXG4gICkge1xuICAgIGN1cnJlbnRUaW1lID0gc3VzcGVuZGVkTGFuZXMgJiAtc3VzcGVuZGVkTGFuZXM7XG4gICAgaWYgKGN1cnJlbnRUaW1lID09PSByb290LmNhbGxiYWNrUHJpb3JpdHkpIHJldHVybiBjdXJyZW50VGltZTtcbiAgICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJiBjYW5jZWxDYWxsYmFjayQxKHBpbmdlZExhbmVzKTtcbiAgICBzd2l0Y2ggKGxhbmVzVG9FdmVudFByaW9yaXR5KHN1c3BlbmRlZExhbmVzKSkge1xuICAgICAgY2FzZSAyOlxuICAgICAgY2FzZSA4OlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IFVzZXJCbG9ja2luZ1ByaW9yaXR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gTm9ybWFsUHJpb3JpdHkkMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBJZGxlUHJpb3JpdHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBOb3JtYWxQcmlvcml0eSQxO1xuICAgIH1cbiAgICBwaW5nZWRMYW5lcyA9IHBlcmZvcm1Xb3JrT25Sb290VmlhU2NoZWR1bGVyVGFzay5iaW5kKG51bGwsIHJvb3QpO1xuICAgIHN1c3BlbmRlZExhbmVzID0gc2NoZWR1bGVDYWxsYmFjayQzKHN1c3BlbmRlZExhbmVzLCBwaW5nZWRMYW5lcyk7XG4gICAgcm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gY3VycmVudFRpbWU7XG4gICAgcm9vdC5jYWxsYmFja05vZGUgPSBzdXNwZW5kZWRMYW5lcztcbiAgICByZXR1cm4gY3VycmVudFRpbWU7XG4gIH1cbiAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyk7XG4gIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDI7XG4gIHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbDtcbiAgcmV0dXJuIDI7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2socm9vdCwgZGlkVGltZW91dCkge1xuICBpZiAoMCAhPT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMgJiYgNSAhPT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMpXG4gICAgcmV0dXJuIChyb290LmNhbGxiYWNrTm9kZSA9IG51bGwpLCAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMCksIG51bGw7XG4gIHZhciBvcmlnaW5hbENhbGxiYWNrTm9kZSA9IHJvb3QuY2FsbGJhY2tOb2RlO1xuICBpZiAoZmx1c2hQZW5kaW5nRWZmZWN0cyghMCkgJiYgcm9vdC5jYWxsYmFja05vZGUgIT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlKVxuICAgIHJldHVybiBudWxsO1xuICB2YXIgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSBnZXROZXh0TGFuZXMoXG4gICAgcm9vdCxcbiAgICByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPyB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCA6IDAsXG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0IHx8IC0xICE9PSByb290LnRpbWVvdXRIYW5kbGVcbiAgKTtcbiAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAsIGRpZFRpbWVvdXQpO1xuICBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIG5vdygpKTtcbiAgcmV0dXJuIG51bGwgIT0gcm9vdC5jYWxsYmFja05vZGUgJiYgcm9vdC5jYWxsYmFja05vZGUgPT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlXG4gICAgPyBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290LCBsYW5lcykge1xuICBpZiAoZmx1c2hQZW5kaW5nRWZmZWN0cygpKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgbGFuZXMsICEwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlSW1tZWRpYXRlUm9vdFNjaGVkdWxlVGFzaygpIHtcbiAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNilcbiAgICAgID8gc2NoZWR1bGVDYWxsYmFjayQzKFxuICAgICAgICAgIEltbWVkaWF0ZVByaW9yaXR5LFxuICAgICAgICAgIHByb2Nlc3NSb290U2NoZWR1bGVJbkltbWVkaWF0ZVRhc2tcbiAgICAgICAgKVxuICAgICAgOiBwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2soKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIDAgPT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lICYmXG4gICAgKGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID0gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSk7XG4gIHJldHVybiBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZTtcbn1cbmZ1bmN0aW9uIGNvZXJjZUZvcm1BY3Rpb25Qcm9wKGFjdGlvblByb3ApIHtcbiAgcmV0dXJuIG51bGwgPT0gYWN0aW9uUHJvcCB8fFxuICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wIHx8XG4gICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wXG4gICAgPyBudWxsXG4gICAgOiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wXG4gICAgICA/IGFjdGlvblByb3BcbiAgICAgIDogc2FuaXRpemVVUkwoXCJcIiArIGFjdGlvblByb3ApO1xufVxuZnVuY3Rpb24gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKGZvcm0sIHN1Ym1pdHRlcikge1xuICB2YXIgdGVtcCA9IHN1Ym1pdHRlci5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgdGVtcC5uYW1lID0gc3VibWl0dGVyLm5hbWU7XG4gIHRlbXAudmFsdWUgPSBzdWJtaXR0ZXIudmFsdWU7XG4gIGZvcm0uaWQgJiYgdGVtcC5zZXRBdHRyaWJ1dGUoXCJmb3JtXCIsIGZvcm0uaWQpO1xuICBzdWJtaXR0ZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGVtcCwgc3VibWl0dGVyKTtcbiAgZm9ybSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcbiAgdGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRlbXApO1xuICByZXR1cm4gZm9ybTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudHMkMShcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZG9tRXZlbnROYW1lLFxuICBtYXliZVRhcmdldEluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICBuYXRpdmVFdmVudFRhcmdldFxuKSB7XG4gIGlmIChcbiAgICBcInN1Ym1pdFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICBtYXliZVRhcmdldEluc3QgJiZcbiAgICBtYXliZVRhcmdldEluc3Quc3RhdGVOb2RlID09PSBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB2YXIgYWN0aW9uID0gY29lcmNlRm9ybUFjdGlvblByb3AoXG4gICAgICAgIChuYXRpdmVFdmVudFRhcmdldFtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKS5hY3Rpb25cbiAgICAgICksXG4gICAgICBzdWJtaXR0ZXIgPSBuYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgc3VibWl0dGVyICYmXG4gICAgICAoKGRvbUV2ZW50TmFtZSA9IChkb21FdmVudE5hbWUgPSBzdWJtaXR0ZXJbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbClcbiAgICAgICAgPyBjb2VyY2VGb3JtQWN0aW9uUHJvcChkb21FdmVudE5hbWUuZm9ybUFjdGlvbilcbiAgICAgICAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybUFjdGlvblwiKSksXG4gICAgICBudWxsICE9PSBkb21FdmVudE5hbWUgJiYgKChhY3Rpb24gPSBkb21FdmVudE5hbWUpLCAoc3VibWl0dGVyID0gbnVsbCkpKTtcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIG51bGwsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgKTtcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICBsaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKDAgIT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gc3VibWl0dGVyXG4gICAgICAgICAgICAgICAgICA/IGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihuYXRpdmVFdmVudFRhcmdldCwgc3VibWl0dGVyKVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRm9ybURhdGEobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgICAgICBtYXliZVRhcmdldEluc3QsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBuYXRpdmVFdmVudFRhcmdldC5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvbiAmJlxuICAgICAgICAgICAgICAgIChldmVudC5wcmV2ZW50RGVmYXVsdCgpLFxuICAgICAgICAgICAgICAgIChmb3JtRGF0YSA9IHN1Ym1pdHRlclxuICAgICAgICAgICAgICAgICAgPyBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIobmF0aXZlRXZlbnRUYXJnZXQsIHN1Ym1pdHRlcilcbiAgICAgICAgICAgICAgICAgIDogbmV3IEZvcm1EYXRhKG5hdGl2ZUV2ZW50VGFyZ2V0KSksXG4gICAgICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgICAgIG1heWJlVGFyZ2V0SW5zdCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VycmVudFRhcmdldDogbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG59XG5mb3IgKFxuICB2YXIgaSRqc2NvbXAkaW5saW5lXzE1MjggPSAwO1xuICBpJGpzY29tcCRpbmxpbmVfMTUyOCA8IHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzLmxlbmd0aDtcbiAgaSRqc2NvbXAkaW5saW5lXzE1MjgrK1xuKSB7XG4gIHZhciBldmVudE5hbWUkanNjb21wJGlubGluZV8xNTI5ID1cbiAgICAgIHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzW2kkanNjb21wJGlubGluZV8xNTI4XSxcbiAgICBkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNTMwID1cbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE1MjkudG9Mb3dlckNhc2UoKSxcbiAgICBjYXBpdGFsaXplZEV2ZW50JGpzY29tcCRpbmxpbmVfMTUzMSA9XG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNTI5WzBdLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUyOS5zbGljZSgxKTtcbiAgcmVnaXN0ZXJTaW1wbGVFdmVudChcbiAgICBkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNTMwLFxuICAgIFwib25cIiArIGNhcGl0YWxpemVkRXZlbnQkanNjb21wJGlubGluZV8xNTMxXG4gICk7XG59XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9FTkQsIFwib25BbmltYXRpb25FbmRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9JVEVSQVRJT04sIFwib25BbmltYXRpb25JdGVyYXRpb25cIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9TVEFSVCwgXCJvbkFuaW1hdGlvblN0YXJ0XCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImRibGNsaWNrXCIsIFwib25Eb3VibGVDbGlja1wiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJmb2N1c2luXCIsIFwib25Gb2N1c1wiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJmb2N1c291dFwiLCBcIm9uQmx1clwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9SVU4sIFwib25UcmFuc2l0aW9uUnVuXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX1NUQVJULCBcIm9uVHJhbnNpdGlvblN0YXJ0XCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX0NBTkNFTCwgXCJvblRyYW5zaXRpb25DYW5jZWxcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fRU5ELCBcIm9uVHJhbnNpdGlvbkVuZFwiKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvbk1vdXNlRW50ZXJcIiwgW1wibW91c2VvdXRcIiwgXCJtb3VzZW92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uTW91c2VMZWF2ZVwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Qb2ludGVyRW50ZXJcIiwgW1wicG9pbnRlcm91dFwiLCBcInBvaW50ZXJvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvblBvaW50ZXJMZWF2ZVwiLCBbXCJwb2ludGVyb3V0XCIsIFwicG9pbnRlcm92ZXJcIl0pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ2hhbmdlXCIsXG4gIFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25TZWxlY3RcIixcbiAgXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcbiAgICBcIiBcIlxuICApXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFwib25CZWZvcmVJbnB1dFwiLCBbXG4gIFwiY29tcG9zaXRpb25lbmRcIixcbiAgXCJrZXlwcmVzc1wiLFxuICBcInRleHRJbnB1dFwiLFxuICBcInBhc3RlXCJcbl0pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25FbmRcIixcbiAgXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbiAgXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcbiAgXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnZhciBtZWRpYUV2ZW50VHlwZXMgPVxuICAgIFwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKSxcbiAgbm9uRGVsZWdhdGVkRXZlbnRzID0gbmV3IFNldChcbiAgICBcImJlZm9yZXRvZ2dsZSBjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCBzY3JvbGxlbmQgdG9nZ2xlXCJcbiAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgIC5jb25jYXQobWVkaWFFdmVudFR5cGVzKVxuICApO1xuZnVuY3Rpb24gcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncykge1xuICBldmVudFN5c3RlbUZsYWdzID0gMCAhPT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiA0KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9kaXNwYXRjaFF1ZXVlJGkgPSBkaXNwYXRjaFF1ZXVlW2ldLFxuICAgICAgZXZlbnQgPSBfZGlzcGF0Y2hRdWV1ZSRpLmV2ZW50O1xuICAgIF9kaXNwYXRjaFF1ZXVlJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpLmxpc3RlbmVycztcbiAgICBhOiB7XG4gICAgICB2YXIgcHJldmlvdXNJbnN0YW5jZSA9IHZvaWQgMDtcbiAgICAgIGlmIChldmVudFN5c3RlbUZsYWdzKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBpJGpzY29tcCQwID0gX2Rpc3BhdGNoUXVldWUkaS5sZW5ndGggLSAxO1xuICAgICAgICAgIDAgPD0gaSRqc2NvbXAkMDtcbiAgICAgICAgICBpJGpzY29tcCQwLS1cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoUXVldWUkaVtpJGpzY29tcCQwXSxcbiAgICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2UsXG4gICAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuY3VycmVudFRhcmdldDtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmxpc3RlbmVyO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gcHJldmlvdXNJbnN0YW5jZSAmJiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UoZXZlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGkkanNjb21wJDAgPSAwO1xuICAgICAgICAgIGkkanNjb21wJDAgPCBfZGlzcGF0Y2hRdWV1ZSRpLmxlbmd0aDtcbiAgICAgICAgICBpJGpzY29tcCQwKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpW2kkanNjb21wJDBdO1xuICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2U7XG4gICAgICAgICAgY3VycmVudFRhcmdldCA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5saXN0ZW5lcjtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UgIT09IHByZXZpb3VzSW5zdGFuY2UgJiYgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpO1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmV2aW91c0luc3RhbmNlKGV2ZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRFbGVtZW50KSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0YXJnZXRFbGVtZW50W2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV07XG4gIHZvaWQgMCA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHRhcmdldEVsZW1lbnRbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XSA9XG4gICAgICBuZXcgU2V0KCkpO1xuICB2YXIgbGlzdGVuZXJTZXRLZXkgPSBkb21FdmVudE5hbWUgKyBcIl9fYnViYmxlXCI7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5oYXMobGlzdGVuZXJTZXRLZXkpIHx8XG4gICAgKGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKHRhcmdldEVsZW1lbnQsIGRvbUV2ZW50TmFtZSwgMiwgITEpLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5hZGQobGlzdGVuZXJTZXRLZXkpKTtcbn1cbmZ1bmN0aW9uIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyLCB0YXJnZXQpIHtcbiAgdmFyIGV2ZW50U3lzdGVtRmxhZ3MgPSAwO1xuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyICYmIChldmVudFN5c3RlbUZsYWdzIHw9IDQpO1xuICBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcihcbiAgICB0YXJnZXQsXG4gICAgZG9tRXZlbnROYW1lLFxuICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuICApO1xufVxudmFyIGxpc3RlbmluZ01hcmtlciA9IFwiX3JlYWN0TGlzdGVuaW5nXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbmZ1bmN0aW9uIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIGlmICghcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSkge1xuICAgIHJvb3RDb250YWluZXJFbGVtZW50W2xpc3RlbmluZ01hcmtlcl0gPSAhMDtcbiAgICBhbGxOYXRpdmVFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG9tRXZlbnROYW1lKSB7XG4gICAgICBcInNlbGVjdGlvbmNoYW5nZVwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgKG5vbkRlbGVnYXRlZEV2ZW50cy5oYXMoZG9tRXZlbnROYW1lKSB8fFxuICAgICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCAhMSwgcm9vdENvbnRhaW5lckVsZW1lbnQpLFxuICAgICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgITAsIHJvb3RDb250YWluZXJFbGVtZW50KSk7XG4gICAgfSk7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPVxuICAgICAgOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICAgICAgPyByb290Q29udGFpbmVyRWxlbWVudFxuICAgICAgICA6IHJvb3RDb250YWluZXJFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudCB8fFxuICAgICAgb3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdIHx8XG4gICAgICAoKG93bmVyRG9jdW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9ICEwKSxcbiAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgITEsIG93bmVyRG9jdW1lbnQpKTtcbiAgfVxufVxuZnVuY3Rpb24gYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIoXG4gIHRhcmdldENvbnRhaW5lcixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4pIHtcbiAgc3dpdGNoIChnZXRFdmVudFByaW9yaXR5KGRvbUV2ZW50TmFtZSkpIHtcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hEaXNjcmV0ZUV2ZW50O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hFdmVudDtcbiAgfVxuICBldmVudFN5c3RlbUZsYWdzID0gbGlzdGVuZXJXcmFwcGVyLmJpbmQoXG4gICAgbnVsbCxcbiAgICBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICB0YXJnZXRDb250YWluZXJcbiAgKTtcbiAgbGlzdGVuZXJXcmFwcGVyID0gdm9pZCAwO1xuICAhcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgfHxcbiAgICAoXCJ0b3VjaHN0YXJ0XCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgXCJ0b3VjaG1vdmVcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICBcIndoZWVsXCIgIT09IGRvbUV2ZW50TmFtZSkgfHxcbiAgICAobGlzdGVuZXJXcmFwcGVyID0gITApO1xuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4gICAgPyB2b2lkIDAgIT09IGxpc3RlbmVyV3JhcHBlclxuICAgICAgPyB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHtcbiAgICAgICAgICBjYXB0dXJlOiAhMCxcbiAgICAgICAgICBwYXNzaXZlOiBsaXN0ZW5lcldyYXBwZXJcbiAgICAgICAgfSlcbiAgICAgIDogdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCAhMClcbiAgICA6IHZvaWQgMCAhPT0gbGlzdGVuZXJXcmFwcGVyXG4gICAgICA/IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywge1xuICAgICAgICAgIHBhc3NpdmU6IGxpc3RlbmVyV3JhcHBlclxuICAgICAgICB9KVxuICAgICAgOiB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsICExKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0SW5zdCRqc2NvbXAkMCxcbiAgdGFyZ2V0Q29udGFpbmVyXG4pIHtcbiAgdmFyIGFuY2VzdG9ySW5zdCA9IHRhcmdldEluc3QkanNjb21wJDA7XG4gIGlmIChcbiAgICAwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDEpICYmXG4gICAgMCA9PT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiAyKSAmJlxuICAgIG51bGwgIT09IHRhcmdldEluc3QkanNjb21wJDBcbiAgKVxuICAgIGE6IGZvciAoOzspIHtcbiAgICAgIGlmIChudWxsID09PSB0YXJnZXRJbnN0JGpzY29tcCQwKSByZXR1cm47XG4gICAgICB2YXIgbm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAudGFnO1xuICAgICAgaWYgKDMgPT09IG5vZGVUYWcgfHwgNCA9PT0gbm9kZVRhZykge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgaWYgKGNvbnRhaW5lciA9PT0gdGFyZ2V0Q29udGFpbmVyKSBicmVhaztcbiAgICAgICAgaWYgKDQgPT09IG5vZGVUYWcpXG4gICAgICAgICAgZm9yIChub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5yZXR1cm47IG51bGwgIT09IG5vZGVUYWc7ICkge1xuICAgICAgICAgICAgdmFyIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgzID09PSBncmFuZFRhZyB8fCA0ID09PSBncmFuZFRhZykgJiZcbiAgICAgICAgICAgICAgbm9kZVRhZy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA9PT0gdGFyZ2V0Q29udGFpbmVyXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIG5vZGVUYWcgPSBub2RlVGFnLnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIGZvciAoOyBudWxsICE9PSBjb250YWluZXI7ICkge1xuICAgICAgICAgIG5vZGVUYWcgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShjb250YWluZXIpO1xuICAgICAgICAgIGlmIChudWxsID09PSBub2RlVGFnKSByZXR1cm47XG4gICAgICAgICAgZ3JhbmRUYWcgPSBub2RlVGFnLnRhZztcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICA1ID09PSBncmFuZFRhZyB8fFxuICAgICAgICAgICAgNiA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDI2ID09PSBncmFuZFRhZyB8fFxuICAgICAgICAgICAgMjcgPT09IGdyYW5kVGFnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0YXJnZXRJbnN0JGpzY29tcCQwID0gYW5jZXN0b3JJbnN0ID0gbm9kZVRhZztcbiAgICAgICAgICAgIGNvbnRpbnVlIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0YXJnZXRJbnN0JGpzY29tcCQwID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5yZXR1cm47XG4gICAgfVxuICBiYXRjaGVkVXBkYXRlcyQxKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGFyZ2V0SW5zdCA9IGFuY2VzdG9ySW5zdCxcbiAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpLFxuICAgICAgZGlzcGF0Y2hRdWV1ZSA9IFtdO1xuICAgIGE6IHtcbiAgICAgIHZhciByZWFjdE5hbWUgPSB0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcy5nZXQoZG9tRXZlbnROYW1lKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IHJlYWN0TmFtZSkge1xuICAgICAgICB2YXIgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRXZlbnQsXG4gICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBkb21FdmVudE5hbWU7XG4gICAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICAgICAgICBpZiAoMCA9PT0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkpIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBcImZvY3VzXCI7XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IFwiYmx1clwiO1xuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJiZWZvcmVibHVyXCI6XG4gICAgICAgICAgY2FzZSBcImFmdGVyYmx1clwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgaWYgKDIgPT09IG5hdGl2ZUV2ZW50LmJ1dHRvbikgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIFwiYXV4Y2xpY2tcIjpcbiAgICAgICAgICBjYXNlIFwiZGJsY2xpY2tcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlbW92ZVwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkcmFnXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbmRcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdleGl0XCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdsZWF2ZVwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnc3RhcnRcIjpcbiAgICAgICAgICBjYXNlIFwiZHJvcFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRHJhZ0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInRvdWNoY2FuY2VsXCI6XG4gICAgICAgICAgY2FzZSBcInRvdWNoZW5kXCI6XG4gICAgICAgICAgY2FzZSBcInRvdWNobW92ZVwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaHN0YXJ0XCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fRU5EOlxuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX0lURVJBVElPTjpcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9TVEFSVDpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBUUkFOU0lUSU9OX0VORDpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJzY3JvbGxcIjpcbiAgICAgICAgICBjYXNlIFwic2Nyb2xsZW5kXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIndoZWVsXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImNvcHlcIjpcbiAgICAgICAgICBjYXNlIFwiY3V0XCI6XG4gICAgICAgICAgY2FzZSBcInBhc3RlXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJ1cFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljUG9pbnRlckV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInRvZ2dsZVwiOlxuICAgICAgICAgIGNhc2UgXCJiZWZvcmV0b2dnbGVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1RvZ2dsZUV2ZW50O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbkNhcHR1cmVQaGFzZSA9IDAgIT09IChldmVudFN5c3RlbUZsYWdzICYgNCksXG4gICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgIWluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAoXCJzY3JvbGxcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwic2Nyb2xsZW5kXCIgPT09IGRvbUV2ZW50TmFtZSksXG4gICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSBpbkNhcHR1cmVQaGFzZVxuICAgICAgICAgICAgPyBudWxsICE9PSByZWFjdE5hbWVcbiAgICAgICAgICAgICAgPyByZWFjdE5hbWUgKyBcIkNhcHR1cmVcIlxuICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgIDogcmVhY3ROYW1lO1xuICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IFtdO1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRhcmdldEluc3QsIGxhc3RIb3N0Q29tcG9uZW50O1xuICAgICAgICAgIG51bGwgIT09IGluc3RhbmNlO1xuXG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBfaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9IF9pbnN0YW5jZS5zdGF0ZU5vZGU7XG4gICAgICAgICAgX2luc3RhbmNlID0gX2luc3RhbmNlLnRhZztcbiAgICAgICAgICAoNSAhPT0gX2luc3RhbmNlICYmIDI2ICE9PSBfaW5zdGFuY2UgJiYgMjcgIT09IF9pbnN0YW5jZSkgfHxcbiAgICAgICAgICAgIG51bGwgPT09IGxhc3RIb3N0Q29tcG9uZW50IHx8XG4gICAgICAgICAgICBudWxsID09PSByZWFjdEV2ZW50TmFtZSB8fFxuICAgICAgICAgICAgKChfaW5zdGFuY2UgPSBnZXRMaXN0ZW5lcihpbnN0YW5jZSwgcmVhY3RFdmVudE5hbWUpKSxcbiAgICAgICAgICAgIG51bGwgIT0gX2luc3RhbmNlICYmXG4gICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLnB1c2goXG4gICAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgX2luc3RhbmNlLCBsYXN0SG9zdENvbXBvbmVudClcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgaWYgKGFjY3VtdWxhdGVUYXJnZXRPbmx5KSBicmVhaztcbiAgICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlLnJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAwIDwgaW5DYXB0dXJlUGhhc2UubGVuZ3RoICYmXG4gICAgICAgICAgKChyZWFjdE5hbWUgPSBuZXcgU3ludGhldGljRXZlbnRDdG9yKFxuICAgICAgICAgICAgcmVhY3ROYW1lLFxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICkpLFxuICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiByZWFjdE5hbWUsIGxpc3RlbmVyczogaW5DYXB0dXJlUGhhc2UgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoMCA9PT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiA3KSkge1xuICAgICAgYToge1xuICAgICAgICByZWFjdE5hbWUgPVxuICAgICAgICAgIFwibW91c2VvdmVyXCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInBvaW50ZXJvdmVyXCIgPT09IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID1cbiAgICAgICAgICBcIm1vdXNlb3V0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInBvaW50ZXJvdXRcIiA9PT0gZG9tRXZlbnROYW1lO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVhY3ROYW1lICYmXG4gICAgICAgICAgbmF0aXZlRXZlbnQgIT09IGN1cnJlbnRSZXBsYXlpbmdFdmVudCAmJlxuICAgICAgICAgIChyZWFjdEV2ZW50VHlwZSA9XG4gICAgICAgICAgICBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSAmJlxuICAgICAgICAgIChnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShyZWFjdEV2ZW50VHlwZSkgfHxcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldKVxuICAgICAgICApXG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciB8fCByZWFjdE5hbWUpIHtcbiAgICAgICAgICByZWFjdE5hbWUgPVxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXQud2luZG93ID09PSBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICA/IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICAgIDogKHJlYWN0TmFtZSA9IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgPyByZWFjdE5hbWUuZGVmYXVsdFZpZXcgfHwgcmVhY3ROYW1lLnBhcmVudFdpbmRvd1xuICAgICAgICAgICAgICAgIDogd2luZG93O1xuICAgICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKChyZWFjdEV2ZW50VHlwZSA9XG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQpLFxuICAgICAgICAgICAgICAoU3ludGhldGljRXZlbnRDdG9yID0gdGFyZ2V0SW5zdCksXG4gICAgICAgICAgICAgIChyZWFjdEV2ZW50VHlwZSA9IHJlYWN0RXZlbnRUeXBlXG4gICAgICAgICAgICAgICAgPyBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShyZWFjdEV2ZW50VHlwZSlcbiAgICAgICAgICAgICAgICA6IG51bGwpLFxuICAgICAgICAgICAgICBudWxsICE9PSByZWFjdEV2ZW50VHlwZSAmJlxuICAgICAgICAgICAgICAgICgoYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgICAgICAgZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihyZWFjdEV2ZW50VHlwZSkpLFxuICAgICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IHJlYWN0RXZlbnRUeXBlLnRhZyksXG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgIT09IGFjY3VtdWxhdGVUYXJnZXRPbmx5IHx8XG4gICAgICAgICAgICAgICAgICAoNSAhPT0gaW5DYXB0dXJlUGhhc2UgJiZcbiAgICAgICAgICAgICAgICAgICAgMjcgIT09IGluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAgICAgICAgIDYgIT09IGluQ2FwdHVyZVBoYXNlKSkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IG51bGwpLCAocmVhY3RFdmVudFR5cGUgPSB0YXJnZXRJbnN0KTtcbiAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yICE9PSByZWFjdEV2ZW50VHlwZSkge1xuICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICAgICAgX2luc3RhbmNlID0gXCJvbk1vdXNlTGVhdmVcIjtcbiAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gXCJvbk1vdXNlRW50ZXJcIjtcbiAgICAgICAgICAgIGluc3RhbmNlID0gXCJtb3VzZVwiO1xuICAgICAgICAgICAgaWYgKFwicG9pbnRlcm91dFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3ZlclwiID09PSBkb21FdmVudE5hbWUpXG4gICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudCksXG4gICAgICAgICAgICAgICAgKF9pbnN0YW5jZSA9IFwib25Qb2ludGVyTGVhdmVcIiksXG4gICAgICAgICAgICAgICAgKHJlYWN0RXZlbnROYW1lID0gXCJvblBvaW50ZXJFbnRlclwiKSxcbiAgICAgICAgICAgICAgICAoaW5zdGFuY2UgPSBcInBvaW50ZXJcIik7XG4gICAgICAgICAgICBhY2N1bXVsYXRlVGFyZ2V0T25seSA9XG4gICAgICAgICAgICAgIG51bGwgPT0gU3ludGhldGljRXZlbnRDdG9yXG4gICAgICAgICAgICAgICAgPyByZWFjdE5hbWVcbiAgICAgICAgICAgICAgICA6IGdldE5vZGVGcm9tSW5zdGFuY2UoU3ludGhldGljRXZlbnRDdG9yKTtcbiAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID1cbiAgICAgICAgICAgICAgbnVsbCA9PSByZWFjdEV2ZW50VHlwZVxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lXG4gICAgICAgICAgICAgICAgOiBnZXROb2RlRnJvbUluc3RhbmNlKHJlYWN0RXZlbnRUeXBlKTtcbiAgICAgICAgICAgIHJlYWN0TmFtZSA9IG5ldyBpbkNhcHR1cmVQaGFzZShcbiAgICAgICAgICAgICAgX2luc3RhbmNlLFxuICAgICAgICAgICAgICBpbnN0YW5jZSArIFwibGVhdmVcIixcbiAgICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yLFxuICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZWFjdE5hbWUudGFyZ2V0ID0gYWNjdW11bGF0ZVRhcmdldE9ubHk7XG4gICAgICAgICAgICByZWFjdE5hbWUucmVsYXRlZFRhcmdldCA9IGxhc3RIb3N0Q29tcG9uZW50O1xuICAgICAgICAgICAgX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5hdGl2ZUV2ZW50VGFyZ2V0KSA9PT0gdGFyZ2V0SW5zdCAmJlxuICAgICAgICAgICAgICAoKGluQ2FwdHVyZVBoYXNlID0gbmV3IGluQ2FwdHVyZVBoYXNlKFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlICsgXCJlbnRlclwiLFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UudGFyZ2V0ID0gbGFzdEhvc3RDb21wb25lbnQpLFxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UucmVsYXRlZFRhcmdldCA9IGFjY3VtdWxhdGVUYXJnZXRPbmx5KSxcbiAgICAgICAgICAgICAgKF9pbnN0YW5jZSA9IGluQ2FwdHVyZVBoYXNlKSk7XG4gICAgICAgICAgICBhY2N1bXVsYXRlVGFyZ2V0T25seSA9IF9pbnN0YW5jZTtcbiAgICAgICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgJiYgcmVhY3RFdmVudFR5cGUpXG4gICAgICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IFN5bnRoZXRpY0V2ZW50Q3RvcjtcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IHJlYWN0RXZlbnRUeXBlO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBpbkNhcHR1cmVQaGFzZTtcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50O1xuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBnZXRQYXJlbnQobGFzdEhvc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgaW5zdGFuY2UrKztcbiAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IHJlYWN0RXZlbnROYW1lO1xuICAgICAgICAgICAgICAgICAgX2luc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgX2luc3RhbmNlID0gZ2V0UGFyZW50KF9pbnN0YW5jZSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCsrO1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgaW5zdGFuY2UgLSBsYXN0SG9zdENvbXBvbmVudDsgKVxuICAgICAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlID0gZ2V0UGFyZW50KGluQ2FwdHVyZVBoYXNlKSksIGluc3RhbmNlLS07XG4gICAgICAgICAgICAgICAgZm9yICg7IDAgPCBsYXN0SG9zdENvbXBvbmVudCAtIGluc3RhbmNlOyApXG4gICAgICAgICAgICAgICAgICAocmVhY3RFdmVudE5hbWUgPSBnZXRQYXJlbnQocmVhY3RFdmVudE5hbWUpKSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQtLTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaW5zdGFuY2UtLTsgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID09PSByZWFjdEV2ZW50TmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAobnVsbCAhPT0gcmVhY3RFdmVudE5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9PT0gcmVhY3RFdmVudE5hbWUuYWx0ZXJuYXRlKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBnZXRQYXJlbnQoaW5DYXB0dXJlUGhhc2UpO1xuICAgICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSBnZXRQYXJlbnQocmVhY3RFdmVudE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaW5DYXB0dXJlUGhhc2UgPSBudWxsO1xuICAgICAgICAgICAgbnVsbCAhPT0gU3ludGhldGljRXZlbnRDdG9yICYmXG4gICAgICAgICAgICAgIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgICAgICByZWFjdE5hbWUsXG4gICAgICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yLFxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLFxuICAgICAgICAgICAgICAgICExXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBudWxsICE9PSByZWFjdEV2ZW50VHlwZSAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBhY2N1bXVsYXRlVGFyZ2V0T25seSAmJlxuICAgICAgICAgICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50KFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHksXG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUsXG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UsXG4gICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGE6IHtcbiAgICAgICAgcmVhY3ROYW1lID0gdGFyZ2V0SW5zdCA/IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCkgOiB3aW5kb3c7XG4gICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9XG4gICAgICAgICAgcmVhY3ROYW1lLm5vZGVOYW1lICYmIHJlYWN0TmFtZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJzZWxlY3RcIiA9PT0gU3ludGhldGljRXZlbnRDdG9yIHx8XG4gICAgICAgICAgKFwiaW5wdXRcIiA9PT0gU3ludGhldGljRXZlbnRDdG9yICYmIFwiZmlsZVwiID09PSByZWFjdE5hbWUudHlwZSlcbiAgICAgICAgKVxuICAgICAgICAgIHZhciBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudDtcbiAgICAgICAgZWxzZSBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHJlYWN0TmFtZSkpXG4gICAgICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZClcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudDtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgICAgICAgIHZhciBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IHJlYWN0TmFtZS5ub2RlTmFtZSksXG4gICAgICAgICAgICAhU3ludGhldGljRXZlbnRDdG9yIHx8XG4gICAgICAgICAgICBcImlucHV0XCIgIT09IFN5bnRoZXRpY0V2ZW50Q3Rvci50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgICAoXCJjaGVja2JveFwiICE9PSByZWFjdE5hbWUudHlwZSAmJiBcInJhZGlvXCIgIT09IHJlYWN0TmFtZS50eXBlKVxuICAgICAgICAgICAgICA/IHRhcmdldEluc3QgJiZcbiAgICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQodGFyZ2V0SW5zdC5lbGVtZW50VHlwZSkgJiZcbiAgICAgICAgICAgICAgICAoZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQpXG4gICAgICAgICAgICAgIDogKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgJiZcbiAgICAgICAgICAoZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0RnVuYyhkb21FdmVudE5hbWUsIHRhcmdldEluc3QpKVxuICAgICAgICApIHtcbiAgICAgICAgICBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMsXG4gICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyAmJiBoYW5kbGVFdmVudEZ1bmMoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUsIHRhcmdldEluc3QpO1xuICAgICAgICBcImZvY3Vzb3V0XCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAgIHRhcmdldEluc3QgJiZcbiAgICAgICAgICBcIm51bWJlclwiID09PSByZWFjdE5hbWUudHlwZSAmJlxuICAgICAgICAgIG51bGwgIT0gdGFyZ2V0SW5zdC5tZW1vaXplZFByb3BzLnZhbHVlICYmXG4gICAgICAgICAgc2V0RGVmYXVsdFZhbHVlKHJlYWN0TmFtZSwgXCJudW1iZXJcIiwgcmVhY3ROYW1lLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBpc1RleHRJbnB1dEVsZW1lbnQoaGFuZGxlRXZlbnRGdW5jKSB8fFxuICAgICAgICAgICAgXCJ0cnVlXCIgPT09IGhhbmRsZUV2ZW50RnVuYy5jb250ZW50RWRpdGFibGVcbiAgICAgICAgICApXG4gICAgICAgICAgICAoYWN0aXZlRWxlbWVudCA9IGhhbmRsZUV2ZW50RnVuYyksXG4gICAgICAgICAgICAgIChhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3QpLFxuICAgICAgICAgICAgICAobGFzdFNlbGVjdGlvbiA9IG51bGwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgICAgICBsYXN0U2VsZWN0aW9uID0gYWN0aXZlRWxlbWVudEluc3QgPSBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgIG1vdXNlRG93biA9ICEwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICAgICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICAgICAgY2FzZSBcImRyYWdlbmRcIjpcbiAgICAgICAgICBtb3VzZURvd24gPSAhMTtcbiAgICAgICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6XG4gICAgICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgIGNhc2UgXCJrZXl1cFwiOlxuICAgICAgICAgIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICB9XG4gICAgICB2YXIgZmFsbGJhY2tEYXRhO1xuICAgICAgaWYgKGNhblVzZUNvbXBvc2l0aW9uRXZlbnQpXG4gICAgICAgIGI6IHtcbiAgICAgICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpcbiAgICAgICAgICAgICAgdmFyIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblN0YXJ0XCI7XG4gICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgICAgICAgICAgZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uRW5kXCI7XG4gICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICBjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpcbiAgICAgICAgICAgICAgZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7XG4gICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50VHlwZSA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBpc0NvbXBvc2luZ1xuICAgICAgICAgID8gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpICYmXG4gICAgICAgICAgICAoZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uRW5kXCIpXG4gICAgICAgICAgOiBcImtleWRvd25cIiA9PT0gZG9tRXZlbnROYW1lICYmXG4gICAgICAgICAgICAyMjkgPT09IG5hdGl2ZUV2ZW50LmtleUNvZGUgJiZcbiAgICAgICAgICAgIChldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiKTtcbiAgICAgIGV2ZW50VHlwZSAmJlxuICAgICAgICAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgJiZcbiAgICAgICAgICBcImtvXCIgIT09IG5hdGl2ZUV2ZW50LmxvY2FsZSAmJlxuICAgICAgICAgIChpc0NvbXBvc2luZyB8fCBcIm9uQ29tcG9zaXRpb25TdGFydFwiICE9PSBldmVudFR5cGVcbiAgICAgICAgICAgID8gXCJvbkNvbXBvc2l0aW9uRW5kXCIgPT09IGV2ZW50VHlwZSAmJlxuICAgICAgICAgICAgICBpc0NvbXBvc2luZyAmJlxuICAgICAgICAgICAgICAoZmFsbGJhY2tEYXRhID0gZ2V0RGF0YSgpKVxuICAgICAgICAgICAgOiAoKHJvb3QgPSBuYXRpdmVFdmVudFRhcmdldCksXG4gICAgICAgICAgICAgIChzdGFydFRleHQgPSBcInZhbHVlXCIgaW4gcm9vdCA/IHJvb3QudmFsdWUgOiByb290LnRleHRDb250ZW50KSxcbiAgICAgICAgICAgICAgKGlzQ29tcG9zaW5nID0gITApKSksXG4gICAgICAgIChoYW5kbGVFdmVudEZ1bmMgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgZXZlbnRUeXBlKSksXG4gICAgICAgIDAgPCBoYW5kbGVFdmVudEZ1bmMubGVuZ3RoICYmXG4gICAgICAgICAgKChldmVudFR5cGUgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgICAgICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IGV2ZW50VHlwZSwgbGlzdGVuZXJzOiBoYW5kbGVFdmVudEZ1bmMgfSksXG4gICAgICAgICAgZmFsbGJhY2tEYXRhXG4gICAgICAgICAgICA/IChldmVudFR5cGUuZGF0YSA9IGZhbGxiYWNrRGF0YSlcbiAgICAgICAgICAgIDogKChmYWxsYmFja0RhdGEgPSBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSksXG4gICAgICAgICAgICAgIG51bGwgIT09IGZhbGxiYWNrRGF0YSAmJiAoZXZlbnRUeXBlLmRhdGEgPSBmYWxsYmFja0RhdGEpKSkpO1xuICAgICAgaWYgKFxuICAgICAgICAoZmFsbGJhY2tEYXRhID0gY2FuVXNlVGV4dElucHV0RXZlbnRcbiAgICAgICAgICA/IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudClcbiAgICAgICAgICA6IGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSlcbiAgICAgIClcbiAgICAgICAgKGV2ZW50VHlwZSA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRJbnN0LCBcIm9uQmVmb3JlSW5wdXRcIikpLFxuICAgICAgICAgIDAgPCBldmVudFR5cGUubGVuZ3RoICYmXG4gICAgICAgICAgICAoKGhhbmRsZUV2ZW50RnVuYyA9IG5ldyBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuICAgICAgICAgICAgICBcIm9uQmVmb3JlSW5wdXRcIixcbiAgICAgICAgICAgICAgXCJiZWZvcmVpbnB1dFwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgZXZlbnQ6IGhhbmRsZUV2ZW50RnVuYyxcbiAgICAgICAgICAgICAgbGlzdGVuZXJzOiBldmVudFR5cGVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKGhhbmRsZUV2ZW50RnVuYy5kYXRhID0gZmFsbGJhY2tEYXRhKSk7XG4gICAgICBleHRyYWN0RXZlbnRzJDEoXG4gICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgdGFyZ2V0SW5zdCxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICApO1xuICAgIH1cbiAgICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCBldmVudFN5c3RlbUZsYWdzKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKGluc3RhbmNlLCBsaXN0ZW5lciwgY3VycmVudFRhcmdldCkge1xuICByZXR1cm4ge1xuICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgY3VycmVudFRhcmdldDogY3VycmVudFRhcmdldFxuICB9O1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEZpYmVyLCByZWFjdE5hbWUpIHtcbiAgZm9yIChcbiAgICB2YXIgY2FwdHVyZU5hbWUgPSByZWFjdE5hbWUgKyBcIkNhcHR1cmVcIiwgbGlzdGVuZXJzID0gW107XG4gICAgbnVsbCAhPT0gdGFyZ2V0RmliZXI7XG5cbiAgKSB7XG4gICAgdmFyIF9pbnN0YW5jZTIgPSB0YXJnZXRGaWJlcixcbiAgICAgIHN0YXRlTm9kZSA9IF9pbnN0YW5jZTIuc3RhdGVOb2RlO1xuICAgIF9pbnN0YW5jZTIgPSBfaW5zdGFuY2UyLnRhZztcbiAgICAoNSAhPT0gX2luc3RhbmNlMiAmJiAyNiAhPT0gX2luc3RhbmNlMiAmJiAyNyAhPT0gX2luc3RhbmNlMikgfHxcbiAgICAgIG51bGwgPT09IHN0YXRlTm9kZSB8fFxuICAgICAgKChfaW5zdGFuY2UyID0gZ2V0TGlzdGVuZXIodGFyZ2V0RmliZXIsIGNhcHR1cmVOYW1lKSksXG4gICAgICBudWxsICE9IF9pbnN0YW5jZTIgJiZcbiAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoXG4gICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXRGaWJlciwgX2luc3RhbmNlMiwgc3RhdGVOb2RlKVxuICAgICAgICApLFxuICAgICAgKF9pbnN0YW5jZTIgPSBnZXRMaXN0ZW5lcih0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSksXG4gICAgICBudWxsICE9IF9pbnN0YW5jZTIgJiZcbiAgICAgICAgbGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXRGaWJlciwgX2luc3RhbmNlMiwgc3RhdGVOb2RlKVxuICAgICAgICApKTtcbiAgICBpZiAoMyA9PT0gdGFyZ2V0RmliZXIudGFnKSByZXR1cm4gbGlzdGVuZXJzO1xuICAgIHRhcmdldEZpYmVyID0gdGFyZ2V0RmliZXIucmV0dXJuO1xuICB9XG4gIHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudChpbnN0KSB7XG4gIGlmIChudWxsID09PSBpbnN0KSByZXR1cm4gbnVsbDtcbiAgZG8gaW5zdCA9IGluc3QucmV0dXJuO1xuICB3aGlsZSAoaW5zdCAmJiA1ICE9PSBpbnN0LnRhZyAmJiAyNyAhPT0gaW5zdC50YWcpO1xuICByZXR1cm4gaW5zdCA/IGluc3QgOiBudWxsO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZXZlbnQsXG4gIHRhcmdldCxcbiAgY29tbW9uLFxuICBpbkNhcHR1cmVQaGFzZVxuKSB7XG4gIGZvciAoXG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5fcmVhY3ROYW1lLCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBudWxsICE9PSB0YXJnZXQgJiYgdGFyZ2V0ICE9PSBjb21tb247XG5cbiAgKSB7XG4gICAgdmFyIF9pbnN0YW5jZTMgPSB0YXJnZXQsXG4gICAgICBhbHRlcm5hdGUgPSBfaW5zdGFuY2UzLmFsdGVybmF0ZSxcbiAgICAgIHN0YXRlTm9kZSA9IF9pbnN0YW5jZTMuc3RhdGVOb2RlO1xuICAgIF9pbnN0YW5jZTMgPSBfaW5zdGFuY2UzLnRhZztcbiAgICBpZiAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY29tbW9uKSBicmVhaztcbiAgICAoNSAhPT0gX2luc3RhbmNlMyAmJiAyNiAhPT0gX2luc3RhbmNlMyAmJiAyNyAhPT0gX2luc3RhbmNlMykgfHxcbiAgICAgIG51bGwgPT09IHN0YXRlTm9kZSB8fFxuICAgICAgKChhbHRlcm5hdGUgPSBzdGF0ZU5vZGUpLFxuICAgICAgaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgPyAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgOiBpbkNhcHR1cmVQaGFzZSB8fFxuICAgICAgICAgICgoc3RhdGVOb2RlID0gZ2V0TGlzdGVuZXIodGFyZ2V0LCByZWdpc3RyYXRpb25OYW1lKSksXG4gICAgICAgICAgbnVsbCAhPSBzdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldCwgc3RhdGVOb2RlLCBhbHRlcm5hdGUpXG4gICAgICAgICAgICApKSk7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnJldHVybjtcbiAgfVxuICAwICE9PSBsaXN0ZW5lcnMubGVuZ3RoICYmXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IGV2ZW50LCBsaXN0ZW5lcnM6IGxpc3RlbmVycyB9KTtcbn1cbnZhciBOT1JNQUxJWkVfTkVXTElORVNfUkVHRVggPSAvXFxyXFxuPy9nLFxuICBOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx1MDAwMHxcXHVGRkZEL2c7XG5mdW5jdGlvbiBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUobWFya3VwKSB7XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG1hcmt1cCA/IG1hcmt1cCA6IFwiXCIgKyBtYXJrdXApXG4gICAgLnJlcGxhY2UoTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYLCBcIlxcblwiKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCwgXCJcIik7XG59XG5mdW5jdGlvbiBjaGVja0ZvclVubWF0Y2hlZFRleHQoc2VydmVyVGV4dCwgY2xpZW50VGV4dCkge1xuICBjbGllbnRUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFRleHQpO1xuICByZXR1cm4gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclRleHQpID09PSBjbGllbnRUZXh0ID8gITAgOiAhMTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywga2V5LCB2YWx1ZSwgcHJvcHMsIHByZXZWYWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gXCJib2R5XCIgPT09IHRhZyB8fFxuICAgICAgICAgIChcInRleHRhcmVhXCIgPT09IHRhZyAmJiBcIlwiID09PSB2YWx1ZSkgfHxcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCB2YWx1ZSlcbiAgICAgICAgOiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiYmlnaW50XCIgPT09IHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAgICAgICBcImJvZHlcIiAhPT0gdGFnICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjbGFzc05hbWVcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJjbGFzc1wiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGFiSW5kZXhcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJ0YWJpbmRleFwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGlyXCI6XG4gICAgY2FzZSBcInJvbGVcIjpcbiAgICBjYXNlIFwidmlld0JveFwiOlxuICAgIGNhc2UgXCJ3aWR0aFwiOlxuICAgIGNhc2UgXCJoZWlnaHRcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhdGFcIjpcbiAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0YWcpIHtcbiAgICAgICAgc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShkb21FbGVtZW50LCBcImRhdGFcIiwgdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIFwic3JjXCI6XG4gICAgY2FzZSBcImhyZWZcIjpcbiAgICAgIGlmIChcIlwiID09PSB2YWx1ZSAmJiAoXCJhXCIgIT09IHRhZyB8fCBcImhyZWZcIiAhPT0ga2V5KSkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYWN0aW9uXCI6XG4gICAgY2FzZSBcImZvcm1BY3Rpb25cIjpcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignQSBSZWFjdCBmb3JtIHdhcyB1bmV4cGVjdGVkbHkgc3VibWl0dGVkLiBJZiB5b3UgY2FsbGVkIGZvcm0uc3VibWl0KCkgbWFudWFsbHksIGNvbnNpZGVyIHVzaW5nIGZvcm0ucmVxdWVzdFN1Ym1pdCgpIGluc3RlYWQuIElmIHlvdVxcXFwncmUgdHJ5aW5nIHRvIHVzZSBldmVudC5zdG9wUHJvcGFnYXRpb24oKSBpbiBhIHN1Ym1pdCBldmVudCBoYW5kbGVyLCBjb25zaWRlciBhbHNvIGNhbGxpbmcgZXZlbnQucHJldmVudERlZmF1bHQoKS4nKVwiXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgIChcImZvcm1BY3Rpb25cIiA9PT0ga2V5XG4gICAgICAgICAgICA/IChcImlucHV0XCIgIT09IHRhZyAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm5hbWVcIiwgcHJvcHMubmFtZSwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybUVuY1R5cGVcIixcbiAgICAgICAgICAgICAgICBwcm9wcy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtTWV0aG9kXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybU1ldGhvZCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtVGFyZ2V0XCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybVRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6IChzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJlbmNUeXBlXCIsIHByb3BzLmVuY1R5cGUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwibWV0aG9kXCIsIHByb3BzLm1ldGhvZCwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJ0YXJnZXRcIiwgcHJvcHMudGFyZ2V0LCBwcm9wcywgbnVsbCkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgIGlmIChudWxsICE9IHZhbHVlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0eXBlb2YgdmFsdWUgfHwgIShcIl9faHRtbFwiIGluIHZhbHVlKSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYxKSk7XG4gICAgICAgIGtleSA9IHZhbHVlLl9faHRtbDtcbiAgICAgICAgaWYgKG51bGwgIT0ga2V5KSB7XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcHMuY2hpbGRyZW4pIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjApKTtcbiAgICAgICAgICBkb21FbGVtZW50LmlubmVySFRNTCA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICBkb21FbGVtZW50Lm11bHRpcGxlID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11dGVkXCI6XG4gICAgICBkb21FbGVtZW50Lm11dGVkID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiOlxuICAgIGNhc2UgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJhdXRvRm9jdXNcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0hyZWZcIjpcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwieGxpbms6aHJlZlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBrZXkgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6aHJlZlwiLFxuICAgICAgICBrZXlcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29udGVudEVkaXRhYmxlXCI6XG4gICAgY2FzZSBcInNwZWxsQ2hlY2tcIjpcbiAgICBjYXNlIFwiZHJhZ2dhYmxlXCI6XG4gICAgY2FzZSBcInZhbHVlXCI6XG4gICAgY2FzZSBcImF1dG9SZXZlcnNlXCI6XG4gICAgY2FzZSBcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIjpcbiAgICBjYXNlIFwiZm9jdXNhYmxlXCI6XG4gICAgY2FzZSBcInByZXNlcnZlQWxwaGFcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBcIlwiICsgdmFsdWUpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbmVydFwiOlxuICAgIGNhc2UgXCJhbGxvd0Z1bGxTY3JlZW5cIjpcbiAgICBjYXNlIFwiYXN5bmNcIjpcbiAgICBjYXNlIFwiYXV0b1BsYXlcIjpcbiAgICBjYXNlIFwiY29udHJvbHNcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFwiOlxuICAgIGNhc2UgXCJkZWZlclwiOlxuICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUGljdHVyZUluUGljdHVyZVwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUmVtb3RlUGxheWJhY2tcIjpcbiAgICBjYXNlIFwiZm9ybU5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwiaGlkZGVuXCI6XG4gICAgY2FzZSBcImxvb3BcIjpcbiAgICBjYXNlIFwibm9Nb2R1bGVcIjpcbiAgICBjYXNlIFwibm9WYWxpZGF0ZVwiOlxuICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgY2FzZSBcInBsYXlzSW5saW5lXCI6XG4gICAgY2FzZSBcInJlYWRPbmx5XCI6XG4gICAgY2FzZSBcInJlcXVpcmVkXCI6XG4gICAgY2FzZSBcInJldmVyc2VkXCI6XG4gICAgY2FzZSBcInNjb3BlZFwiOlxuICAgIGNhc2UgXCJzZWFtbGVzc1wiOlxuICAgIGNhc2UgXCJpdGVtU2NvcGVcIjpcbiAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhcHR1cmVcIjpcbiAgICBjYXNlIFwiZG93bmxvYWRcIjpcbiAgICAgICEwID09PSB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiAhMSAhPT0gdmFsdWUgJiZcbiAgICAgICAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbHNcIjpcbiAgICBjYXNlIFwicm93c1wiOlxuICAgIGNhc2UgXCJzaXplXCI6XG4gICAgY2FzZSBcInNwYW5cIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWUgJiZcbiAgICAgICFpc05hTih2YWx1ZSkgJiZcbiAgICAgIDEgPD0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicm93U3BhblwiOlxuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgaXNOYU4odmFsdWUpXG4gICAgICAgID8gZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KVxuICAgICAgICA6IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBvcG92ZXJcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJiZWZvcmV0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJwb3BvdmVyXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FjdHVhdGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YWN0dWF0ZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FyY3JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YXJjcm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6cm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1Nob3dcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6c2hvd1wiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1RpdGxlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnRpdGxlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhsaW5rVHlwZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0eXBlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbEJhc2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6YmFzZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxMYW5nXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmxhbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sU3BhY2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6c3BhY2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaXNcIjpcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiaXNcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlubmVyVGV4dFwiOlxuICAgIGNhc2UgXCJ0ZXh0Q29udGVudFwiOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgISgyIDwga2V5Lmxlbmd0aCkgfHxcbiAgICAgICAgKFwib1wiICE9PSBrZXlbMF0gJiYgXCJPXCIgIT09IGtleVswXSkgfHxcbiAgICAgICAgKFwiblwiICE9PSBrZXlbMV0gJiYgXCJOXCIgIT09IGtleVsxXSlcbiAgICAgIClcbiAgICAgICAgKGtleSA9IGFsaWFzZXMuZ2V0KGtleSkgfHwga2V5KSxcbiAgICAgICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoIXJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgYToge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIFwib1wiID09PSBrZXlbMF0gJiZcbiAgICAgICAgICAgIFwiblwiID09PSBrZXlbMV0gJiZcbiAgICAgICAgICAgICgocHJvcHMgPSBrZXkuZW5kc1dpdGgoXCJDYXB0dXJlXCIpKSxcbiAgICAgICAgICAgICh0YWcgPSBrZXkuc2xpY2UoMiwgcHJvcHMgPyBrZXkubGVuZ3RoIC0gNyA6IHZvaWQgMCkpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IGRvbUVsZW1lbnRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCksXG4gICAgICAgICAgICAocHJldlZhbHVlID0gbnVsbCAhPSBwcmV2VmFsdWUgPyBwcmV2VmFsdWVba2V5XSA6IG51bGwpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0YWcsIHByZXZWYWx1ZSwgcHJvcHMpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIChrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IG51bGwpXG4gICAgICAgICAgICAgICAgOiBkb21FbGVtZW50Lmhhc0F0dHJpYnV0ZShrZXkpICYmXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpKTtcbiAgICAgICAgICAgIGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0YWcsIHZhbHVlLCBwcm9wcyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgPyAoZG9tRWxlbWVudFtrZXldID0gdmFsdWUpXG4gICAgICAgICAgICA6ICEwID09PSB2YWx1ZVxuICAgICAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgICAgICAgOiBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHByb3BzKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBcImRpdlwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgY2FzZSBcInN2Z1wiOlxuICAgIGNhc2UgXCJwYXRoXCI6XG4gICAgY2FzZSBcImFcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcImxpXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBoYXNTcmMgPSAhMSxcbiAgICAgICAgaGFzU3JjU2V0ID0gITEsXG4gICAgICAgIHByb3BLZXk7XG4gICAgICBmb3IgKHByb3BLZXkgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUpXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1wiOlxuICAgICAgICAgICAgICAgIGhhc1NyYyA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic3JjU2V0XCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gITA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXksIHByb3BWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBoYXNTcmNTZXQgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwic3JjU2V0XCIsIHByb3BzLnNyY1NldCwgcHJvcHMsIG51bGwpO1xuICAgICAgaGFzU3JjICYmIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1wiLCBwcm9wcy5zcmMsIHByb3BzLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IChwcm9wS2V5ID0gcHJvcFZhbHVlID0gaGFzU3JjU2V0ID0gbnVsbCksXG4gICAgICAgIGNoZWNrZWQgPSBudWxsLFxuICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyYyBpbiBwcm9wcylcbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyYykpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlJDE4OCA9IHByb3BzW2hhc1NyY107XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlJDE4OClcbiAgICAgICAgICAgIHN3aXRjaCAoaGFzU3JjKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBwcm9wVmFsdWUkMTg4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wVmFsdWUkMTg4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdENoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BWYWx1ZSQxODg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIHByb3BLZXkgPSBwcm9wVmFsdWUkMTg4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODgpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyYywgcHJvcFZhbHVlJDE4OCwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBpbml0SW5wdXQoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIHByb3BLZXksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BWYWx1ZSxcbiAgICAgICAgaGFzU3JjU2V0LFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgaGFzU3JjID0gcHJvcFZhbHVlID0gcHJvcEtleSA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyY1NldCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyY1NldCkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW2hhc1NyY1NldF0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoaGFzU3JjU2V0KSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyY1NldCwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gcHJvcEtleTtcbiAgICAgIHByb3BzID0gcHJvcFZhbHVlO1xuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9ICEhaGFzU3JjO1xuICAgICAgbnVsbCAhPSB0YWdcbiAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhaGFzU3JjLCB0YWcsICExKVxuICAgICAgICA6IG51bGwgIT0gcHJvcHMgJiYgdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgcHJvcHMsICEwKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcEtleSA9IGhhc1NyY1NldCA9IGhhc1NyYyA9IG51bGw7XG4gICAgICBmb3IgKHByb3BWYWx1ZSBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW3Byb3BWYWx1ZV0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcFZhbHVlLCBkZWZhdWx0VmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICBpbml0VGV4dGFyZWEoZG9tRWxlbWVudCwgaGFzU3JjLCBoYXNTcmNTZXQsIHByb3BLZXkpO1xuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgZm9yIChjaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW2NoZWNrZWRdKSwgbnVsbCAhPSBoYXNTcmMpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgaGFzU3JjO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBjaGVja2VkLCBoYXNTcmMsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImJlZm9yZXRvZ2dsZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2FuY2VsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNsb3NlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlmcmFtZVwiOlxuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInZpZGVvXCI6XG4gICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICBmb3IgKGhhc1NyYyA9IDA7IGhhc1NyYyA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IGhhc1NyYysrKVxuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1toYXNTcmNdLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbWFnZVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGRvbUVsZW1lbnQpLFxuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICBjYXNlIFwiYXJlYVwiOlxuICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgY2FzZSBcImJyXCI6XG4gICAgY2FzZSBcImNvbFwiOlxuICAgIGNhc2UgXCJoclwiOlxuICAgIGNhc2UgXCJrZXlnZW5cIjpcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJwYXJhbVwiOlxuICAgIGNhc2UgXCJ0cmFja1wiOlxuICAgIGNhc2UgXCJ3YnJcIjpcbiAgICBjYXNlIFwibWVudWl0ZW1cIjpcbiAgICAgIGZvciAoZGVmYXVsdENoZWNrZWQgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0Q2hlY2tlZCkgJiZcbiAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW2RlZmF1bHRDaGVja2VkXSksIG51bGwgIT0gaGFzU3JjKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChkZWZhdWx0Q2hlY2tlZCkge1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRDaGVja2VkLCBoYXNTcmMsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChpc0N1c3RvbUVsZW1lbnQodGFnKSkge1xuICAgICAgICBmb3IgKHByb3BWYWx1ZSQxODggaW4gcHJvcHMpXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkocHJvcFZhbHVlJDE4OCkgJiZcbiAgICAgICAgICAgICgoaGFzU3JjID0gcHJvcHNbcHJvcFZhbHVlJDE4OF0pLFxuICAgICAgICAgICAgdm9pZCAwICE9PSBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBwcm9wVmFsdWUkMTg4LFxuICAgICAgICAgICAgICAgIGhhc1NyYyxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICB2b2lkIDBcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgfVxuICBmb3IgKGRlZmF1bHRWYWx1ZSBpbiBwcm9wcylcbiAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0VmFsdWUpICYmXG4gICAgICAoKGhhc1NyYyA9IHByb3BzW2RlZmF1bHRWYWx1ZV0pLFxuICAgICAgbnVsbCAhPSBoYXNTcmMgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRWYWx1ZSwgaGFzU3JjLCBwcm9wcywgbnVsbCkpO1xufVxuZnVuY3Rpb24gdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIGxhc3RQcm9wcywgbmV4dFByb3BzKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBcImRpdlwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgY2FzZSBcInN2Z1wiOlxuICAgIGNhc2UgXCJwYXRoXCI6XG4gICAgY2FzZSBcImFcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcImxpXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIHZhciBuYW1lID0gbnVsbCxcbiAgICAgICAgdHlwZSA9IG51bGwsXG4gICAgICAgIHZhbHVlID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gbnVsbCxcbiAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICAgIGNoZWNrZWQgPSBudWxsLFxuICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgICBmb3IgKHByb3BLZXkgaW4gbGFzdFByb3BzKSB7XG4gICAgICAgIHZhciBsYXN0UHJvcCA9IGxhc3RQcm9wc1twcm9wS2V5XTtcbiAgICAgICAgaWYgKGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSAmJiBudWxsICE9IGxhc3RQcm9wKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSkge1xuICAgICAgICAgICAgY2FzZSBcImNoZWNrZWRcIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWUgPSBsYXN0UHJvcDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fFxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5LCBudWxsLCBuZXh0UHJvcHMsIGxhc3RQcm9wKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIwNSBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIHByb3BLZXkgPSBuZXh0UHJvcHNbcHJvcEtleSQyMDVdO1xuICAgICAgICBsYXN0UHJvcCA9IGxhc3RQcm9wc1twcm9wS2V5JDIwNV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMDUpICYmXG4gICAgICAgICAgKG51bGwgIT0gcHJvcEtleSB8fCBudWxsICE9IGxhc3RQcm9wKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChwcm9wS2V5JDIwNSkge1xuICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgICAgdHlwZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcbiAgICAgICAgICAgICAgbmFtZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoZWNrZWRcIjpcbiAgICAgICAgICAgICAgY2hlY2tlZCA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRDaGVja2VkID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wS2V5KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBwcm9wS2V5ICE9PSBsYXN0UHJvcCAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgICAgcHJvcEtleSQyMDUsXG4gICAgICAgICAgICAgICAgICBwcm9wS2V5LFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdFByb3BcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHVwZGF0ZUlucHV0KFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgICBsYXN0RGVmYXVsdFZhbHVlLFxuICAgICAgICBjaGVja2VkLFxuICAgICAgICBkZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBwcm9wS2V5ID0gdmFsdWUgPSBkZWZhdWx0VmFsdWUgPSBwcm9wS2V5JDIwNSA9IG51bGw7XG4gICAgICBmb3IgKHR5cGUgaW4gbGFzdFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3BzW3R5cGVdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkodHlwZSkgJiYgbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGxhc3REZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkodHlwZSkgfHxcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgZm9yIChuYW1lIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgodHlwZSA9IG5leHRQcm9wc1tuYW1lXSksXG4gICAgICAgICAgKGxhc3REZWZhdWx0VmFsdWUgPSBsYXN0UHJvcHNbbmFtZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgKG51bGwgIT0gdHlwZSB8fCBudWxsICE9IGxhc3REZWZhdWx0VmFsdWUpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDUgPSB0eXBlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgdmFsdWUgPSB0eXBlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdHlwZSAhPT0gbGFzdERlZmF1bHRWYWx1ZSAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB0YWcgPSBkZWZhdWx0VmFsdWU7XG4gICAgICBsYXN0UHJvcHMgPSB2YWx1ZTtcbiAgICAgIG5leHRQcm9wcyA9IHByb3BLZXk7XG4gICAgICBudWxsICE9IHByb3BLZXkkMjA1XG4gICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgcHJvcEtleSQyMDUsICExKVxuICAgICAgICA6ICEhbmV4dFByb3BzICE9PSAhIWxhc3RQcm9wcyAmJlxuICAgICAgICAgIChudWxsICE9IHRhZ1xuICAgICAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhbGFzdFByb3BzLCB0YWcsICEwKVxuICAgICAgICAgICAgOiB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhbGFzdFByb3BzLCBsYXN0UHJvcHMgPyBbXSA6IFwiXCIsICExKSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBwcm9wS2V5ID0gcHJvcEtleSQyMDUgPSBudWxsO1xuICAgICAgZm9yIChkZWZhdWx0VmFsdWUgaW4gbGFzdFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChuYW1lID0gbGFzdFByb3BzW2RlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0VmFsdWUpICYmXG4gICAgICAgICAgICBudWxsICE9IG5hbWUgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgZGVmYXVsdFZhbHVlLCBudWxsLCBuZXh0UHJvcHMsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChuYW1lID0gbmV4dFByb3BzW3ZhbHVlXSksXG4gICAgICAgICAgKHR5cGUgPSBsYXN0UHJvcHNbdmFsdWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkodmFsdWUpICYmIChudWxsICE9IG5hbWUgfHwgbnVsbCAhPSB0eXBlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wS2V5JDIwNSA9IG5hbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gbmFtZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gbmFtZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MSkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIG5hbWUgIT09IHR5cGUgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgdmFsdWUsIG5hbWUsIG5leHRQcm9wcywgdHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgdXBkYXRlVGV4dGFyZWEoZG9tRWxlbWVudCwgcHJvcEtleSQyMDUsIHByb3BLZXkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgIGZvciAodmFyIHByb3BLZXkkMjIxIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDUgPSBsYXN0UHJvcHNbcHJvcEtleSQyMjFdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjEpICYmXG4gICAgICAgICAgICBudWxsICE9IHByb3BLZXkkMjA1ICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjIxKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSQyMjEpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID0gITE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIyMSxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAobGFzdERlZmF1bHRWYWx1ZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjA1ID0gbmV4dFByb3BzW2xhc3REZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tsYXN0RGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KGxhc3REZWZhdWx0VmFsdWUpICYmXG4gICAgICAgICAgICBwcm9wS2V5JDIwNSAhPT0gcHJvcEtleSAmJlxuICAgICAgICAgICAgKG51bGwgIT0gcHJvcEtleSQyMDUgfHwgbnVsbCAhPSBwcm9wS2V5KSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAobGFzdERlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInNlbGVjdGVkXCI6XG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQuc2VsZWN0ZWQgPVxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1ICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJvcEtleSQyMDUgJiZcbiAgICAgICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgcHJvcEtleSQyMDU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1LFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJpbWdcIjpcbiAgICBjYXNlIFwibGlua1wiOlxuICAgIGNhc2UgXCJhcmVhXCI6XG4gICAgY2FzZSBcImJhc2VcIjpcbiAgICBjYXNlIFwiYnJcIjpcbiAgICBjYXNlIFwiY29sXCI6XG4gICAgY2FzZSBcImVtYmVkXCI6XG4gICAgY2FzZSBcImhyXCI6XG4gICAgY2FzZSBcImtleWdlblwiOlxuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInBhcmFtXCI6XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgIGNhc2UgXCJ0cmFja1wiOlxuICAgIGNhc2UgXCJ3YnJcIjpcbiAgICBjYXNlIFwibWVudWl0ZW1cIjpcbiAgICAgIGZvciAodmFyIHByb3BLZXkkMjI2IGluIGxhc3RQcm9wcylcbiAgICAgICAgKHByb3BLZXkkMjA1ID0gbGFzdFByb3BzW3Byb3BLZXkkMjI2XSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI2KSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyNikgJiZcbiAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5JDIyNiwgbnVsbCwgbmV4dFByb3BzLCBwcm9wS2V5JDIwNSk7XG4gICAgICBmb3IgKGNoZWNrZWQgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwNSA9IG5leHRQcm9wc1tjaGVja2VkXSksXG4gICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbY2hlY2tlZF0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShjaGVja2VkKSAmJlxuICAgICAgICAgICAgcHJvcEtleSQyMDUgIT09IHByb3BLZXkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHByb3BLZXkkMjA1IHx8IG51bGwgIT0gcHJvcEtleSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BLZXkkMjA1KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDUsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChpc0N1c3RvbUVsZW1lbnQodGFnKSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wS2V5JDIzMSBpbiBsYXN0UHJvcHMpXG4gICAgICAgICAgKHByb3BLZXkkMjA1ID0gbGFzdFByb3BzW3Byb3BLZXkkMjMxXSksXG4gICAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMzEpICYmXG4gICAgICAgICAgICAgIHZvaWQgMCAhPT0gcHJvcEtleSQyMDUgJiZcbiAgICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzMSkgJiZcbiAgICAgICAgICAgICAgc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIzMSxcbiAgICAgICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1XG4gICAgICAgICAgICAgICk7XG4gICAgICAgIGZvciAoZGVmYXVsdENoZWNrZWQgaW4gbmV4dFByb3BzKVxuICAgICAgICAgIChwcm9wS2V5JDIwNSA9IG5leHRQcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLFxuICAgICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbZGVmYXVsdENoZWNrZWRdKSxcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdENoZWNrZWQpIHx8XG4gICAgICAgICAgICAgIHByb3BLZXkkMjA1ID09PSBwcm9wS2V5IHx8XG4gICAgICAgICAgICAgICh2b2lkIDAgPT09IHByb3BLZXkkMjA1ICYmIHZvaWQgMCA9PT0gcHJvcEtleSkgfHxcbiAgICAgICAgICAgICAgc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNSxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgZm9yICh2YXIgcHJvcEtleSQyMzYgaW4gbGFzdFByb3BzKVxuICAgIChwcm9wS2V5JDIwNSA9IGxhc3RQcm9wc1twcm9wS2V5JDIzNl0pLFxuICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjM2KSAmJlxuICAgICAgICBudWxsICE9IHByb3BLZXkkMjA1ICYmXG4gICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMzYpICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5JDIzNiwgbnVsbCwgbmV4dFByb3BzLCBwcm9wS2V5JDIwNSk7XG4gIGZvciAobGFzdFByb3AgaW4gbmV4dFByb3BzKVxuICAgIChwcm9wS2V5JDIwNSA9IG5leHRQcm9wc1tsYXN0UHJvcF0pLFxuICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbbGFzdFByb3BdKSxcbiAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobGFzdFByb3ApIHx8XG4gICAgICAgIHByb3BLZXkkMjA1ID09PSBwcm9wS2V5IHx8XG4gICAgICAgIChudWxsID09IHByb3BLZXkkMjA1ICYmIG51bGwgPT0gcHJvcEtleSkgfHxcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGxhc3RQcm9wLCBwcm9wS2V5JDIwNSwgbmV4dFByb3BzLCBwcm9wS2V5KTtcbn1cbnZhciBldmVudHNFbmFibGVkID0gbnVsbCxcbiAgc2VsZWN0aW9uSW5mb3JtYXRpb24gPSBudWxsO1xuZnVuY3Rpb24gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIHJldHVybiA5ID09PSByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZVxuICAgID8gcm9vdENvbnRhaW5lckVsZW1lbnRcbiAgICA6IHJvb3RDb250YWluZXJFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG59XG5mdW5jdGlvbiBnZXRPd25Ib3N0Q29udGV4dChuYW1lc3BhY2VVUkkpIHtcbiAgc3dpdGNoIChuYW1lc3BhY2VVUkkpIHtcbiAgICBjYXNlIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI6XG4gICAgICByZXR1cm4gMjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENoaWxkSG9zdENvbnRleHRQcm9kKHBhcmVudE5hbWVzcGFjZSwgdHlwZSkge1xuICBpZiAoMCA9PT0gcGFyZW50TmFtZXNwYWNlKVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICByZXR1cm4gMSA9PT0gcGFyZW50TmFtZXNwYWNlICYmIFwiZm9yZWlnbk9iamVjdFwiID09PSB0eXBlXG4gICAgPyAwXG4gICAgOiBwYXJlbnROYW1lc3BhY2U7XG59XG5mdW5jdGlvbiBzaG91bGRTZXRUZXh0Q29udGVudCh0eXBlLCBwcm9wcykge1xuICByZXR1cm4gKFxuICAgIFwidGV4dGFyZWFcIiA9PT0gdHlwZSB8fFxuICAgIFwibm9zY3JpcHRcIiA9PT0gdHlwZSB8fFxuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwcm9wcy5jaGlsZHJlbiB8fFxuICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBwcm9wcy5jaGlsZHJlbiB8fFxuICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBwcm9wcy5jaGlsZHJlbiB8fFxuICAgIChcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIG51bGwgIT09IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBudWxsICE9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbClcbiAgKTtcbn1cbnZhciBjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQgPSBudWxsO1xuZnVuY3Rpb24gc2hvdWxkQXR0ZW1wdEVhZ2VyVHJhbnNpdGlvbigpIHtcbiAgdmFyIGV2ZW50ID0gd2luZG93LmV2ZW50O1xuICBpZiAoZXZlbnQgJiYgXCJwb3BzdGF0ZVwiID09PSBldmVudC50eXBlKSB7XG4gICAgaWYgKGV2ZW50ID09PSBjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQpIHJldHVybiAhMTtcbiAgICBjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQgPSBldmVudDtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gbnVsbDtcbiAgcmV0dXJuICExO1xufVxudmFyIHNjaGVkdWxlVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHNldFRpbWVvdXQgPyBzZXRUaW1lb3V0IDogdm9pZCAwLFxuICBjYW5jZWxUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2xlYXJUaW1lb3V0ID8gY2xlYXJUaW1lb3V0IDogdm9pZCAwLFxuICBsb2NhbFByb21pc2UgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBQcm9taXNlID8gUHJvbWlzZSA6IHZvaWQgMCxcbiAgc2NoZWR1bGVNaWNyb3Rhc2sgPVxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHF1ZXVlTWljcm90YXNrXG4gICAgICA/IHF1ZXVlTWljcm90YXNrXG4gICAgICA6IFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBsb2NhbFByb21pc2VcbiAgICAgICAgPyBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFByb21pc2VcbiAgICAgICAgICAgICAgLnJlc29sdmUobnVsbClcbiAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spXG4gICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvckluTmV4dFRpY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgOiBzY2hlZHVsZVRpbWVvdXQ7XG5mdW5jdGlvbiBoYW5kbGVFcnJvckluTmV4dFRpY2soZXJyb3IpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNTaW5nbGV0b25TY29wZSh0eXBlKSB7XG4gIHJldHVybiBcImhlYWRcIiA9PT0gdHlwZTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShwYXJlbnRJbnN0YW5jZSwgc3VzcGVuc2VJbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IHN1c3BlbnNlSW5zdGFuY2UsXG4gICAgcG9zc2libGVQcmVhbWJsZUNvbnRyaWJ1dGlvbiA9IDAsXG4gICAgZGVwdGggPSAwO1xuICBkbyB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICBpZiAobmV4dE5vZGUgJiYgOCA9PT0gbmV4dE5vZGUubm9kZVR5cGUpXG4gICAgICBpZiAoKChub2RlID0gbmV4dE5vZGUuZGF0YSksIFwiLyRcIiA9PT0gbm9kZSkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIDAgPCBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uICYmXG4gICAgICAgICAgOCA+IHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgbm9kZSA9IHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb247XG4gICAgICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBwYXJlbnRJbnN0YW5jZS5vd25lckRvY3VtZW50O1xuICAgICAgICAgIG5vZGUgJiAxICYmIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShvd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgICAgbm9kZSAmIDIgJiYgcmVsZWFzZVNpbmdsZXRvbkluc3RhbmNlKG93bmVyRG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgaWYgKG5vZGUgJiA0KVxuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbm9kZSA9IG93bmVyRG9jdW1lbnQuaGVhZCxcbiAgICAgICAgICAgICAgICByZWxlYXNlU2luZ2xldG9uSW5zdGFuY2Uobm9kZSksXG4gICAgICAgICAgICAgICAgb3duZXJEb2N1bWVudCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgb3duZXJEb2N1bWVudDtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhciBuZXh0Tm9kZSRqc2NvbXAkMCA9IG93bmVyRG9jdW1lbnQubmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBvd25lckRvY3VtZW50Lm5vZGVOYW1lO1xuICAgICAgICAgICAgICBvd25lckRvY3VtZW50W2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICAgIFwiU0NSSVBUXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgICAgXCJTVFlMRVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICAgIChcIkxJTktcIiA9PT0gbm9kZU5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIFwic3R5bGVzaGVldFwiID09PSBvd25lckRvY3VtZW50LnJlbC50b0xvd2VyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQob3duZXJEb2N1bWVudCk7XG4gICAgICAgICAgICAgIG93bmVyRG9jdW1lbnQgPSBuZXh0Tm9kZSRqc2NvbXAkMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoMCA9PT0gZGVwdGgpIHtcbiAgICAgICAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChuZXh0Tm9kZSk7XG4gICAgICAgICAgcmV0cnlJZkJsb2NrZWRPbihzdXNwZW5zZUluc3RhbmNlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVwdGgtLTtcbiAgICAgIH0gZWxzZVxuICAgICAgICBcIiRcIiA9PT0gbm9kZSB8fCBcIiQ/XCIgPT09IG5vZGUgfHwgXCIkIVwiID09PSBub2RlXG4gICAgICAgICAgPyBkZXB0aCsrXG4gICAgICAgICAgOiAocG9zc2libGVQcmVhbWJsZUNvbnRyaWJ1dGlvbiA9IG5vZGUuY2hhckNvZGVBdCgwKSAtIDQ4KTtcbiAgICBlbHNlIHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb24gPSAwO1xuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfSB3aGlsZSAobm9kZSk7XG4gIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBjbGVhckNvbnRhaW5lclNwYXJpbmdseShjb250YWluZXIpIHtcbiAgdmFyIG5leHROb2RlID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIG5leHROb2RlICYmIDEwID09PSBuZXh0Tm9kZS5ub2RlVHlwZSAmJiAobmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZyk7XG4gIGZvciAoOyBuZXh0Tm9kZTsgKSB7XG4gICAgdmFyIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgIHN3aXRjaCAobm9kZS5ub2RlTmFtZSkge1xuICAgICAgY2FzZSBcIkhUTUxcIjpcbiAgICAgIGNhc2UgXCJIRUFEXCI6XG4gICAgICBjYXNlIFwiQk9EWVwiOlxuICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShub2RlKTtcbiAgICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgXCJTQ1JJUFRcIjpcbiAgICAgIGNhc2UgXCJTVFlMRVwiOlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgXCJMSU5LXCI6XG4gICAgICAgIGlmIChcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5yZWwudG9Mb3dlckNhc2UoKSkgY29udGludWU7XG4gICAgfVxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY2FuSHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgZm9yICg7IDEgPT09IGluc3RhbmNlLm5vZGVUeXBlOyApIHtcbiAgICB2YXIgYW55UHJvcHMgPSBwcm9wcztcbiAgICBpZiAoaW5zdGFuY2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBpZiAoXG4gICAgICAgICFpblJvb3RPclNpbmdsZXRvbiAmJlxuICAgICAgICAoXCJJTlBVVFwiICE9PSBpbnN0YW5jZS5ub2RlTmFtZSB8fCBcImhpZGRlblwiICE9PSBpbnN0YW5jZS50eXBlKVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKCFpblJvb3RPclNpbmdsZXRvbilcbiAgICAgIGlmIChcImlucHV0XCIgPT09IHR5cGUgJiYgXCJoaWRkZW5cIiA9PT0gaW5zdGFuY2UudHlwZSkge1xuICAgICAgICB2YXIgbmFtZSA9IG51bGwgPT0gYW55UHJvcHMubmFtZSA/IG51bGwgOiBcIlwiICsgYW55UHJvcHMubmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiaGlkZGVuXCIgPT09IGFueVByb3BzLnR5cGUgJiZcbiAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PSBuYW1lXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2UgcmV0dXJuIGluc3RhbmNlO1xuICAgIGVsc2UgaWYgKCFpbnN0YW5jZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0pXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpKSBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgbmFtZSA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICBpZiAoXCJzdHlsZXNoZWV0XCIgPT09IG5hbWUgJiYgaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICBuYW1lICE9PSBhbnlQcm9wcy5yZWwgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmhyZWYgfHwgXCJcIiA9PT0gYW55UHJvcHMuaHJlZlxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogYW55UHJvcHMuaHJlZikgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5jcm9zc09yaWdpbiA/IG51bGwgOiBhbnlQcm9wcy5jcm9zc09yaWdpbikgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy50aXRsZSA/IG51bGwgOiBhbnlQcm9wcy50aXRsZSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICAgIGlmIChpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIikpIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgIG5hbWUgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKG5hbWUgIT09IChudWxsID09IGFueVByb3BzLnNyYyA/IG51bGwgOiBhbnlQcm9wcy5zcmMpIHx8XG4gICAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09XG4gICAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMudHlwZSA/IG51bGwgOiBhbnlQcm9wcy50eXBlKSB8fFxuICAgICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiKSAhPT1cbiAgICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5jcm9zc09yaWdpbiA/IG51bGwgOiBhbnlQcm9wcy5jcm9zc09yaWdpbikpICYmXG4gICAgICAgICAgICBuYW1lICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJhc3luY1wiKSAmJlxuICAgICAgICAgICAgIWluc3RhbmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICBpbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbiAgICBpZiAobnVsbCA9PT0gaW5zdGFuY2UpIGJyZWFrO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShpbnN0YW5jZSwgdGV4dCwgaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgaWYgKFwiXCIgPT09IHRleHQpIHJldHVybiBudWxsO1xuICBmb3IgKDsgMyAhPT0gaW5zdGFuY2Uubm9kZVR5cGU7ICkge1xuICAgIGlmIChcbiAgICAgICgxICE9PSBpbnN0YW5jZS5ub2RlVHlwZSB8fFxuICAgICAgICBcIklOUFVUXCIgIT09IGluc3RhbmNlLm5vZGVOYW1lIHx8XG4gICAgICAgIFwiaGlkZGVuXCIgIT09IGluc3RhbmNlLnR5cGUpICYmXG4gICAgICAhaW5Sb290T3JTaW5nbGV0b25cbiAgICApXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbiAgICBpZiAobnVsbCA9PT0gaW5zdGFuY2UpIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGlzU3VzcGVuc2VJbnN0YW5jZUZhbGxiYWNrKGluc3RhbmNlKSB7XG4gIHJldHVybiAoXG4gICAgXCIkIVwiID09PSBpbnN0YW5jZS5kYXRhIHx8XG4gICAgKFwiJD9cIiA9PT0gaW5zdGFuY2UuZGF0YSAmJiBcImNvbXBsZXRlXCIgPT09IGluc3RhbmNlLm93bmVyRG9jdW1lbnQucmVhZHlTdGF0ZSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyU3VzcGVuc2VJbnN0YW5jZVJldHJ5KGluc3RhbmNlLCBjYWxsYmFjaykge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGluc3RhbmNlLm93bmVyRG9jdW1lbnQ7XG4gIGlmIChcIiQ/XCIgIT09IGluc3RhbmNlLmRhdGEgfHwgXCJjb21wbGV0ZVwiID09PSBvd25lckRvY3VtZW50LnJlYWR5U3RhdGUpXG4gICAgY2FsbGJhY2soKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgb3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBsaXN0ZW5lcik7XG4gICAgaW5zdGFuY2UuX3JlYWN0UmV0cnkgPSBsaXN0ZW5lcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TmV4dEh5ZHJhdGFibGUobm9kZSkge1xuICBmb3IgKDsgbnVsbCAhPSBub2RlOyBub2RlID0gbm9kZS5uZXh0U2libGluZykge1xuICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgaWYgKDEgPT09IG5vZGVUeXBlIHx8IDMgPT09IG5vZGVUeXBlKSBicmVhaztcbiAgICBpZiAoOCA9PT0gbm9kZVR5cGUpIHtcbiAgICAgIG5vZGVUeXBlID0gbm9kZS5kYXRhO1xuICAgICAgaWYgKFxuICAgICAgICBcIiRcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkIVwiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIiQ/XCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRiFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCJGXCIgPT09IG5vZGVUeXBlXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgaWYgKFwiLyRcIiA9PT0gbm9kZVR5cGUpIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbnZhciBwcmV2aW91c0h5ZHJhdGFibGVPbkVudGVyaW5nU2NvcGVkU2luZ2xldG9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0SW5zdGFuY2UpIHtcbiAgdGFyZ2V0SW5zdGFuY2UgPSB0YXJnZXRJbnN0YW5jZS5wcmV2aW91c1NpYmxpbmc7XG4gIGZvciAodmFyIGRlcHRoID0gMDsgdGFyZ2V0SW5zdGFuY2U7ICkge1xuICAgIGlmICg4ID09PSB0YXJnZXRJbnN0YW5jZS5ub2RlVHlwZSkge1xuICAgICAgdmFyIGRhdGEgPSB0YXJnZXRJbnN0YW5jZS5kYXRhO1xuICAgICAgaWYgKFwiJFwiID09PSBkYXRhIHx8IFwiJCFcIiA9PT0gZGF0YSB8fCBcIiQ/XCIgPT09IGRhdGEpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSByZXR1cm4gdGFyZ2V0SW5zdGFuY2U7XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgXCIvJFwiID09PSBkYXRhICYmIGRlcHRoKys7XG4gICAgfVxuICAgIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgcHJvcHMgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImh0bWxcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUyKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgdHlwZSA9IHByb3BzLmhlYWQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUzKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgdHlwZSA9IHByb3BzLmJvZHk7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDU0KSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTEpKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVsZWFzZVNpbmdsZXRvbkluc3RhbmNlKGluc3RhbmNlKSB7XG4gIGZvciAodmFyIGF0dHJpYnV0ZXMgPSBpbnN0YW5jZS5hdHRyaWJ1dGVzOyBhdHRyaWJ1dGVzLmxlbmd0aDsgKVxuICAgIGluc3RhbmNlLnJlbW92ZUF0dHJpYnV0ZU5vZGUoYXR0cmlidXRlc1swXSk7XG4gIGRldGFjaERlbGV0ZWRJbnN0YW5jZShpbnN0YW5jZSk7XG59XG52YXIgcHJlbG9hZFByb3BzTWFwID0gbmV3IE1hcCgpLFxuICBwcmVjb25uZWN0c1NldCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGdldEhvaXN0YWJsZVJvb3QoY29udGFpbmVyKSB7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250YWluZXIuZ2V0Um9vdE5vZGVcbiAgICA/IGNvbnRhaW5lci5nZXRSb290Tm9kZSgpXG4gICAgOiA5ID09PSBjb250YWluZXIubm9kZVR5cGVcbiAgICAgID8gY29udGFpbmVyXG4gICAgICA6IGNvbnRhaW5lci5vd25lckRvY3VtZW50O1xufVxudmFyIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQ7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5kID0ge1xuICBmOiBmbHVzaFN5bmNXb3JrLFxuICByOiByZXF1ZXN0Rm9ybVJlc2V0LFxuICBEOiBwcmVmZXRjaEROUyxcbiAgQzogcHJlY29ubmVjdCxcbiAgTDogcHJlbG9hZCxcbiAgbTogcHJlbG9hZE1vZHVsZSxcbiAgWDogcHJlaW5pdFNjcmlwdCxcbiAgUzogcHJlaW5pdFN0eWxlLFxuICBNOiBwcmVpbml0TW9kdWxlU2NyaXB0XG59O1xuZnVuY3Rpb24gZmx1c2hTeW5jV29yaygpIHtcbiAgdmFyIHByZXZpb3VzV2FzUmVuZGVyaW5nID0gcHJldmlvdXNEaXNwYXRjaGVyLmYoKSxcbiAgICB3YXNSZW5kZXJpbmcgPSBmbHVzaFN5bmNXb3JrJDEoKTtcbiAgcmV0dXJuIHByZXZpb3VzV2FzUmVuZGVyaW5nIHx8IHdhc1JlbmRlcmluZztcbn1cbmZ1bmN0aW9uIHJlcXVlc3RGb3JtUmVzZXQoZm9ybSkge1xuICB2YXIgZm9ybUluc3QgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGZvcm0pO1xuICBudWxsICE9PSBmb3JtSW5zdCAmJiA1ID09PSBmb3JtSW5zdC50YWcgJiYgXCJmb3JtXCIgPT09IGZvcm1JbnN0LnR5cGVcbiAgICA/IHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtSW5zdClcbiAgICA6IHByZXZpb3VzRGlzcGF0Y2hlci5yKGZvcm0pO1xufVxudmFyIGdsb2JhbERvY3VtZW50ID0gXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGRvY3VtZW50ID8gbnVsbCA6IGRvY3VtZW50O1xuZnVuY3Rpb24gcHJlY29ubmVjdEFzKHJlbCwgaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgaHJlZikge1xuICAgIHZhciBsaW1pdGVkRXNjYXBlZEhyZWYgPVxuICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKTtcbiAgICBsaW1pdGVkRXNjYXBlZEhyZWYgPVxuICAgICAgJ2xpbmtbcmVsPVwiJyArIHJlbCArICdcIl1baHJlZj1cIicgKyBsaW1pdGVkRXNjYXBlZEhyZWYgKyAnXCJdJztcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgY3Jvc3NPcmlnaW4gJiZcbiAgICAgIChsaW1pdGVkRXNjYXBlZEhyZWYgKz0gJ1tjcm9zc29yaWdpbj1cIicgKyBjcm9zc09yaWdpbiArICdcIl0nKTtcbiAgICBwcmVjb25uZWN0c1NldC5oYXMobGltaXRlZEVzY2FwZWRIcmVmKSB8fFxuICAgICAgKHByZWNvbm5lY3RzU2V0LmFkZChsaW1pdGVkRXNjYXBlZEhyZWYpLFxuICAgICAgKHJlbCA9IHsgcmVsOiByZWwsIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbiwgaHJlZjogaHJlZiB9KSxcbiAgICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihsaW1pdGVkRXNjYXBlZEhyZWYpICYmXG4gICAgICAgICgoaHJlZiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhocmVmLCBcImxpbmtcIiwgcmVsKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShocmVmKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGhyZWYpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWZldGNoRE5TKGhyZWYpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkQoaHJlZik7XG4gIHByZWNvbm5lY3RBcyhcImRucy1wcmVmZXRjaFwiLCBocmVmLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHByZWNvbm5lY3QoaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkMoaHJlZiwgY3Jvc3NPcmlnaW4pO1xuICBwcmVjb25uZWN0QXMoXCJwcmVjb25uZWN0XCIsIGhyZWYsIGNyb3NzT3JpZ2luKTtcbn1cbmZ1bmN0aW9uIHByZWxvYWQoaHJlZiwgYXMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkwoaHJlZiwgYXMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmICYmIGFzKSB7XG4gICAgdmFyIHByZWxvYWRTZWxlY3RvciA9XG4gICAgICAnbGlua1tyZWw9XCJwcmVsb2FkXCJdW2FzPVwiJyArXG4gICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGFzKSArXG4gICAgICAnXCJdJztcbiAgICBcImltYWdlXCIgPT09IGFzXG4gICAgICA/IG9wdGlvbnMgJiYgb3B0aW9ucy5pbWFnZVNyY1NldFxuICAgICAgICA/ICgocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAnW2ltYWdlc3Jjc2V0PVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICBvcHRpb25zLmltYWdlU3JjU2V0XG4gICAgICAgICAgICApICtcbiAgICAgICAgICAgICdcIl0nKSxcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVNpemVzICYmXG4gICAgICAgICAgICAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAgICdbaW1hZ2VzaXplcz1cIicgK1xuICAgICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaW1hZ2VTaXplc1xuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiXScpKVxuICAgICAgICA6IChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICdbaHJlZj1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICAgICAnXCJdJylcbiAgICAgIDogKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICdbaHJlZj1cIicgK1xuICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAgICdcIl0nKTtcbiAgICB2YXIga2V5ID0gcHJlbG9hZFNlbGVjdG9yO1xuICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICBrZXkgPSBnZXRTdHlsZUtleShocmVmKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGtleSA9IGdldFNjcmlwdEtleShocmVmKTtcbiAgICB9XG4gICAgcHJlbG9hZFByb3BzTWFwLmhhcyhrZXkpIHx8XG4gICAgICAoKGhyZWYgPSBhc3NpZ24oXG4gICAgICAgIHtcbiAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICBcImltYWdlXCIgPT09IGFzICYmIG9wdGlvbnMgJiYgb3B0aW9ucy5pbWFnZVNyY1NldCA/IHZvaWQgMCA6IGhyZWYsXG4gICAgICAgICAgYXM6IGFzXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICkpLFxuICAgICAgcHJlbG9hZFByb3BzTWFwLnNldChrZXksIGhyZWYpLFxuICAgICAgbnVsbCAhPT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByZWxvYWRTZWxlY3RvcikgfHxcbiAgICAgICAgKFwic3R5bGVcIiA9PT0gYXMgJiZcbiAgICAgICAgICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpKSkgfHxcbiAgICAgICAgKFwic2NyaXB0XCIgPT09IGFzICYmXG4gICAgICAgICAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSkgfHxcbiAgICAgICAgKChhcyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhhcywgXCJsaW5rXCIsIGhyZWYpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGFzKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGFzKSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVsb2FkTW9kdWxlKGhyZWYsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLm0oaHJlZiwgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYpIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzID8gb3B0aW9ucy5hcyA6IFwic2NyaXB0XCIsXG4gICAgICBwcmVsb2FkU2VsZWN0b3IgPVxuICAgICAgICAnbGlua1tyZWw9XCJtb2R1bGVwcmVsb2FkXCJdW2FzPVwiJyArXG4gICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoYXMpICtcbiAgICAgICAgJ1wiXVtocmVmPVwiJyArXG4gICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAnXCJdJyxcbiAgICAgIGtleSA9IHByZWxvYWRTZWxlY3RvcjtcbiAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICBjYXNlIFwiYXVkaW93b3JrbGV0XCI6XG4gICAgICBjYXNlIFwicGFpbnR3b3JrbGV0XCI6XG4gICAgICBjYXNlIFwic2VydmljZXdvcmtlclwiOlxuICAgICAgY2FzZSBcInNoYXJlZHdvcmtlclwiOlxuICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoaHJlZik7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICFwcmVsb2FkUHJvcHNNYXAuaGFzKGtleSkgJiZcbiAgICAgICgoaHJlZiA9IGFzc2lnbih7IHJlbDogXCJtb2R1bGVwcmVsb2FkXCIsIGhyZWY6IGhyZWYgfSwgb3B0aW9ucykpLFxuICAgICAgcHJlbG9hZFByb3BzTWFwLnNldChrZXksIGhyZWYpLFxuICAgICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByZWxvYWRTZWxlY3RvcikpXG4gICAgKSB7XG4gICAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICAgIGNhc2UgXCJhdWRpb3dvcmtsZXRcIjpcbiAgICAgICAgY2FzZSBcInBhaW50d29ya2xldFwiOlxuICAgICAgICBjYXNlIFwic2VydmljZXdvcmtlclwiOlxuICAgICAgICBjYXNlIFwic2hhcmVkd29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJ3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgIGlmIChvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXMgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoYXMsIFwibGlua1wiLCBocmVmKTtcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoYXMpO1xuICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGFzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRTdHlsZShocmVmLCBwcmVjZWRlbmNlLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5TKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVN0eWxlcyxcbiAgICAgIGtleSA9IGdldFN0eWxlS2V5KGhyZWYpO1xuICAgIHByZWNlZGVuY2UgPSBwcmVjZWRlbmNlIHx8IFwiZGVmYXVsdFwiO1xuICAgIHZhciByZXNvdXJjZSA9IHN0eWxlcy5nZXQoa2V5KTtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICB2YXIgc3RhdGUgPSB7IGxvYWRpbmc6IDAsIHByZWxvYWQ6IG51bGwgfTtcbiAgICAgIGlmIChcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KVxuICAgICAgICApKVxuICAgICAgKVxuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gNTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBocmVmID0gYXNzaWduKFxuICAgICAgICAgIHsgcmVsOiBcInN0eWxlc2hlZXRcIiwgaHJlZjogaHJlZiwgXCJkYXRhLXByZWNlZGVuY2VcIjogcHJlY2VkZW5jZSB9LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KGhyZWYsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgbGluayA9IChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGxpbmspO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhsaW5rLCBcImxpbmtcIiwgaHJlZik7XG4gICAgICAgIGxpbmsuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbGluay5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGxpbmsub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDI7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQocmVzb3VyY2UsIHByZWNlZGVuY2UsIG93bmVyRG9jdW1lbnQpO1xuICAgICAgfVxuICAgICAgcmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgIH07XG4gICAgICBzdHlsZXMuc2V0KGtleSwgcmVzb3VyY2UpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdFNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLlgoc3JjLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgc3JjKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTY3JpcHRzLFxuICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KHNyYyksXG4gICAgICByZXNvdXJjZSA9IHNjcmlwdHMuZ2V0KGtleSk7XG4gICAgcmVzb3VyY2UgfHxcbiAgICAgICgocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSxcbiAgICAgIHJlc291cmNlIHx8XG4gICAgICAgICgoc3JjID0gYXNzaWduKHsgc3JjOiBzcmMsIGFzeW5jOiAhMCB9LCBvcHRpb25zKSksXG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNyYywgb3B0aW9ucyksXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUocmVzb3VyY2UpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhyZXNvdXJjZSwgXCJsaW5rXCIsIHNyYyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyZXNvdXJjZSkpLFxuICAgICAgKHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfSksXG4gICAgICBzY3JpcHRzLnNldChrZXksIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRNb2R1bGVTY3JpcHQoc3JjLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5NKHNyYywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIHNyYykge1xuICAgIHZhciBzY3JpcHRzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU2NyaXB0cyxcbiAgICAgIGtleSA9IGdldFNjcmlwdEtleShzcmMpLFxuICAgICAgcmVzb3VyY2UgPSBzY3JpcHRzLmdldChrZXkpO1xuICAgIHJlc291cmNlIHx8XG4gICAgICAoKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSksXG4gICAgICByZXNvdXJjZSB8fFxuICAgICAgICAoKHNyYyA9IGFzc2lnbih7IHNyYzogc3JjLCBhc3luYzogITAsIHR5cGU6IFwibW9kdWxlXCIgfSwgb3B0aW9ucykpLFxuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzcmMsIG9wdGlvbnMpLFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHJlc291cmNlKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMocmVzb3VyY2UsIFwibGlua1wiLCBzcmMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocmVzb3VyY2UpKSxcbiAgICAgIChyZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgIH0pLFxuICAgICAgc2NyaXB0cy5zZXQoa2V5LCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZSh0eXBlLCBjdXJyZW50UHJvcHMsIHBlbmRpbmdQcm9wcywgY3VycmVudFJlc291cmNlKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KVxuICAgID8gZ2V0SG9pc3RhYmxlUm9vdChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpXG4gICAgOiBudWxsO1xuICBpZiAoIUpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDYpKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMucHJlY2VkZW5jZSAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLmhyZWZcbiAgICAgICAgPyAoKGN1cnJlbnRQcm9wcyA9IGdldFN0eWxlS2V5KHBlbmRpbmdQcm9wcy5ocmVmKSksXG4gICAgICAgICAgKHBlbmRpbmdQcm9wcyA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgKS5ob2lzdGFibGVTdHlsZXMpLFxuICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBwZW5kaW5nUHJvcHMuZ2V0KGN1cnJlbnRQcm9wcykpLFxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgKChjdXJyZW50UmVzb3VyY2UgPSB7XG4gICAgICAgICAgICAgIHR5cGU6IFwic3R5bGVcIixcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwZW5kaW5nUHJvcHMuc2V0KGN1cnJlbnRQcm9wcywgY3VycmVudFJlc291cmNlKSksXG4gICAgICAgICAgY3VycmVudFJlc291cmNlKVxuICAgICAgICA6IHsgdHlwZTogXCJ2b2lkXCIsIGluc3RhbmNlOiBudWxsLCBjb3VudDogMCwgc3RhdGU6IG51bGwgfTtcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gcGVuZGluZ1Byb3BzLnJlbCAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLmhyZWYgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5wcmVjZWRlbmNlXG4gICAgICApIHtcbiAgICAgICAgdHlwZSA9IGdldFN0eWxlS2V5KHBlbmRpbmdQcm9wcy5ocmVmKTtcbiAgICAgICAgdmFyIHN0eWxlcyQyNDQgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICkuaG9pc3RhYmxlU3R5bGVzLFxuICAgICAgICAgIHJlc291cmNlJDI0NSA9IHN0eWxlcyQyNDQuZ2V0KHR5cGUpO1xuICAgICAgICByZXNvdXJjZSQyNDUgfHxcbiAgICAgICAgICAoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQub3duZXJEb2N1bWVudCB8fCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLFxuICAgICAgICAgIChyZXNvdXJjZSQyNDUgPSB7XG4gICAgICAgICAgICB0eXBlOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBzdGF0ZTogeyBsb2FkaW5nOiAwLCBwcmVsb2FkOiBudWxsIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZXMkMjQ0LnNldCh0eXBlLCByZXNvdXJjZSQyNDUpLFxuICAgICAgICAgIChzdHlsZXMkMjQ0ID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KHR5cGUpXG4gICAgICAgICAgKSkgJiZcbiAgICAgICAgICAgICFzdHlsZXMkMjQ0Ll9wICYmXG4gICAgICAgICAgICAoKHJlc291cmNlJDI0NS5pbnN0YW5jZSA9IHN0eWxlcyQyNDQpLFxuICAgICAgICAgICAgKHJlc291cmNlJDI0NS5zdGF0ZS5sb2FkaW5nID0gNSkpLFxuICAgICAgICAgIHByZWxvYWRQcm9wc01hcC5oYXModHlwZSkgfHxcbiAgICAgICAgICAgICgocGVuZGluZ1Byb3BzID0ge1xuICAgICAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgICAgICBhczogXCJzdHlsZVwiLFxuICAgICAgICAgICAgICBocmVmOiBwZW5kaW5nUHJvcHMuaHJlZixcbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHBlbmRpbmdQcm9wcy5jcm9zc09yaWdpbixcbiAgICAgICAgICAgICAgaW50ZWdyaXR5OiBwZW5kaW5nUHJvcHMuaW50ZWdyaXR5LFxuICAgICAgICAgICAgICBtZWRpYTogcGVuZGluZ1Byb3BzLm1lZGlhLFxuICAgICAgICAgICAgICBocmVmTGFuZzogcGVuZGluZ1Byb3BzLmhyZWZMYW5nLFxuICAgICAgICAgICAgICByZWZlcnJlclBvbGljeTogcGVuZGluZ1Byb3BzLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQodHlwZSwgcGVuZGluZ1Byb3BzKSxcbiAgICAgICAgICAgIHN0eWxlcyQyNDQgfHxcbiAgICAgICAgICAgICAgcHJlbG9hZFN0eWxlc2hlZXQoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICAgIHJlc291cmNlJDI0NS5zdGF0ZVxuICAgICAgICAgICAgICApKSk7XG4gICAgICAgIGlmIChjdXJyZW50UHJvcHMgJiYgbnVsbCA9PT0gY3VycmVudFJlc291cmNlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTI4LCBcIlwiKSk7XG4gICAgICAgIHJldHVybiByZXNvdXJjZSQyNDU7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFByb3BzICYmIG51bGwgIT09IGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjksIFwiXCIpKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50UHJvcHMgPSBwZW5kaW5nUHJvcHMuYXN5bmMpLFxuICAgICAgICAocGVuZGluZ1Byb3BzID0gcGVuZGluZ1Byb3BzLnNyYyksXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMgJiZcbiAgICAgICAgY3VycmVudFByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGN1cnJlbnRQcm9wcyAmJlxuICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgY3VycmVudFByb3BzXG4gICAgICAgICAgPyAoKGN1cnJlbnRQcm9wcyA9IGdldFNjcmlwdEtleShwZW5kaW5nUHJvcHMpKSxcbiAgICAgICAgICAgIChwZW5kaW5nUHJvcHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICApLmhvaXN0YWJsZVNjcmlwdHMpLFxuICAgICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IHBlbmRpbmdQcm9wcy5nZXQoY3VycmVudFByb3BzKSksXG4gICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgfHxcbiAgICAgICAgICAgICAgKChjdXJyZW50UmVzb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgcGVuZGluZ1Byb3BzLnNldChjdXJyZW50UHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkpLFxuICAgICAgICAgICAgY3VycmVudFJlc291cmNlKVxuICAgICAgICAgIDogeyB0eXBlOiBcInZvaWRcIiwgaW5zdGFuY2U6IG51bGwsIGNvdW50OiAwLCBzdGF0ZTogbnVsbCB9XG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0NCwgdHlwZSkpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdHlsZUtleShocmVmKSB7XG4gIHJldHVybiAnaHJlZj1cIicgKyBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICsgJ1wiJztcbn1cbmZ1bmN0aW9uIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KSB7XG4gIHJldHVybiAnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdWycgKyBrZXkgKyBcIl1cIjtcbn1cbmZ1bmN0aW9uIHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhyYXdQcm9wcykge1xuICByZXR1cm4gYXNzaWduKHt9LCByYXdQcm9wcywge1xuICAgIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHJhd1Byb3BzLnByZWNlZGVuY2UsXG4gICAgcHJlY2VkZW5jZTogbnVsbFxuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWxvYWRTdHlsZXNoZWV0KG93bmVyRG9jdW1lbnQsIGtleSwgcHJlbG9hZFByb3BzLCBzdGF0ZSkge1xuICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xpbmtbcmVsPVwicHJlbG9hZFwiXVthcz1cInN0eWxlXCJdWycgKyBrZXkgKyBcIl1cIilcbiAgICA/IChzdGF0ZS5sb2FkaW5nID0gMSlcbiAgICA6ICgoa2V5ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAoc3RhdGUucHJlbG9hZCA9IGtleSksXG4gICAgICBrZXkuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHN0YXRlLmxvYWRpbmcgfD0gMSk7XG4gICAgICB9KSxcbiAgICAgIGtleS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHN0YXRlLmxvYWRpbmcgfD0gMik7XG4gICAgICB9KSxcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGtleSwgXCJsaW5rXCIsIHByZWxvYWRQcm9wcyksXG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGtleSksXG4gICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoa2V5KSk7XG59XG5mdW5jdGlvbiBnZXRTY3JpcHRLZXkoc3JjKSB7XG4gIHJldHVybiAnW3NyYz1cIicgKyBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHNyYykgKyAnXCJdJztcbn1cbmZ1bmN0aW9uIGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpIHtcbiAgcmV0dXJuIFwic2NyaXB0W2FzeW5jXVwiICsga2V5O1xufVxuZnVuY3Rpb24gYWNxdWlyZVJlc291cmNlKGhvaXN0YWJsZVJvb3QsIHJlc291cmNlLCBwcm9wcykge1xuICByZXNvdXJjZS5jb3VudCsrO1xuICBpZiAobnVsbCA9PT0gcmVzb3VyY2UuaW5zdGFuY2UpXG4gICAgc3dpdGNoIChyZXNvdXJjZS50eXBlKSB7XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICdzdHlsZVtkYXRhLWhyZWZ+PVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHByb3BzLmhyZWYpICtcbiAgICAgICAgICAgICdcIl0nXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbnN0YW5jZSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSksXG4gICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICk7XG4gICAgICAgIHZhciBzdHlsZVByb3BzID0gYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIFwiZGF0YS1ocmVmXCI6IHByb3BzLmhyZWYsXG4gICAgICAgICAgXCJkYXRhLXByZWNlZGVuY2VcIjogcHJvcHMucHJlY2VkZW5jZSxcbiAgICAgICAgICBocmVmOiBudWxsLFxuICAgICAgICAgIHByZWNlZGVuY2U6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGluc3RhbmNlID0gKGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290KS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3R5bGVcIlxuICAgICAgICApO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UsIFwic3R5bGVcIiwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UpO1xuICAgICAgY2FzZSBcInN0eWxlc2hlZXRcIjpcbiAgICAgICAgc3R5bGVQcm9wcyA9IGdldFN0eWxlS2V5KHByb3BzLmhyZWYpO1xuICAgICAgICB2YXIgaW5zdGFuY2UkMjUwID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoc3R5bGVQcm9wcylcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbmNlJDI1MClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNCksXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSQyNTApLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSQyNTApLFxuICAgICAgICAgICAgaW5zdGFuY2UkMjUwXG4gICAgICAgICAgKTtcbiAgICAgICAgaW5zdGFuY2UgPSBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocHJvcHMpO1xuICAgICAgICAoc3R5bGVQcm9wcyA9IHByZWxvYWRQcm9wc01hcC5nZXQoc3R5bGVQcm9wcykpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KGluc3RhbmNlLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaW5zdGFuY2UkMjUwID0gKFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290XG4gICAgICAgICkuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UkMjUwKTtcbiAgICAgICAgdmFyIGxpbmtJbnN0YW5jZSA9IGluc3RhbmNlJDI1MDtcbiAgICAgICAgbGlua0luc3RhbmNlLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGxpbmtJbnN0YW5jZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGxpbmtJbnN0YW5jZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UkMjUwLCBcImxpbmtcIiwgaW5zdGFuY2UpO1xuICAgICAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UkMjUwLCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlJDI1MCk7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGluc3RhbmNlJDI1MCA9IGdldFNjcmlwdEtleShwcm9wcy5zcmMpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHN0eWxlUHJvcHMgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoaW5zdGFuY2UkMjUwKVxuICAgICAgICAgICkpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gc3R5bGVQcm9wcyksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHN0eWxlUHJvcHMpLFxuICAgICAgICAgICAgc3R5bGVQcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgIGluc3RhbmNlID0gcHJvcHM7XG4gICAgICAgIGlmICgoc3R5bGVQcm9wcyA9IHByZWxvYWRQcm9wc01hcC5nZXQoaW5zdGFuY2UkMjUwKSkpXG4gICAgICAgICAgKGluc3RhbmNlID0gYXNzaWduKHt9LCBwcm9wcykpLFxuICAgICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoaW5zdGFuY2UsIHN0eWxlUHJvcHMpO1xuICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgIHN0eWxlUHJvcHMgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoc3R5bGVQcm9wcyk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHN0eWxlUHJvcHMsIFwibGlua1wiLCBpbnN0YW5jZSk7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVByb3BzKTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IHN0eWxlUHJvcHMpO1xuICAgICAgY2FzZSBcInZvaWRcIjpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0MywgcmVzb3VyY2UudHlwZSkpO1xuICAgIH1cbiAgZWxzZVxuICAgIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmXG4gICAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpICYmXG4gICAgICAoKGluc3RhbmNlID0gcmVzb3VyY2UuaW5zdGFuY2UpLFxuICAgICAgKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNCksXG4gICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KSk7XG4gIHJldHVybiByZXNvdXJjZS5pbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByZWNlZGVuY2UsIHJvb3QpIHtcbiAgZm9yIChcbiAgICB2YXIgbm9kZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1bZGF0YS1wcmVjZWRlbmNlXSxzdHlsZVtkYXRhLXByZWNlZGVuY2VdJ1xuICAgICAgKSxcbiAgICAgIGxhc3QgPSBub2Rlcy5sZW5ndGggPyBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXSA6IG51bGwsXG4gICAgICBwcmlvciA9IGxhc3QsXG4gICAgICBpID0gMDtcbiAgICBpIDwgbm9kZXMubGVuZ3RoO1xuICAgIGkrK1xuICApIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmIChub2RlLmRhdGFzZXQucHJlY2VkZW5jZSA9PT0gcHJlY2VkZW5jZSkgcHJpb3IgPSBub2RlO1xuICAgIGVsc2UgaWYgKHByaW9yICE9PSBsYXN0KSBicmVhaztcbiAgfVxuICBwcmlvclxuICAgID8gcHJpb3IucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaW5zdGFuY2UsIHByaW9yLm5leHRTaWJsaW5nKVxuICAgIDogKChwcmVjZWRlbmNlID0gOSA9PT0gcm9vdC5ub2RlVHlwZSA/IHJvb3QuaGVhZCA6IHJvb3QpLFxuICAgICAgcHJlY2VkZW5jZS5pbnNlcnRCZWZvcmUoaW5zdGFuY2UsIHByZWNlZGVuY2UuZmlyc3RDaGlsZCkpO1xufVxuZnVuY3Rpb24gYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KHN0eWxlc2hlZXRQcm9wcywgcHJlbG9hZFByb3BzKSB7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLmNyb3NzT3JpZ2luICYmXG4gICAgKHN0eWxlc2hlZXRQcm9wcy5jcm9zc09yaWdpbiA9IHByZWxvYWRQcm9wcy5jcm9zc09yaWdpbik7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLnJlZmVycmVyUG9saWN5ICYmXG4gICAgKHN0eWxlc2hlZXRQcm9wcy5yZWZlcnJlclBvbGljeSA9IHByZWxvYWRQcm9wcy5yZWZlcnJlclBvbGljeSk7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLnRpdGxlICYmIChzdHlsZXNoZWV0UHJvcHMudGl0bGUgPSBwcmVsb2FkUHJvcHMudGl0bGUpO1xufVxuZnVuY3Rpb24gYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc2NyaXB0UHJvcHMsIHByZWxvYWRQcm9wcykge1xuICBudWxsID09IHNjcmlwdFByb3BzLmNyb3NzT3JpZ2luICYmXG4gICAgKHNjcmlwdFByb3BzLmNyb3NzT3JpZ2luID0gcHJlbG9hZFByb3BzLmNyb3NzT3JpZ2luKTtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5yZWZlcnJlclBvbGljeSAmJlxuICAgIChzY3JpcHRQcm9wcy5yZWZlcnJlclBvbGljeSA9IHByZWxvYWRQcm9wcy5yZWZlcnJlclBvbGljeSk7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMuaW50ZWdyaXR5ICYmXG4gICAgKHNjcmlwdFByb3BzLmludGVncml0eSA9IHByZWxvYWRQcm9wcy5pbnRlZ3JpdHkpO1xufVxudmFyIHRhZ0NhY2hlcyA9IG51bGw7XG5mdW5jdGlvbiBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUodHlwZSwga2V5QXR0cmlidXRlLCBvd25lckRvY3VtZW50KSB7XG4gIGlmIChudWxsID09PSB0YWdDYWNoZXMpIHtcbiAgICB2YXIgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdmFyIGNhY2hlcyA9ICh0YWdDYWNoZXMgPSBuZXcgTWFwKCkpO1xuICAgIGNhY2hlcy5zZXQob3duZXJEb2N1bWVudCwgY2FjaGUpO1xuICB9IGVsc2VcbiAgICAoY2FjaGVzID0gdGFnQ2FjaGVzKSxcbiAgICAgIChjYWNoZSA9IGNhY2hlcy5nZXQob3duZXJEb2N1bWVudCkpLFxuICAgICAgY2FjaGUgfHwgKChjYWNoZSA9IG5ldyBNYXAoKSksIGNhY2hlcy5zZXQob3duZXJEb2N1bWVudCwgY2FjaGUpKTtcbiAgaWYgKGNhY2hlLmhhcyh0eXBlKSkgcmV0dXJuIGNhY2hlO1xuICBjYWNoZS5zZXQodHlwZSwgbnVsbCk7XG4gIG93bmVyRG9jdW1lbnQgPSBvd25lckRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHR5cGUpO1xuICBmb3IgKGNhY2hlcyA9IDA7IGNhY2hlcyA8IG93bmVyRG9jdW1lbnQubGVuZ3RoOyBjYWNoZXMrKykge1xuICAgIHZhciBub2RlID0gb3duZXJEb2N1bWVudFtjYWNoZXNdO1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdIHx8XG4gICAgICAgIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgKFwibGlua1wiID09PSB0eXBlICYmIFwic3R5bGVzaGVldFwiID09PSBub2RlLmdldEF0dHJpYnV0ZShcInJlbFwiKSlcbiAgICAgICkgJiZcbiAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAhPT0gbm9kZS5uYW1lc3BhY2VVUklcbiAgICApIHtcbiAgICAgIHZhciBub2RlS2V5ID0gbm9kZS5nZXRBdHRyaWJ1dGUoa2V5QXR0cmlidXRlKSB8fCBcIlwiO1xuICAgICAgbm9kZUtleSA9IHR5cGUgKyBub2RlS2V5O1xuICAgICAgdmFyIGV4aXN0aW5nID0gY2FjaGUuZ2V0KG5vZGVLZXkpO1xuICAgICAgZXhpc3RpbmcgPyBleGlzdGluZy5wdXNoKG5vZGUpIDogY2FjaGUuc2V0KG5vZGVLZXksIFtub2RlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYWNoZTtcbn1cbmZ1bmN0aW9uIG1vdW50SG9pc3RhYmxlKGhvaXN0YWJsZVJvb3QsIHR5cGUsIGluc3RhbmNlKSB7XG4gIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgaG9pc3RhYmxlUm9vdC5oZWFkLmluc2VydEJlZm9yZShcbiAgICBpbnN0YW5jZSxcbiAgICBcInRpdGxlXCIgPT09IHR5cGUgPyBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkID4gdGl0bGVcIikgOiBudWxsXG4gICk7XG59XG5mdW5jdGlvbiBpc0hvc3RIb2lzdGFibGVUeXBlKHR5cGUsIHByb3BzLCBob3N0Q29udGV4dCkge1xuICBpZiAoMSA9PT0gaG9zdENvbnRleHQgfHwgbnVsbCAhPSBwcm9wcy5pdGVtUHJvcCkgcmV0dXJuICExO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMucHJlY2VkZW5jZSB8fFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMuaHJlZiB8fFxuICAgICAgICBcIlwiID09PSBwcm9wcy5ocmVmXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5yZWwgfHxcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLmhyZWYgfHxcbiAgICAgICAgXCJcIiA9PT0gcHJvcHMuaHJlZiB8fFxuICAgICAgICBwcm9wcy5vbkxvYWQgfHxcbiAgICAgICAgcHJvcHMub25FcnJvclxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIHN3aXRjaCAocHJvcHMucmVsKSB7XG4gICAgICAgIGNhc2UgXCJzdHlsZXNoZWV0XCI6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlID0gcHJvcHMuZGlzYWJsZWQpLFxuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLnByZWNlZGVuY2UgJiYgbnVsbCA9PSB0eXBlXG4gICAgICAgICAgKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gITA7XG4gICAgICB9XG4gICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy5hc3luYyAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9wcy5hc3luYyAmJlxuICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgIXByb3BzLm9uTG9hZCAmJlxuICAgICAgICAhcHJvcHMub25FcnJvciAmJlxuICAgICAgICBwcm9wcy5zcmMgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLnNyY1xuICAgICAgKVxuICAgICAgICByZXR1cm4gITA7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSB7XG4gIHJldHVybiBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJiAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDMpXG4gICAgPyAhMVxuICAgIDogITA7XG59XG52YXIgc3VzcGVuZGVkU3RhdGUgPSBudWxsO1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBzdXNwZW5kUmVzb3VyY2UoaG9pc3RhYmxlUm9vdCwgcmVzb3VyY2UsIHByb3BzKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRTdGF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzUpKTtcbiAgdmFyIHN0YXRlID0gc3VzcGVuZGVkU3RhdGU7XG4gIGlmIChcbiAgICBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJlxuICAgIChcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMubWVkaWEgfHxcbiAgICAgICExICE9PSBtYXRjaE1lZGlhKHByb3BzLm1lZGlhKS5tYXRjaGVzKSAmJlxuICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNClcbiAgKSB7XG4gICAgaWYgKG51bGwgPT09IHJlc291cmNlLmluc3RhbmNlKSB7XG4gICAgICB2YXIga2V5ID0gZ2V0U3R5bGVLZXkocHJvcHMuaHJlZiksXG4gICAgICAgIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KVxuICAgICAgICApO1xuICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBpbnN0YW5jZS5fcDtcbiAgICAgICAgbnVsbCAhPT0gaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaG9pc3RhYmxlUm9vdC50aGVuICYmXG4gICAgICAgICAgKHN0YXRlLmNvdW50KyssXG4gICAgICAgICAgKHN0YXRlID0gb25VbnN1c3BlbmQuYmluZChzdGF0ZSkpLFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3QudGhlbihzdGF0ZSwgc3RhdGUpKTtcbiAgICAgICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICByZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgIHByb3BzID0gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHByb3BzKTtcbiAgICAgIChrZXkgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChwcm9wcywga2V5KTtcbiAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgIHZhciBsaW5rSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIGxpbmtJbnN0YW5jZS5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbGlua0luc3RhbmNlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSwgXCJsaW5rXCIsIHByb3BzKTtcbiAgICAgIHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgfVxuICAgIG51bGwgPT09IHN0YXRlLnN0eWxlc2hlZXRzICYmIChzdGF0ZS5zdHlsZXNoZWV0cyA9IG5ldyBNYXAoKSk7XG4gICAgc3RhdGUuc3R5bGVzaGVldHMuc2V0KHJlc291cmNlLCBob2lzdGFibGVSb290KTtcbiAgICAoaG9pc3RhYmxlUm9vdCA9IHJlc291cmNlLnN0YXRlLnByZWxvYWQpICYmXG4gICAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDMpICYmXG4gICAgICAoc3RhdGUuY291bnQrKyxcbiAgICAgIChyZXNvdXJjZSA9IG9uVW5zdXNwZW5kLmJpbmQoc3RhdGUpKSxcbiAgICAgIGhvaXN0YWJsZVJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVzb3VyY2UpLFxuICAgICAgaG9pc3RhYmxlUm9vdC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FpdEZvckNvbW1pdFRvQmVSZWFkeSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFN0YXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NSkpO1xuICB2YXIgc3RhdGUgPSBzdXNwZW5kZWRTdGF0ZTtcbiAgc3RhdGUuc3R5bGVzaGVldHMgJiZcbiAgICAwID09PSBzdGF0ZS5jb3VudCAmJlxuICAgIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCBzdGF0ZS5zdHlsZXNoZWV0cyk7XG4gIHJldHVybiAwIDwgc3RhdGUuY291bnRcbiAgICA/IGZ1bmN0aW9uIChjb21taXQpIHtcbiAgICAgICAgdmFyIHN0eWxlc2hlZXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLnN0eWxlc2hlZXRzICYmXG4gICAgICAgICAgICBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgc3RhdGUuc3R5bGVzaGVldHMpO1xuICAgICAgICAgIGlmIChzdGF0ZS51bnN1c3BlbmQpIHtcbiAgICAgICAgICAgIHZhciB1bnN1c3BlbmQgPSBzdGF0ZS51bnN1c3BlbmQ7XG4gICAgICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgICAgICAgdW5zdXNwZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCA2ZTQpO1xuICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBjb21taXQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc3R5bGVzaGVldFRpbWVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBvblVuc3VzcGVuZCgpIHtcbiAgdGhpcy5jb3VudC0tO1xuICBpZiAoMCA9PT0gdGhpcy5jb3VudClcbiAgICBpZiAodGhpcy5zdHlsZXNoZWV0cykgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHModGhpcywgdGhpcy5zdHlsZXNoZWV0cyk7XG4gICAgZWxzZSBpZiAodGhpcy51bnN1c3BlbmQpIHtcbiAgICAgIHZhciB1bnN1c3BlbmQgPSB0aGlzLnVuc3VzcGVuZDtcbiAgICAgIHRoaXMudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgIHVuc3VzcGVuZCgpO1xuICAgIH1cbn1cbnZhciBwcmVjZWRlbmNlc0J5Um9vdCA9IG51bGw7XG5mdW5jdGlvbiBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgcmVzb3VyY2VzKSB7XG4gIHN0YXRlLnN0eWxlc2hlZXRzID0gbnVsbDtcbiAgbnVsbCAhPT0gc3RhdGUudW5zdXNwZW5kICYmXG4gICAgKHN0YXRlLmNvdW50KyssXG4gICAgKHByZWNlZGVuY2VzQnlSb290ID0gbmV3IE1hcCgpKSxcbiAgICByZXNvdXJjZXMuZm9yRWFjaChpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3QsIHN0YXRlKSxcbiAgICAocHJlY2VkZW5jZXNCeVJvb3QgPSBudWxsKSxcbiAgICBvblVuc3VzcGVuZC5jYWxsKHN0YXRlKSk7XG59XG5mdW5jdGlvbiBpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3Qocm9vdCwgcmVzb3VyY2UpIHtcbiAgaWYgKCEocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpKSB7XG4gICAgdmFyIHByZWNlZGVuY2VzID0gcHJlY2VkZW5jZXNCeVJvb3QuZ2V0KHJvb3QpO1xuICAgIGlmIChwcmVjZWRlbmNlcykgdmFyIGxhc3QgPSBwcmVjZWRlbmNlcy5nZXQobnVsbCk7XG4gICAgZWxzZSB7XG4gICAgICBwcmVjZWRlbmNlcyA9IG5ldyBNYXAoKTtcbiAgICAgIHByZWNlZGVuY2VzQnlSb290LnNldChyb290LCBwcmVjZWRlbmNlcyk7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgbm9kZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICBcImxpbmtbZGF0YS1wcmVjZWRlbmNlXSxzdHlsZVtkYXRhLXByZWNlZGVuY2VdXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIGkgPSAwO1xuICAgICAgICBpIDwgbm9kZXMubGVuZ3RoO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJMSU5LXCIgPT09IG5vZGUubm9kZU5hbWUgfHxcbiAgICAgICAgICBcIm5vdCBhbGxcIiAhPT0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJtZWRpYVwiKVxuICAgICAgICApXG4gICAgICAgICAgcHJlY2VkZW5jZXMuc2V0KG5vZGUuZGF0YXNldC5wcmVjZWRlbmNlLCBub2RlKSwgKGxhc3QgPSBub2RlKTtcbiAgICAgIH1cbiAgICAgIGxhc3QgJiYgcHJlY2VkZW5jZXMuc2V0KG51bGwsIGxhc3QpO1xuICAgIH1cbiAgICBub2RlcyA9IHJlc291cmNlLmluc3RhbmNlO1xuICAgIG5vZGUgPSBub2Rlcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIik7XG4gICAgaSA9IHByZWNlZGVuY2VzLmdldChub2RlKSB8fCBsYXN0O1xuICAgIGkgPT09IGxhc3QgJiYgcHJlY2VkZW5jZXMuc2V0KG51bGwsIG5vZGVzKTtcbiAgICBwcmVjZWRlbmNlcy5zZXQobm9kZSwgbm9kZXMpO1xuICAgIHRoaXMuY291bnQrKztcbiAgICBsYXN0ID0gb25VbnN1c3BlbmQuYmluZCh0aGlzKTtcbiAgICBub2Rlcy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsYXN0KTtcbiAgICBub2Rlcy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgbGFzdCk7XG4gICAgaVxuICAgICAgPyBpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGVzLCBpLm5leHRTaWJsaW5nKVxuICAgICAgOiAoKHJvb3QgPSA5ID09PSByb290Lm5vZGVUeXBlID8gcm9vdC5oZWFkIDogcm9vdCksXG4gICAgICAgIHJvb3QuaW5zZXJ0QmVmb3JlKG5vZGVzLCByb290LmZpcnN0Q2hpbGQpKTtcbiAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gIH1cbn1cbnZhciBIb3N0VHJhbnNpdGlvbkNvbnRleHQgPSB7XG4gICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gIFByb3ZpZGVyOiBudWxsLFxuICBDb25zdW1lcjogbnVsbCxcbiAgX2N1cnJlbnRWYWx1ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgX2N1cnJlbnRWYWx1ZTI6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gIF90aHJlYWRDb3VudDogMFxufTtcbmZ1bmN0aW9uIEZpYmVyUm9vdE5vZGUoXG4gIGNvbnRhaW5lckluZm8sXG4gIHRhZyxcbiAgaHlkcmF0ZSxcbiAgaWRlbnRpZmllclByZWZpeCxcbiAgb25VbmNhdWdodEVycm9yLFxuICBvbkNhdWdodEVycm9yLFxuICBvblJlY292ZXJhYmxlRXJyb3IsXG4gIGZvcm1TdGF0ZVxuKSB7XG4gIHRoaXMudGFnID0gMTtcbiAgdGhpcy5jb250YWluZXJJbmZvID0gY29udGFpbmVySW5mbztcbiAgdGhpcy5waW5nQ2FjaGUgPSB0aGlzLmN1cnJlbnQgPSB0aGlzLnBlbmRpbmdDaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMudGltZW91dEhhbmRsZSA9IC0xO1xuICB0aGlzLmNhbGxiYWNrTm9kZSA9XG4gICAgdGhpcy5uZXh0ID1cbiAgICB0aGlzLnBlbmRpbmdDb250ZXh0ID1cbiAgICB0aGlzLmNvbnRleHQgPVxuICAgIHRoaXMuY2FuY2VsUGVuZGluZ0NvbW1pdCA9XG4gICAgICBudWxsO1xuICB0aGlzLmNhbGxiYWNrUHJpb3JpdHkgPSAwO1xuICB0aGlzLmV4cGlyYXRpb25UaW1lcyA9IGNyZWF0ZUxhbmVNYXAoLTEpO1xuICB0aGlzLmVudGFuZ2xlZExhbmVzID1cbiAgICB0aGlzLnNoZWxsU3VzcGVuZENvdW50ZXIgPVxuICAgIHRoaXMuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgPVxuICAgIHRoaXMuZXhwaXJlZExhbmVzID1cbiAgICB0aGlzLndhcm1MYW5lcyA9XG4gICAgdGhpcy5waW5nZWRMYW5lcyA9XG4gICAgdGhpcy5zdXNwZW5kZWRMYW5lcyA9XG4gICAgdGhpcy5wZW5kaW5nTGFuZXMgPVxuICAgICAgMDtcbiAgdGhpcy5lbnRhbmdsZW1lbnRzID0gY3JlYXRlTGFuZU1hcCgwKTtcbiAgdGhpcy5oaWRkZW5VcGRhdGVzID0gY3JlYXRlTGFuZU1hcChudWxsKTtcbiAgdGhpcy5pZGVudGlmaWVyUHJlZml4ID0gaWRlbnRpZmllclByZWZpeDtcbiAgdGhpcy5vblVuY2F1Z2h0RXJyb3IgPSBvblVuY2F1Z2h0RXJyb3I7XG4gIHRoaXMub25DYXVnaHRFcnJvciA9IG9uQ2F1Z2h0RXJyb3I7XG4gIHRoaXMub25SZWNvdmVyYWJsZUVycm9yID0gb25SZWNvdmVyYWJsZUVycm9yO1xuICB0aGlzLnBvb2xlZENhY2hlID0gbnVsbDtcbiAgdGhpcy5wb29sZWRDYWNoZUxhbmVzID0gMDtcbiAgdGhpcy5mb3JtU3RhdGUgPSBmb3JtU3RhdGU7XG4gIHRoaXMuaW5jb21wbGV0ZVRyYW5zaXRpb25zID0gbmV3IE1hcCgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJSb290KFxuICBjb250YWluZXJJbmZvLFxuICB0YWcsXG4gIGh5ZHJhdGUsXG4gIGluaXRpYWxDaGlsZHJlbixcbiAgaHlkcmF0aW9uQ2FsbGJhY2tzLFxuICBpc1N0cmljdE1vZGUsXG4gIGlkZW50aWZpZXJQcmVmaXgsXG4gIG9uVW5jYXVnaHRFcnJvcixcbiAgb25DYXVnaHRFcnJvcixcbiAgb25SZWNvdmVyYWJsZUVycm9yLFxuICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICBmb3JtU3RhdGVcbikge1xuICBjb250YWluZXJJbmZvID0gbmV3IEZpYmVyUm9vdE5vZGUoXG4gICAgY29udGFpbmVySW5mbyxcbiAgICB0YWcsXG4gICAgaHlkcmF0ZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICBmb3JtU3RhdGVcbiAgKTtcbiAgdGFnID0gMTtcbiAgITAgPT09IGlzU3RyaWN0TW9kZSAmJiAodGFnIHw9IDI0KTtcbiAgaXNTdHJpY3RNb2RlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMywgbnVsbCwgbnVsbCwgdGFnKTtcbiAgY29udGFpbmVySW5mby5jdXJyZW50ID0gaXNTdHJpY3RNb2RlO1xuICBpc1N0cmljdE1vZGUuc3RhdGVOb2RlID0gY29udGFpbmVySW5mbztcbiAgdGFnID0gY3JlYXRlQ2FjaGUoKTtcbiAgdGFnLnJlZkNvdW50Kys7XG4gIGNvbnRhaW5lckluZm8ucG9vbGVkQ2FjaGUgPSB0YWc7XG4gIHRhZy5yZWZDb3VudCsrO1xuICBpc1N0cmljdE1vZGUubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICBlbGVtZW50OiBpbml0aWFsQ2hpbGRyZW4sXG4gICAgaXNEZWh5ZHJhdGVkOiBoeWRyYXRlLFxuICAgIGNhY2hlOiB0YWdcbiAgfTtcbiAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKGlzU3RyaWN0TW9kZSk7XG4gIHJldHVybiBjb250YWluZXJJbmZvO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KSB7XG4gIGlmICghcGFyZW50Q29tcG9uZW50KSByZXR1cm4gZW1wdHlDb250ZXh0T2JqZWN0O1xuICBwYXJlbnRDb21wb25lbnQgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIHJldHVybiBwYXJlbnRDb21wb25lbnQ7XG59XG5mdW5jdGlvbiB1cGRhdGVDb250YWluZXJJbXBsKFxuICByb290RmliZXIsXG4gIGxhbmUsXG4gIGVsZW1lbnQsXG4gIGNvbnRhaW5lcixcbiAgcGFyZW50Q29tcG9uZW50LFxuICBjYWxsYmFja1xuKSB7XG4gIHBhcmVudENvbXBvbmVudCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCk7XG4gIG51bGwgPT09IGNvbnRhaW5lci5jb250ZXh0XG4gICAgPyAoY29udGFpbmVyLmNvbnRleHQgPSBwYXJlbnRDb21wb25lbnQpXG4gICAgOiAoY29udGFpbmVyLnBlbmRpbmdDb250ZXh0ID0gcGFyZW50Q29tcG9uZW50KTtcbiAgY29udGFpbmVyID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICBjb250YWluZXIucGF5bG9hZCA9IHsgZWxlbWVudDogZWxlbWVudCB9O1xuICBjYWxsYmFjayA9IHZvaWQgMCA9PT0gY2FsbGJhY2sgPyBudWxsIDogY2FsbGJhY2s7XG4gIG51bGwgIT09IGNhbGxiYWNrICYmIChjb250YWluZXIuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gIGVsZW1lbnQgPSBlbnF1ZXVlVXBkYXRlKHJvb3RGaWJlciwgY29udGFpbmVyLCBsYW5lKTtcbiAgbnVsbCAhPT0gZWxlbWVudCAmJlxuICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIoZWxlbWVudCwgcm9vdEZpYmVyLCBsYW5lKSxcbiAgICBlbnRhbmdsZVRyYW5zaXRpb25zKGVsZW1lbnQsIHJvb3RGaWJlciwgbGFuZSkpO1xufVxuZnVuY3Rpb24gbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSkge1xuICBmaWJlciA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBmaWJlciAmJiBudWxsICE9PSBmaWJlci5kZWh5ZHJhdGVkKSB7XG4gICAgdmFyIGEgPSBmaWJlci5yZXRyeUxhbmU7XG4gICAgZmliZXIucmV0cnlMYW5lID0gMCAhPT0gYSAmJiBhIDwgcmV0cnlMYW5lID8gYSA6IHJldHJ5TGFuZTtcbiAgfVxufVxuZnVuY3Rpb24gbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIHJldHJ5TGFuZSkge1xuICBtYXJrUmV0cnlMYW5lSW1wbChmaWJlciwgcmV0cnlMYW5lKTtcbiAgKGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlKSAmJiBtYXJrUmV0cnlMYW5lSW1wbChmaWJlciwgcmV0cnlMYW5lKTtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uKGZpYmVyKSB7XG4gIGlmICgxMyA9PT0gZmliZXIudGFnKSB7XG4gICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDY3MTA4ODY0KTtcbiAgICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgNjcxMDg4NjQpO1xuICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCA2NzEwODg2NCk7XG4gIH1cbn1cbnZhciBfZW5hYmxlZCA9ICEwO1xuZnVuY3Rpb24gZGlzcGF0Y2hEaXNjcmV0ZUV2ZW50KFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIGNvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMiksXG4gICAgICBkaXNwYXRjaEV2ZW50KGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgY29udGFpbmVyLCBuYXRpdmVFdmVudCk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb24pO1xuICB9XG59XG5mdW5jdGlvbiBkaXNwYXRjaENvbnRpbnVvdXNFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBjb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDgpLFxuICAgICAgZGlzcGF0Y2hFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgaWYgKF9lbmFibGVkKSB7XG4gICAgdmFyIGJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGlmIChudWxsID09PSBibG9ja2VkT24pXG4gICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIHJldHVybl90YXJnZXRJbnN0LFxuICAgICAgICB0YXJnZXRDb250YWluZXJcbiAgICAgICksXG4gICAgICAgIGNsZWFySWZDb250aW51b3VzRXZlbnQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCk7XG4gICAgZWxzZSBpZiAoXG4gICAgICBxdWV1ZUlmQ29udGludW91c0V2ZW50KFxuICAgICAgICBibG9ja2VkT24sXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgKVxuICAgIClcbiAgICAgIG5hdGl2ZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKGNsZWFySWZDb250aW51b3VzRXZlbnQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCksXG4gICAgICBldmVudFN5c3RlbUZsYWdzICYgNCAmJlxuICAgICAgICAtMSA8IGRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cy5pbmRleE9mKGRvbUV2ZW50TmFtZSkpXG4gICAgKSB7XG4gICAgICBmb3IgKDsgbnVsbCAhPT0gYmxvY2tlZE9uOyApIHtcbiAgICAgICAgdmFyIGZpYmVyID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShibG9ja2VkT24pO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmliZXIpXG4gICAgICAgICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgZmliZXIgPSBmaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGlmIChmaWJlci5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMoZmliZXIucGVuZGluZ0xhbmVzKTtcbiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gbGFuZXMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByb290ID0gZmliZXI7XG4gICAgICAgICAgICAgICAgICByb290LnBlbmRpbmdMYW5lcyB8PSAyO1xuICAgICAgICAgICAgICAgICAgZm9yIChyb290LmVudGFuZ2xlZExhbmVzIHw9IDI7IGxhbmVzOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSAxIDw8ICgzMSAtIGNsejMyKGxhbmVzKSk7XG4gICAgICAgICAgICAgICAgICAgIHJvb3QuZW50YW5nbGVtZW50c1sxXSB8PSBsYW5lO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcyAmPSB+bGFuZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChmaWJlcik7XG4gICAgICAgICAgICAgICAgICAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpICYmXG4gICAgICAgICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IG5vdygpICsgNTAwKSxcbiAgICAgICAgICAgICAgICAgICAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoMCwgITEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAocm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgMikpLFxuICAgICAgICAgICAgICAgIG51bGwgIT09IHJvb3QgJiYgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSxcbiAgICAgICAgICAgICAgICBmbHVzaFN5bmNXb3JrJDEoKSxcbiAgICAgICAgICAgICAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgMik7XG4gICAgICAgICAgfVxuICAgICAgICBmaWJlciA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgICAgICBudWxsID09PSBmaWJlciAmJlxuICAgICAgICAgIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgIHJldHVybl90YXJnZXRJbnN0LFxuICAgICAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgaWYgKGZpYmVyID09PSBibG9ja2VkT24pIGJyZWFrO1xuICAgICAgICBibG9ja2VkT24gPSBmaWJlcjtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IGJsb2NrZWRPbiAmJiBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2VcbiAgICAgIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpO1xuICByZXR1cm4gZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQobmF0aXZlRXZlbnQpO1xufVxudmFyIHJldHVybl90YXJnZXRJbnN0ID0gbnVsbDtcbmZ1bmN0aW9uIGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KHRhcmdldE5vZGUpIHtcbiAgcmV0dXJuX3RhcmdldEluc3QgPSBudWxsO1xuICB0YXJnZXROb2RlID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUodGFyZ2V0Tm9kZSk7XG4gIGlmIChudWxsICE9PSB0YXJnZXROb2RlKSB7XG4gICAgdmFyIG5lYXJlc3RNb3VudGVkID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcih0YXJnZXROb2RlKTtcbiAgICBpZiAobnVsbCA9PT0gbmVhcmVzdE1vdW50ZWQpIHRhcmdldE5vZGUgPSBudWxsO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIHRhZyA9IG5lYXJlc3RNb3VudGVkLnRhZztcbiAgICAgIGlmICgxMyA9PT0gdGFnKSB7XG4gICAgICAgIHRhcmdldE5vZGUgPSBnZXRTdXNwZW5zZUluc3RhbmNlRnJvbUZpYmVyKG5lYXJlc3RNb3VudGVkKTtcbiAgICAgICAgaWYgKG51bGwgIT09IHRhcmdldE5vZGUpIHJldHVybiB0YXJnZXROb2RlO1xuICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoMyA9PT0gdGFnKSB7XG4gICAgICAgIGlmIChuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClcbiAgICAgICAgICByZXR1cm4gMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnXG4gICAgICAgICAgICA/IG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHRhcmdldE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIG5lYXJlc3RNb3VudGVkICE9PSB0YXJnZXROb2RlICYmICh0YXJnZXROb2RlID0gbnVsbCk7XG4gICAgfVxuICB9XG4gIHJldHVybl90YXJnZXRJbnN0ID0gdGFyZ2V0Tm9kZTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXRFdmVudFByaW9yaXR5KGRvbUV2ZW50TmFtZSkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJiZWZvcmV0b2dnbGVcIjpcbiAgICBjYXNlIFwiY2FuY2VsXCI6XG4gICAgY2FzZSBcImNsaWNrXCI6XG4gICAgY2FzZSBcImNsb3NlXCI6XG4gICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgY2FzZSBcImNvcHlcIjpcbiAgICBjYXNlIFwiY3V0XCI6XG4gICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgY2FzZSBcImRyYWdlbmRcIjpcbiAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgY2FzZSBcImRyb3BcIjpcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgIGNhc2UgXCJpbnZhbGlkXCI6XG4gICAgY2FzZSBcImtleWRvd25cIjpcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICBjYXNlIFwicGFzdGVcIjpcbiAgICBjYXNlIFwicGF1c2VcIjpcbiAgICBjYXNlIFwicGxheVwiOlxuICAgIGNhc2UgXCJwb2ludGVyY2FuY2VsXCI6XG4gICAgY2FzZSBcInBvaW50ZXJkb3duXCI6XG4gICAgY2FzZSBcInBvaW50ZXJ1cFwiOlxuICAgIGNhc2UgXCJyYXRlY2hhbmdlXCI6XG4gICAgY2FzZSBcInJlc2V0XCI6XG4gICAgY2FzZSBcInJlc2l6ZVwiOlxuICAgIGNhc2UgXCJzZWVrZWRcIjpcbiAgICBjYXNlIFwic3VibWl0XCI6XG4gICAgY2FzZSBcInRvZ2dsZVwiOlxuICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgIGNhc2UgXCJ0b3VjaHN0YXJ0XCI6XG4gICAgY2FzZSBcInZvbHVtZWNoYW5nZVwiOlxuICAgIGNhc2UgXCJjaGFuZ2VcIjpcbiAgICBjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6XG4gICAgY2FzZSBcInRleHRJbnB1dFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XG4gICAgY2FzZSBcImJlZm9yZWJsdXJcIjpcbiAgICBjYXNlIFwiYWZ0ZXJibHVyXCI6XG4gICAgY2FzZSBcImJlZm9yZWlucHV0XCI6XG4gICAgY2FzZSBcImJsdXJcIjpcbiAgICBjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOlxuICAgIGNhc2UgXCJmb2N1c1wiOlxuICAgIGNhc2UgXCJoYXNoY2hhbmdlXCI6XG4gICAgY2FzZSBcInBvcHN0YXRlXCI6XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgIGNhc2UgXCJzZWxlY3RzdGFydFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSBcImRyYWdcIjpcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgY2FzZSBcImRyYWdleGl0XCI6XG4gICAgY2FzZSBcImRyYWdsZWF2ZVwiOlxuICAgIGNhc2UgXCJkcmFnb3ZlclwiOlxuICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgY2FzZSBcInBvaW50ZXJtb3ZlXCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdXRcIjpcbiAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgY2FzZSBcInRvdWNobW92ZVwiOlxuICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgIGNhc2UgXCJtb3VzZWVudGVyXCI6XG4gICAgY2FzZSBcIm1vdXNlbGVhdmVcIjpcbiAgICBjYXNlIFwicG9pbnRlcmVudGVyXCI6XG4gICAgY2FzZSBcInBvaW50ZXJsZWF2ZVwiOlxuICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgIHN3aXRjaCAoZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwoKSkge1xuICAgICAgICBjYXNlIEltbWVkaWF0ZVByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICBjYXNlIFVzZXJCbG9ja2luZ1ByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiA4O1xuICAgICAgICBjYXNlIE5vcm1hbFByaW9yaXR5JDE6XG4gICAgICAgIGNhc2UgTG93UHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgICBjYXNlIElkbGVQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMjY4NDM1NDU2O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDMyO1xuICB9XG59XG52YXIgaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCA9ICExLFxuICBxdWV1ZWRGb2N1cyA9IG51bGwsXG4gIHF1ZXVlZERyYWcgPSBudWxsLFxuICBxdWV1ZWRNb3VzZSA9IG51bGwsXG4gIHF1ZXVlZFBvaW50ZXJzID0gbmV3IE1hcCgpLFxuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMgPSBuZXcgTWFwKCksXG4gIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cyA9IFtdLFxuICBkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMgPVxuICAgIFwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0XCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICk7XG5mdW5jdGlvbiBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgcXVldWVkRm9jdXMgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgIHF1ZXVlZERyYWcgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgcXVldWVkTW91c2UgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdXRcIjpcbiAgICAgIHF1ZXVlZFBvaW50ZXJzLmRlbGV0ZShuYXRpdmVFdmVudC5wb2ludGVySWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgY2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmRlbGV0ZShuYXRpdmVFdmVudC5wb2ludGVySWQpO1xuICB9XG59XG5mdW5jdGlvbiBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICBleGlzdGluZ1F1ZXVlZEV2ZW50LFxuICBibG9ja2VkT24sXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIGlmIChcbiAgICBudWxsID09PSBleGlzdGluZ1F1ZXVlZEV2ZW50IHx8XG4gICAgZXhpc3RpbmdRdWV1ZWRFdmVudC5uYXRpdmVFdmVudCAhPT0gbmF0aXZlRXZlbnRcbiAgKVxuICAgIHJldHVybiAoXG4gICAgICAoZXhpc3RpbmdRdWV1ZWRFdmVudCA9IHtcbiAgICAgICAgYmxvY2tlZE9uOiBibG9ja2VkT24sXG4gICAgICAgIGRvbUV2ZW50TmFtZTogZG9tRXZlbnROYW1lLFxuICAgICAgICBldmVudFN5c3RlbUZsYWdzOiBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICBuYXRpdmVFdmVudDogbmF0aXZlRXZlbnQsXG4gICAgICAgIHRhcmdldENvbnRhaW5lcnM6IFt0YXJnZXRDb250YWluZXJdXG4gICAgICB9KSxcbiAgICAgIG51bGwgIT09IGJsb2NrZWRPbiAmJlxuICAgICAgICAoKGJsb2NrZWRPbiA9IGdldEluc3RhbmNlRnJvbU5vZGUoYmxvY2tlZE9uKSksXG4gICAgICAgIG51bGwgIT09IGJsb2NrZWRPbiAmJiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihibG9ja2VkT24pKSxcbiAgICAgIGV4aXN0aW5nUXVldWVkRXZlbnRcbiAgICApO1xuICBleGlzdGluZ1F1ZXVlZEV2ZW50LmV2ZW50U3lzdGVtRmxhZ3MgfD0gZXZlbnRTeXN0ZW1GbGFncztcbiAgYmxvY2tlZE9uID0gZXhpc3RpbmdRdWV1ZWRFdmVudC50YXJnZXRDb250YWluZXJzO1xuICBudWxsICE9PSB0YXJnZXRDb250YWluZXIgJiZcbiAgICAtMSA9PT0gYmxvY2tlZE9uLmluZGV4T2YodGFyZ2V0Q29udGFpbmVyKSAmJlxuICAgIGJsb2NrZWRPbi5wdXNoKHRhcmdldENvbnRhaW5lcik7XG4gIHJldHVybiBleGlzdGluZ1F1ZXVlZEV2ZW50O1xufVxuZnVuY3Rpb24gcXVldWVJZkNvbnRpbnVvdXNFdmVudChcbiAgYmxvY2tlZE9uLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkRm9jdXMgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZEZvY3VzLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChxdWV1ZWREcmFnID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWREcmFnLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChxdWV1ZWRNb3VzZSA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkTW91c2UsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgICB2YXIgcG9pbnRlcklkID0gbmF0aXZlRXZlbnQucG9pbnRlcklkO1xuICAgICAgcXVldWVkUG9pbnRlcnMuc2V0KFxuICAgICAgICBwb2ludGVySWQsXG4gICAgICAgIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkUG9pbnRlcnMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocG9pbnRlcklkID0gbmF0aXZlRXZlbnQucG9pbnRlcklkKSxcbiAgICAgICAgcXVldWVkUG9pbnRlckNhcHR1cmVzLnNldChcbiAgICAgICAgICBwb2ludGVySWQsXG4gICAgICAgICAgYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5nZXQocG9pbnRlcklkKSB8fCBudWxsLFxuICAgICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQocXVldWVkVGFyZ2V0KSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocXVldWVkVGFyZ2V0LnRhcmdldCk7XG4gIGlmIChudWxsICE9PSB0YXJnZXRJbnN0KSB7XG4gICAgdmFyIG5lYXJlc3RNb3VudGVkID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcih0YXJnZXRJbnN0KTtcbiAgICBpZiAobnVsbCAhPT0gbmVhcmVzdE1vdW50ZWQpXG4gICAgICBpZiAoKCh0YXJnZXRJbnN0ID0gbmVhcmVzdE1vdW50ZWQudGFnKSwgMTMgPT09IHRhcmdldEluc3QpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHRhcmdldEluc3QgPSBnZXRTdXNwZW5zZUluc3RhbmNlRnJvbUZpYmVyKG5lYXJlc3RNb3VudGVkKSksXG4gICAgICAgICAgbnVsbCAhPT0gdGFyZ2V0SW5zdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IHRhcmdldEluc3Q7XG4gICAgICAgICAgcnVuV2l0aFByaW9yaXR5KHF1ZXVlZFRhcmdldC5wcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKDEzID09PSBuZWFyZXN0TW91bnRlZC50YWcpIHtcbiAgICAgICAgICAgICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgICAgICAgICAgICBsYW5lID0gZ2V0QnVtcGVkTGFuZUZvckh5ZHJhdGlvbkJ5TGFuZShsYW5lKTtcbiAgICAgICAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUobmVhcmVzdE1vdW50ZWQsIGxhbmUpO1xuICAgICAgICAgICAgICBudWxsICE9PSByb290ICYmXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQobmVhcmVzdE1vdW50ZWQsIGxhbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgMyA9PT0gdGFyZ2V0SW5zdCAmJlxuICAgICAgICBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZFxuICAgICAgKSB7XG4gICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPVxuICAgICAgICAgIDMgPT09IG5lYXJlc3RNb3VudGVkLnRhZ1xuICAgICAgICAgICAgPyBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGw7XG59XG5mdW5jdGlvbiBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZEV2ZW50KSB7XG4gIGlmIChudWxsICE9PSBxdWV1ZWRFdmVudC5ibG9ja2VkT24pIHJldHVybiAhMTtcbiAgZm9yIChcbiAgICB2YXIgdGFyZ2V0Q29udGFpbmVycyA9IHF1ZXVlZEV2ZW50LnRhcmdldENvbnRhaW5lcnM7XG4gICAgMCA8IHRhcmdldENvbnRhaW5lcnMubGVuZ3RoO1xuXG4gICkge1xuICAgIHZhciBuZXh0QmxvY2tlZE9uID0gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChxdWV1ZWRFdmVudC5uYXRpdmVFdmVudCk7XG4gICAgaWYgKG51bGwgPT09IG5leHRCbG9ja2VkT24pIHtcbiAgICAgIG5leHRCbG9ja2VkT24gPSBxdWV1ZWRFdmVudC5uYXRpdmVFdmVudDtcbiAgICAgIHZhciBuYXRpdmVFdmVudENsb25lID0gbmV3IG5leHRCbG9ja2VkT24uY29uc3RydWN0b3IoXG4gICAgICAgIG5leHRCbG9ja2VkT24udHlwZSxcbiAgICAgICAgbmV4dEJsb2NrZWRPblxuICAgICAgKTtcbiAgICAgIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG5hdGl2ZUV2ZW50Q2xvbmU7XG4gICAgICBuZXh0QmxvY2tlZE9uLnRhcmdldC5kaXNwYXRjaEV2ZW50KG5hdGl2ZUV2ZW50Q2xvbmUpO1xuICAgICAgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gbnVsbDtcbiAgICB9IGVsc2VcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh0YXJnZXRDb250YWluZXJzID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShuZXh0QmxvY2tlZE9uKSksXG4gICAgICAgIG51bGwgIT09IHRhcmdldENvbnRhaW5lcnMgJiZcbiAgICAgICAgICBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbih0YXJnZXRDb250YWluZXJzKSxcbiAgICAgICAgKHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9IG5leHRCbG9ja2VkT24pLFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICB0YXJnZXRDb250YWluZXJzLnNoaWZ0KCk7XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKHF1ZXVlZEV2ZW50LCBrZXksIG1hcCkge1xuICBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZEV2ZW50KSAmJiBtYXAuZGVsZXRlKGtleSk7XG59XG5mdW5jdGlvbiByZXBsYXlVbmJsb2NrZWRFdmVudHMoKSB7XG4gIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMTtcbiAgbnVsbCAhPT0gcXVldWVkRm9jdXMgJiZcbiAgICBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZEZvY3VzKSAmJlxuICAgIChxdWV1ZWRGb2N1cyA9IG51bGwpO1xuICBudWxsICE9PSBxdWV1ZWREcmFnICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWREcmFnKSAmJlxuICAgIChxdWV1ZWREcmFnID0gbnVsbCk7XG4gIG51bGwgIT09IHF1ZXVlZE1vdXNlICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRNb3VzZSkgJiZcbiAgICAocXVldWVkTW91c2UgPSBudWxsKTtcbiAgcXVldWVkUG9pbnRlcnMuZm9yRWFjaChhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXApO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaChhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXApO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEV2ZW50LCB1bmJsb2NrZWQpIHtcbiAgcXVldWVkRXZlbnQuYmxvY2tlZE9uID09PSB1bmJsb2NrZWQgJiZcbiAgICAoKHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9IG51bGwpLFxuICAgIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgfHxcbiAgICAgICgoaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCA9ICEwKSxcbiAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKFxuICAgICAgICBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gICAgICAgIHJlcGxheVVuYmxvY2tlZEV2ZW50c1xuICAgICAgKSkpO1xufVxudmFyIGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9IG51bGw7XG5mdW5jdGlvbiBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoZm9ybVJlcGxheWluZ1F1ZXVlKSB7XG4gIGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSAhPT0gZm9ybVJlcGxheWluZ1F1ZXVlICYmXG4gICAgKChsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBmb3JtUmVwbGF5aW5nUXVldWUpLFxuICAgIFNjaGVkdWxlci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKFxuICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPT09IGZvcm1SZXBsYXlpbmdRdWV1ZSAmJlxuICAgICAgICAgIChsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBudWxsKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JtUmVwbGF5aW5nUXVldWUubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICB2YXIgZm9ybSA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpXSxcbiAgICAgICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uID0gZm9ybVJlcGxheWluZ1F1ZXVlW2kgKyAxXSxcbiAgICAgICAgICAgIGZvcm1EYXRhID0gZm9ybVJlcGxheWluZ1F1ZXVlW2kgKyAyXTtcbiAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2Ygc3VibWl0dGVyT3JBY3Rpb24pXG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQoc3VibWl0dGVyT3JBY3Rpb24gfHwgZm9ybSkpXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZWxzZSBicmVhaztcbiAgICAgICAgICB2YXIgZm9ybUluc3QgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGZvcm0pO1xuICAgICAgICAgIG51bGwgIT09IGZvcm1JbnN0ICYmXG4gICAgICAgICAgICAoZm9ybVJlcGxheWluZ1F1ZXVlLnNwbGljZShpLCAzKSxcbiAgICAgICAgICAgIChpIC09IDMpLFxuICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgZm9ybUluc3QsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nOiAhMCxcbiAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGZvcm0ubWV0aG9kLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogc3VibWl0dGVyT3JBY3Rpb25cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24sXG4gICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICkpO1xufVxuZnVuY3Rpb24gcmV0cnlJZkJsb2NrZWRPbih1bmJsb2NrZWQpIHtcbiAgZnVuY3Rpb24gdW5ibG9jayhxdWV1ZWRFdmVudCkge1xuICAgIHJldHVybiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRXZlbnQsIHVuYmxvY2tlZCk7XG4gIH1cbiAgbnVsbCAhPT0gcXVldWVkRm9jdXMgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEZvY3VzLCB1bmJsb2NrZWQpO1xuICBudWxsICE9PSBxdWV1ZWREcmFnICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWREcmFnLCB1bmJsb2NrZWQpO1xuICBudWxsICE9PSBxdWV1ZWRNb3VzZSAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkTW91c2UsIHVuYmxvY2tlZCk7XG4gIHF1ZXVlZFBvaW50ZXJzLmZvckVhY2godW5ibG9jayk7XG4gIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5mb3JFYWNoKHVuYmxvY2spO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBxdWV1ZWRUYXJnZXQgPSBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHNbaV07XG4gICAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkICYmIChxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID0gbnVsbCk7XG4gIH1cbiAgZm9yIChcbiAgICA7XG4gICAgMCA8IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5sZW5ndGggJiZcbiAgICAoKGkgPSBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHNbMF0pLCBudWxsID09PSBpLmJsb2NrZWRPbik7XG5cbiAgKVxuICAgIGF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldChpKSxcbiAgICAgIG51bGwgPT09IGkuYmxvY2tlZE9uICYmIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5zaGlmdCgpO1xuICBpID0gKHVuYmxvY2tlZC5vd25lckRvY3VtZW50IHx8IHVuYmxvY2tlZCkuJCRyZWFjdEZvcm1SZXBsYXk7XG4gIGlmIChudWxsICE9IGkpXG4gICAgZm9yIChxdWV1ZWRUYXJnZXQgPSAwOyBxdWV1ZWRUYXJnZXQgPCBpLmxlbmd0aDsgcXVldWVkVGFyZ2V0ICs9IDMpIHtcbiAgICAgIHZhciBmb3JtID0gaVtxdWV1ZWRUYXJnZXRdLFxuICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbiA9IGlbcXVldWVkVGFyZ2V0ICsgMV0sXG4gICAgICAgIGZvcm1Qcm9wcyA9IGZvcm1baW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzdWJtaXR0ZXJPckFjdGlvbilcbiAgICAgICAgZm9ybVByb3BzIHx8IHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChpKTtcbiAgICAgIGVsc2UgaWYgKGZvcm1Qcm9wcykge1xuICAgICAgICB2YXIgYWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHN1Ym1pdHRlck9yQWN0aW9uICYmIHN1Ym1pdHRlck9yQWN0aW9uLmhhc0F0dHJpYnV0ZShcImZvcm1BY3Rpb25cIikpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKChmb3JtID0gc3VibWl0dGVyT3JBY3Rpb24pLFxuICAgICAgICAgICAgKGZvcm1Qcm9wcyA9IHN1Ym1pdHRlck9yQWN0aW9uW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGFjdGlvbiA9IGZvcm1Qcm9wcy5mb3JtQWN0aW9uO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KGZvcm0pKSBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2UgYWN0aW9uID0gZm9ybVByb3BzLmFjdGlvbjtcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uXG4gICAgICAgICAgPyAoaVtxdWV1ZWRUYXJnZXQgKyAxXSA9IGFjdGlvbilcbiAgICAgICAgICA6IChpLnNwbGljZShxdWV1ZWRUYXJnZXQsIDMpLCAocXVldWVkVGFyZ2V0IC09IDMpKTtcbiAgICAgICAgc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGkpO1xuICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIFJlYWN0RE9NUm9vdChpbnRlcm5hbFJvb3QpIHtcbiAgdGhpcy5faW50ZXJuYWxSb290ID0gaW50ZXJuYWxSb290O1xufVxuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS5yZW5kZXIgPSBSZWFjdERPTVJvb3QucHJvdG90eXBlLnJlbmRlciA9XG4gIGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICAgIGlmIChudWxsID09PSByb290KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQwOSkpO1xuICAgIHZhciBjdXJyZW50ID0gcm9vdC5jdXJyZW50LFxuICAgICAgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gICAgdXBkYXRlQ29udGFpbmVySW1wbChjdXJyZW50LCBsYW5lLCBjaGlsZHJlbiwgcm9vdCwgbnVsbCwgbnVsbCk7XG4gIH07XG5SZWFjdERPTUh5ZHJhdGlvblJvb3QucHJvdG90eXBlLnVubW91bnQgPSBSZWFjdERPTVJvb3QucHJvdG90eXBlLnVubW91bnQgPVxuICBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gICAgaWYgKG51bGwgIT09IHJvb3QpIHtcbiAgICAgIHRoaXMuX2ludGVybmFsUm9vdCA9IG51bGw7XG4gICAgICB2YXIgY29udGFpbmVyID0gcm9vdC5jb250YWluZXJJbmZvO1xuICAgICAgdXBkYXRlQ29udGFpbmVySW1wbChyb290LmN1cnJlbnQsIDIsIG51bGwsIHJvb3QsIG51bGwsIG51bGwpO1xuICAgICAgZmx1c2hTeW5jV29yayQxKCk7XG4gICAgICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBudWxsO1xuICAgIH1cbiAgfTtcbmZ1bmN0aW9uIFJlYWN0RE9NSHlkcmF0aW9uUm9vdChpbnRlcm5hbFJvb3QpIHtcbiAgdGhpcy5faW50ZXJuYWxSb290ID0gaW50ZXJuYWxSb290O1xufVxuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCkge1xuICAgIHZhciB1cGRhdGVQcmlvcml0eSA9IHJlc29sdmVVcGRhdGVQcmlvcml0eSgpO1xuICAgIHRhcmdldCA9IHsgYmxvY2tlZE9uOiBudWxsLCB0YXJnZXQ6IHRhcmdldCwgcHJpb3JpdHk6IHVwZGF0ZVByaW9yaXR5IH07XG4gICAgZm9yIChcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoICYmXG4gICAgICAwICE9PSB1cGRhdGVQcmlvcml0eSAmJlxuICAgICAgdXBkYXRlUHJpb3JpdHkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHNbaV0ucHJpb3JpdHk7XG4gICAgICBpKytcbiAgICApO1xuICAgIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5zcGxpY2UoaSwgMCwgdGFyZ2V0KTtcbiAgICAwID09PSBpICYmIGF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldCh0YXJnZXQpO1xuICB9XG59O1xudmFyIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTc4NSA9IFJlYWN0LnZlcnNpb247XG5pZiAoXG4gIFwiMTkuMS4xXCIgIT09XG4gIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTc4NVxuKVxuICB0aHJvdyBFcnJvcihcbiAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKFxuICAgICAgNTI3LFxuICAgICAgaXNvbW9ycGhpY1JlYWN0UGFja2FnZVZlcnNpb24kanNjb21wJGlubGluZV8xNzg1LFxuICAgICAgXCIxOS4xLjFcIlxuICAgIClcbiAgKTtcblJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmZpbmRET01Ob2RlID0gZnVuY3Rpb24gKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICB2YXIgZmliZXIgPSBjb21wb25lbnRPckVsZW1lbnQuX3JlYWN0SW50ZXJuYWxzO1xuICBpZiAodm9pZCAwID09PSBmaWJlcikge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyKVxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICBjb21wb25lbnRPckVsZW1lbnQgPSBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpLmpvaW4oXCIsXCIpO1xuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjY4LCBjb21wb25lbnRPckVsZW1lbnQpKTtcbiAgfVxuICBjb21wb25lbnRPckVsZW1lbnQgPSBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChmaWJlcik7XG4gIGNvbXBvbmVudE9yRWxlbWVudCA9XG4gICAgbnVsbCAhPT0gY29tcG9uZW50T3JFbGVtZW50XG4gICAgICA/IGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChjb21wb25lbnRPckVsZW1lbnQpXG4gICAgICA6IG51bGw7XG4gIGNvbXBvbmVudE9yRWxlbWVudCA9XG4gICAgbnVsbCA9PT0gY29tcG9uZW50T3JFbGVtZW50ID8gbnVsbCA6IGNvbXBvbmVudE9yRWxlbWVudC5zdGF0ZU5vZGU7XG4gIHJldHVybiBjb21wb25lbnRPckVsZW1lbnQ7XG59O1xudmFyIGludGVybmFscyRqc2NvbXAkaW5saW5lXzIyNTYgPSB7XG4gIGJ1bmRsZVR5cGU6IDAsXG4gIHZlcnNpb246IFwiMTkuMS4xXCIsXG4gIHJlbmRlcmVyUGFja2FnZU5hbWU6IFwicmVhY3QtZG9tXCIsXG4gIGN1cnJlbnREaXNwYXRjaGVyUmVmOiBSZWFjdFNoYXJlZEludGVybmFscyxcbiAgcmVjb25jaWxlclZlcnNpb246IFwiMTkuMS4xXCJcbn07XG5pZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXykge1xuICB2YXIgaG9vayRqc2NvbXAkaW5saW5lXzIyNTcgPSBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG4gIGlmIChcbiAgICAhaG9vayRqc2NvbXAkaW5saW5lXzIyNTcuaXNEaXNhYmxlZCAmJlxuICAgIGhvb2skanNjb21wJGlubGluZV8yMjU3LnN1cHBvcnRzRmliZXJcbiAgKVxuICAgIHRyeSB7XG4gICAgICAocmVuZGVyZXJJRCA9IGhvb2skanNjb21wJGlubGluZV8yMjU3LmluamVjdChcbiAgICAgICAgaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjI1NlxuICAgICAgKSksXG4gICAgICAgIChpbmplY3RlZEhvb2sgPSBob29rJGpzY29tcCRpbmxpbmVfMjI1Nyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxuZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOTkpKTtcbiAgdmFyIGlzU3RyaWN0TW9kZSA9ICExLFxuICAgIGlkZW50aWZpZXJQcmVmaXggPSBcIlwiLFxuICAgIG9uVW5jYXVnaHRFcnJvciA9IGRlZmF1bHRPblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvciA9IGRlZmF1bHRPbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvciA9IGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IsXG4gICAgdHJhbnNpdGlvbkNhbGxiYWNrcyA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpKTtcbiAgb3B0aW9ucyA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMSxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgbnVsbFxuICApO1xuICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBvcHRpb25zLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKGNvbnRhaW5lcik7XG4gIHJldHVybiBuZXcgUmVhY3RET01Sb290KG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsLFxuICAgIGZvcm1TdGF0ZSA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5mb3JtU3RhdGUgJiYgKGZvcm1TdGF0ZSA9IG9wdGlvbnMuZm9ybVN0YXRlKSk7XG4gIGluaXRpYWxDaGlsZHJlbiA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMCxcbiAgICBpbml0aWFsQ2hpbGRyZW4sXG4gICAgbnVsbCAhPSBvcHRpb25zID8gb3B0aW9ucyA6IG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIGluaXRpYWxDaGlsZHJlbi5jb250ZXh0ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUobnVsbCk7XG4gIG9wdGlvbnMgPSBpbml0aWFsQ2hpbGRyZW4uY3VycmVudDtcbiAgaXNTdHJpY3RNb2RlID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgaXNTdHJpY3RNb2RlID0gZ2V0QnVtcGVkTGFuZUZvckh5ZHJhdGlvbkJ5TGFuZShpc1N0cmljdE1vZGUpO1xuICBpZGVudGlmaWVyUHJlZml4ID0gY3JlYXRlVXBkYXRlKGlzU3RyaWN0TW9kZSk7XG4gIGlkZW50aWZpZXJQcmVmaXguY2FsbGJhY2sgPSBudWxsO1xuICBlbnF1ZXVlVXBkYXRlKG9wdGlvbnMsIGlkZW50aWZpZXJQcmVmaXgsIGlzU3RyaWN0TW9kZSk7XG4gIG9wdGlvbnMgPSBpc1N0cmljdE1vZGU7XG4gIGluaXRpYWxDaGlsZHJlbi5jdXJyZW50LmxhbmVzID0gb3B0aW9ucztcbiAgbWFya1Jvb3RVcGRhdGVkJDEoaW5pdGlhbENoaWxkcmVuLCBvcHRpb25zKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluaXRpYWxDaGlsZHJlbik7XG4gIGNvbnRhaW5lcltpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IGluaXRpYWxDaGlsZHJlbi5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhjb250YWluZXIpO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NSHlkcmF0aW9uUm9vdChpbml0aWFsQ2hpbGRyZW4pO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMS4xXCI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1jbGllbnQuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuXG5pbXBvcnQgUm9vdCBmcm9tICcuL3Jvb3QnO1xuaW1wb3J0IFBhdGllbnRzIGZyb20gJy4vcGF0aWVudHMnO1xuXG5pbXBvcnQgJy4vY2xpZW50LmNzcyc7XG5pbXBvcnQgTWVkaWNhdGlvbnMgZnJvbSAnLi9tZWRpY2F0aW9ucyc7XG5pbXBvcnQgUGF0aWVudCBmcm9tICcuL3BhdGllbnQnO1xuXG5jb25zdCBOb3RGb3VuZCA9ICgpID0+IDxoMT5Ob3QgRm91bmQ8L2gxPjtcblxuY29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC8oU3RhZ2V8UHJvKVxcLz8vLCAnLycpO1xuLy8gY29uc3Qgcm9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKSBhcyBIVE1MRWxlbWVudDtcbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJykgYXMgSFRNTEVsZW1lbnQ7XG5cbmNvbnN0IHBhZ2UgPSAoPD5cbiAgICA8aGVhZGVyPlxuICAgICAgICA8bmF2PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzc05hbWU9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWRcIj5ob21lPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+TWVkaWNhdGlvbiBNYW5hZ2VyPC9zdHJvbmc+PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzTmFtZT1cInNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiPmhlbHA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgPC9uYXY+XG4gICAgPC9oZWFkZXI+XG4gICAgPG1haW4+XG4gICAgICAgIHtcbiAgICAgICAgICAgIHBhdGggPT09ICcvJyA/IDxSb290IC8+IDpcbiAgICAgICAgICAgIHBhdGggPT09ICcvcGF0aWVudCcgPyA8UGF0aWVudCAvPiA6XG4gICAgICAgICAgICBwYXRoID09PSAnL3BhdGllbnRzJyA/IDxQYXRpZW50cyAvPiA6XG4gICAgICAgICAgICBwYXRoID09PSAnL21lZGljYXRpb25zJyA/IDxNZWRpY2F0aW9ucyAvPiA6XG4gICAgICAgICAgICA8Tm90Rm91bmQgLz5cbiAgICAgICAgfVxuICAgIDwvbWFpbj5cbiAgICA8Zm9vdGVyPjwvZm9vdGVyPlxuPC8+KTtcblxuY3JlYXRlUm9vdChyb290KS5yZW5kZXIocGFnZSk7IiwgImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiA8PlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDxoMT5EYXNoYm9hcmQ8L2gxPlxuICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZ3JpZFwiPlxuXG4gICAgICAgICAgICA8YXJ0aWNsZT5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiL21lZGljYXRpb25zXCIgY2xhc3NOYW1lPVwiY29udHJhc3RcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiPm1lZGljYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPk1lZGljYXRpb25zPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvYXJ0aWNsZT5cblxuICAgICAgICAgICAgPGFydGljbGU+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9wYXRpZW50c1wiIGNsYXNzTmFtZT1cImNvbnRyYXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWRcIj5ncm91cHM8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlBhdGllbnRzPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvYXJ0aWNsZT5cblxuICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICA8Lz47XG59OyIsICJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBhdGllbnQgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICBjb25zdCBbIHBhdGllbnRzLCBzZXRQYXRpZW50cyBdID0gdXNlU3RhdGU8QXJyYXk8UGF0aWVudD4+KFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGZldGNoKCcvYXBpL3BhdGllbnRzJywgeyBtZXRob2Q6ICdHRVQnIH0pXG4gICAgICAgICAgICAudGhlbihyID0+IHIuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oZCA9PiBzZXRQYXRpZW50cyhkKSk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIDw+XG5cbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8aDE+UGF0aWVudHM8L2gxPlxuICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAge3BhdGllbnRzLm1hcChwYXRpZW50ID0+IDw+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJncmlkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkXCI+YWNjb3VudF9jaXJjbGU8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSByb2xlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwib3V0bGluZVwiIGhyZWY9e2AvcGF0aWVudD9pZD0ke3BhdGllbnQuaWR9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3BhdGllbnQuZmlyc3ROYW1lfSB7cGF0aWVudC5sYXN0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8Lz4pfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgPC8+O1xufTsiLCAiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZWRpY2F0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG5cbiAgICBjb25zdCBbIG1lZGljYXRpb25zLCBzZXRNZWRpY2F0aW9ucyBdID0gdXNlU3RhdGU8QXJyYXk8TWVkaWNhdGlvbj4+KFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGZldGNoKCcvYXBpL21lZGljYXRpb25zJywgeyBtZXRob2Q6ICdHRVQnIH0pXG4gICAgICAgICAgICAudGhlbihyID0+IHIuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oc2V0TWVkaWNhdGlvbnMpO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiA8PlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDxoMT5NZWRpY2F0aW9uczwvaDE+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIHttZWRpY2F0aW9ucy5tYXAobSA9PiA8PlxuICAgICAgICAgICAgICAgIDxkZXRhaWxzPlxuICAgICAgICAgICAgICAgICAgICA8c3VtbWFyeT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnttLnRpdGxlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zdW1tYXJ5PlxuICAgICAgICAgICAgICAgICAgICA8cD4uLi48L3A+XG4gICAgICAgICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgPC8+KX1cbiAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgPC8+O1xufTsiLCAiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQYXRpZW50IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgY29uc3QgWyBwYXRpZW50LCBzZXRQYXRpZW50IF0gPSB1c2VTdGF0ZTxQYXRpZW50Pih7fSBhcyBhbnkpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgeyBpZCB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKG5ldyBVUkxTZWFyY2hQYXJhbXMobG9jYXRpb24uc2VhcmNoKSk7XG5cbiAgICAgICAgZmV0Y2goYC9hcGkvcGF0aWVudD9pZD0ke2lkfWAsIHsgbWV0aG9kOiAnR0VUJyB9KVxuICAgICAgICAgICAgLnRoZW4ociA9PiByLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGQgPT4gc2V0UGF0aWVudChkKSk7XG5cbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gKDw+XG5cbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8aDE+UGF0aWVudDwvaDE+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICAgIDxhcnRpY2xlPlxuICAgICAgICAgICAgICAgIDxoZWFkZXI+e3BhdGllbnQ/LmZpcnN0TmFtZX0ge3BhdGllbnQ/Lmxhc3ROYW1lfTwvaGVhZGVyPlxuICAgICAgICAgICAgPC9hcnRpY2xlPlxuICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8YXJ0aWNsZT5cbiAgICAgICAgICAgIDwvYXJ0aWNsZT5cbiAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgPC8+KTtcbn07Il0sCiAgIm1hcHBpbmdzIjogIjBoQkFBQSxJQUFBQSxHQUFBQyxHQUFBQyxHQUFBLGNBV0EsSUFBSUMsR0FBcUIsT0FBTyxJQUFJLDRCQUE0QixFQUM5REMsR0FBb0IsT0FBTyxJQUFJLGNBQWMsRUFDN0NDLEdBQXNCLE9BQU8sSUFBSSxnQkFBZ0IsRUFDakRDLEdBQXlCLE9BQU8sSUFBSSxtQkFBbUIsRUFDdkRDLEdBQXNCLE9BQU8sSUFBSSxnQkFBZ0IsRUFDakRDLEdBQXNCLE9BQU8sSUFBSSxnQkFBZ0IsRUFDakRDLEdBQXFCLE9BQU8sSUFBSSxlQUFlLEVBQy9DQyxHQUF5QixPQUFPLElBQUksbUJBQW1CLEVBQ3ZEQyxHQUFzQixPQUFPLElBQUksZ0JBQWdCLEVBQ2pEQyxHQUFrQixPQUFPLElBQUksWUFBWSxFQUN6Q0MsR0FBa0IsT0FBTyxJQUFJLFlBQVksRUFDekNDLEdBQXdCLE9BQU8sU0FDakMsU0FBU0MsR0FBY0MsRUFBZSxDQUNwQyxPQUFhQSxJQUFULE1BQXVDLE9BQU9BLEdBQXBCLFNBQTBDLE1BQ3hFQSxFQUNHRixJQUF5QkUsRUFBY0YsRUFBcUIsR0FDN0RFLEVBQWMsWUFBWSxFQUNOLE9BQU9BLEdBQXRCLFdBQXNDQSxFQUFnQixLQUMvRCxDQUNBLElBQUlDLEdBQXVCLENBQ3ZCLFVBQVcsVUFBWSxDQUNyQixNQUFPLEVBQ1QsRUFDQSxtQkFBb0IsVUFBWSxDQUFDLEVBQ2pDLG9CQUFxQixVQUFZLENBQUMsRUFDbEMsZ0JBQWlCLFVBQVksQ0FBQyxDQUNoQyxFQUNBQyxHQUFTLE9BQU8sT0FDaEJDLEdBQWMsQ0FBQyxF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WUFBWSxFQUUxQ0MsR0FBUSxFQUFBSCxRQUFBLGdCQUFBQSxRQUFBLGNBQ1YsRUFBQUEsUUFBQSxjQUFDLGNBQ0csRUFBQUEsUUFBQSxjQUFDLFdBQ0csRUFBQUEsUUFBQSxjQUFDLFVBQ0csRUFBQUEsUUFBQSxjQUFDLFVBQ0csRUFBQUEsUUFBQSxjQUFDLEtBQUUsS0FBSyxJQUFJLFVBQVUsYUFDbEIsRUFBQUEsUUFBQSxjQUFDLFFBQUssVUFBVSw2QkFBNEIsTUFBSSxDQUNwRCxDQUNKLENBQ0osRUFDQSxFQUFBQSxRQUFBLGNBQUMsVUFDRyxFQUFBQSxRQUFBLGNBQUMsVUFBRyxFQUFBQSxRQUFBLGNBQUMsY0FBTyxvQkFBa0IsQ0FBUyxDQUMzQyxFQUNBLEVBQUFBLFFBQUEsY0FBQyxVQUNHLEVBQUFBLFFBQUEsY0FBQyxVQUNHLEVBQUFBLFFBQUEsY0FBQyxLQUFFLEtBQUssSUFBSSxVQUFVLGFBQ2xCLEVBQUFBLFFBQUEsY0FBQyxRQUFLLFVBQVUsNkJBQTRCLE1BQUksQ0FDcEQsQ0FDSixDQUNKLENBQ0osQ0FDSixFQUNBLEVBQUFBLFFBQUEsY0FBQyxZQUVPQyxLQUFTLElBQU0sRUFBQUQsUUFBQSxjQUFDSSxHQUFBLElBQUssRUFDckJILEtBQVMsV0FBYSxFQUFBRCxRQUFBLGNBQUNLLEdBQUEsSUFBUSxFQUMvQkosS0FBUyxZQUFjLEVBQUFELFFBQUEsY0FBQ00sR0FBQSxJQUFTLEVBQ2pDTCxLQUFTLGVBQWlCLEVBQUFELFFBQUEsY0FBQ08sR0FBQSxJQUFZLEVBQ3ZDLEVBQUFQLFFBQUEsY0FBQ0QsR0FBQSxJQUFTLENBRWxCLEVBQ0EsRUFBQUMsUUFBQSxjQUFDLGFBQU8sQ0FDWixLQUVBLGVBQVdFLEVBQUksRUFBRSxPQUFPQyxFQUFJIiwKICAibmFtZXMiOiBbInJlcXVpcmVfcmVhY3RfcHJvZHVjdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiUkVBQ1RfRUxFTUVOVF9UWVBFIiwgIlJFQUNUX1BPUlRBTF9UWVBFIiwgIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCAiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsICJSRUFDVF9QUk9GSUxFUl9UWVBFIiwgIlJFQUNUX0NPTlNVTUVSX1RZUEUiLCAiUkVBQ1RfQ09OVEVYVF9UWVBFIiwgIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCAiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsICJSRUFDVF9NRU1PX1RZUEUiLCAiUkVBQ1RfTEFaWV9UWVBFIiwgIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsICJnZXRJdGVyYXRvckZuIiwgIm1heWJlSXRlcmFibGUiLCAiUmVhY3ROb29wVXBkYXRlUXVldWUiLCAiYXNzaWduIiwgImVtcHR5T2JqZWN0IiwgIkNvbXBvbmVudCIsICJwcm9wcyIsICJjb250ZXh0IiwgInVwZGF0ZXIiLCAicGFydGlhbFN0YXRlIiwgImNhbGxiYWNrIiwgIkNvbXBvbmVudER1bW15IiwgIlB1cmVDb21wb25lbnQiLCAicHVyZUNvbXBvbmVudFByb3RvdHlwZSIsICJpc0FycmF5SW1wbCIsICJSZWFjdFNoYXJlZEludGVybmFscyIsICJoYXNPd25Qcm9wZXJ0eSIsICJSZWFjdEVsZW1lbnQiLCAidHlwZSIsICJrZXkiLCAic2VsZiIsICJzb3VyY2UiLCAib3duZXIiLCAiY2xvbmVBbmRSZXBsYWNlS2V5IiwgIm9sZEVsZW1lbnQiLCAibmV3S2V5IiwgImlzVmFsaWRFbGVtZW50IiwgIm9iamVjdCIsICJlc2NhcGUiLCAiZXNjYXBlckxvb2t1cCIsICJtYXRjaCIsICJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCIsICJnZXRFbGVtZW50S2V5IiwgImVsZW1lbnQiLCAiaW5kZXgiLCAibm9vcCQxIiwgInJlc29sdmVUaGVuYWJsZSIsICJ0aGVuYWJsZSIsICJmdWxmaWxsZWRWYWx1ZSIsICJlcnJvciIsICJtYXBJbnRvQXJyYXkiLCAiY2hpbGRyZW4iLCAiYXJyYXkiLCAiZXNjYXBlZFByZWZpeCIsICJuYW1lU29GYXIiLCAiaW52b2tlQ2FsbGJhY2siLCAiYyIsICJuZXh0TmFtZVByZWZpeCIsICJtYXBDaGlsZHJlbiIsICJmdW5jIiwgInJlc3VsdCIsICJjb3VudCIsICJjaGlsZCIsICJsYXp5SW5pdGlhbGl6ZXIiLCAicGF5bG9hZCIsICJjdG9yIiwgIm1vZHVsZU9iamVjdCIsICJyZXBvcnRHbG9iYWxFcnJvciIsICJldmVudCIsICJub29wIiwgImZvckVhY2hGdW5jIiwgImZvckVhY2hDb250ZXh0IiwgIm4iLCAic2l6ZSIsICJmbiIsICJjb25maWciLCAicHJvcE5hbWUiLCAiY2hpbGRBcnJheSIsICJkZWZhdWx0VmFsdWUiLCAiY2hpbGRyZW5MZW5ndGgiLCAicmVuZGVyIiwgImNvbXBhcmUiLCAic2NvcGUiLCAicHJldlRyYW5zaXRpb24iLCAiY3VycmVudFRyYW5zaXRpb24iLCAicmV0dXJuVmFsdWUiLCAib25TdGFydFRyYW5zaXRpb25GaW5pc2giLCAidXNhYmxlIiwgImFjdGlvbiIsICJpbml0aWFsU3RhdGUiLCAicGVybWFsaW5rIiwgImRlcHMiLCAiQ29udGV4dCIsICJ2YWx1ZSIsICJpbml0aWFsVmFsdWUiLCAiY3JlYXRlIiwgImNyZWF0ZURlcHMiLCAidXBkYXRlIiwgImRpc3BhdGNoZXIiLCAicmVmIiwgInBhc3N0aHJvdWdoIiwgInJlZHVjZXIiLCAiaW5pdGlhbEFyZyIsICJpbml0IiwgInN1YnNjcmliZSIsICJnZXRTbmFwc2hvdCIsICJnZXRTZXJ2ZXJTbmFwc2hvdCIsICJyZXF1aXJlX3JlYWN0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9zY2hlZHVsZXJfcHJvZHVjdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicHVzaCIsICJoZWFwIiwgIm5vZGUiLCAiaW5kZXgiLCAiYSIsICJwYXJlbnRJbmRleCIsICJwYXJlbnQiLCAiY29tcGFyZSIsICJwZWVrIiwgInBvcCIsICJmaXJzdCIsICJsYXN0IiwgImxlbmd0aCIsICJoYWxmTGVuZ3RoIiwgImxlZnRJbmRleCIsICJsZWZ0IiwgInJpZ2h0SW5kZXgiLCAicmlnaHQiLCAiYiIsICJkaWZmIiwgImxvY2FsUGVyZm9ybWFuY2UiLCAibG9jYWxEYXRlIiwgImluaXRpYWxUaW1lIiwgInRhc2tRdWV1ZSIsICJ0aW1lclF1ZXVlIiwgInRhc2tJZENvdW50ZXIiLCAiY3VycmVudFRhc2siLCAiY3VycmVudFByaW9yaXR5TGV2ZWwiLCAiaXNQZXJmb3JtaW5nV29yayIsICJpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCIsICJpc0hvc3RUaW1lb3V0U2NoZWR1bGVkIiwgIm5lZWRzUGFpbnQiLCAibG9jYWxTZXRUaW1lb3V0IiwgImxvY2FsQ2xlYXJUaW1lb3V0IiwgImxvY2FsU2V0SW1tZWRpYXRlIiwgImFkdmFuY2VUaW1lcnMiLCAiY3VycmVudFRpbWUiLCAidGltZXIiLCAiaGFuZGxlVGltZW91dCIsICJpc01lc3NhZ2VMb29wUnVubmluZyIsICJzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsICJmaXJzdFRpbWVyIiwgInJlcXVlc3RIb3N0VGltZW91dCIsICJ0YXNrVGltZW91dElEIiwgImZyYW1lSW50ZXJ2YWwiLCAic3RhcnRUaW1lIiwgInNob3VsZFlpZWxkVG9Ib3N0IiwgInBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsICJoYXNNb3JlV29yayIsICJwcmV2aW91c1ByaW9yaXR5TGV2ZWwiLCAiY2FsbGJhY2siLCAiY29udGludWF0aW9uQ2FsbGJhY2siLCAiY2hhbm5lbCIsICJwb3J0IiwgIm1zIiwgInRhc2siLCAiZnBzIiwgImV2ZW50SGFuZGxlciIsICJwcmlvcml0eUxldmVsIiwgIm9wdGlvbnMiLCAidGltZW91dCIsICJwYXJlbnRQcmlvcml0eUxldmVsIiwgInJlcXVpcmVfc2NoZWR1bGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9yZWFjdF9kb21fcHJvZHVjdGlvbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiUmVhY3QiLCAiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsICJjb2RlIiwgInVybCIsICJpIiwgIm5vb3AiLCAiSW50ZXJuYWxzIiwgIlJFQUNUX1BPUlRBTF9UWVBFIiwgImNyZWF0ZVBvcnRhbCQxIiwgImNoaWxkcmVuIiwgImNvbnRhaW5lckluZm8iLCAiaW1wbGVtZW50YXRpb24iLCAia2V5IiwgIlJlYWN0U2hhcmVkSW50ZXJuYWxzIiwgImdldENyb3NzT3JpZ2luU3RyaW5nQXMiLCAiYXMiLCAiaW5wdXQiLCAiY29udGFpbmVyIiwgImZuIiwgInByZXZpb3VzVHJhbnNpdGlvbiIsICJwcmV2aW91c1VwZGF0ZVByaW9yaXR5IiwgImhyZWYiLCAib3B0aW9ucyIsICJjcm9zc09yaWdpbiIsICJpbnRlZ3JpdHkiLCAiZmV0Y2hQcmlvcml0eSIsICJmb3JtIiwgImEiLCAiYWN0aW9uIiwgImluaXRpYWxTdGF0ZSIsICJwZXJtYWxpbmsiLCAicmVxdWlyZV9yZWFjdF9kb20iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjaGVja0RDRSIsICJlcnIiLCAicmVxdWlyZV9yZWFjdF9kb21fY2xpZW50X3Byb2R1Y3Rpb24iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIlNjaGVkdWxlciIsICJSZWFjdCIsICJSZWFjdERPTSIsICJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwgImNvZGUiLCAidXJsIiwgImkiLCAiaXNWYWxpZENvbnRhaW5lciIsICJub2RlIiwgImdldE5lYXJlc3RNb3VudGVkRmliZXIiLCAiZmliZXIiLCAibmVhcmVzdE1vdW50ZWQiLCAiZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlciIsICJzdXNwZW5zZVN0YXRlIiwgImFzc2VydElzTW91bnRlZCIsICJmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aCIsICJhbHRlcm5hdGUiLCAiYSIsICJiIiwgInBhcmVudEEiLCAicGFyZW50QiIsICJkaWRGaW5kQ2hpbGQiLCAiY2hpbGQkMCIsICJmaW5kQ3VycmVudEhvc3RGaWJlckltcGwiLCAidGFnIiwgImFzc2lnbiIsICJSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFIiwgIlJFQUNUX0VMRU1FTlRfVFlQRSIsICJSRUFDVF9QT1JUQUxfVFlQRSIsICJSRUFDVF9GUkFHTUVOVF9UWVBFIiwgIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCAiUkVBQ1RfUFJPRklMRVJfVFlQRSIsICJSRUFDVF9QUk9WSURFUl9UWVBFIiwgIlJFQUNUX0NPTlNVTUVSX1RZUEUiLCAiUkVBQ1RfQ09OVEVYVF9UWVBFIiwgIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCAiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsICJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCAiUkVBQ1RfTUVNT19UWVBFIiwgIlJFQUNUX0xBWllfVFlQRSIsICJSRUFDVF9BQ1RJVklUWV9UWVBFIiwgIlJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwiLCAiTUFZQkVfSVRFUkFUT1JfU1lNQk9MIiwgImdldEl0ZXJhdG9yRm4iLCAibWF5YmVJdGVyYWJsZSIsICJSRUFDVF9DTElFTlRfUkVGRVJFTkNFIiwgImdldENvbXBvbmVudE5hbWVGcm9tVHlwZSIsICJ0eXBlIiwgImlubmVyVHlwZSIsICJpc0FycmF5SW1wbCIsICJSZWFjdFNoYXJlZEludGVybmFscyIsICJSZWFjdERPTVNoYXJlZEludGVybmFscyIsICJzaGFyZWROb3RQZW5kaW5nT2JqZWN0IiwgInZhbHVlU3RhY2siLCAiaW5kZXgiLCAiY3JlYXRlQ3Vyc29yIiwgImRlZmF1bHRWYWx1ZSIsICJwb3AiLCAiY3Vyc29yIiwgInB1c2giLCAidmFsdWUiLCAiY29udGV4dFN0YWNrQ3Vyc29yIiwgImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwgInJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yIiwgImhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IiLCAicHVzaEhvc3RDb250YWluZXIiLCAibmV4dFJvb3RJbnN0YW5jZSIsICJnZXRPd25Ib3N0Q29udGV4dCIsICJnZXRDaGlsZEhvc3RDb250ZXh0UHJvZCIsICJwb3BIb3N0Q29udGFpbmVyIiwgInB1c2hIb3N0Q29udGV4dCIsICJjb250ZXh0IiwgIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCIsICJwb3BIb3N0Q29udGV4dCIsICJIb3N0VHJhbnNpdGlvbkNvbnRleHQiLCAiaGFzT3duUHJvcGVydHkiLCAic2NoZWR1bGVDYWxsYmFjayQzIiwgImNhbmNlbENhbGxiYWNrJDEiLCAic2hvdWxkWWllbGQiLCAicmVxdWVzdFBhaW50IiwgIm5vdyIsICJnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsICJJbW1lZGlhdGVQcmlvcml0eSIsICJVc2VyQmxvY2tpbmdQcmlvcml0eSIsICJOb3JtYWxQcmlvcml0eSQxIiwgIkxvd1ByaW9yaXR5IiwgIklkbGVQcmlvcml0eSIsICJsb2ckMSIsICJ1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZSIsICJyZW5kZXJlcklEIiwgImluamVjdGVkSG9vayIsICJzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyIsICJuZXdJc1N0cmljdE1vZGUiLCAiY2x6MzIiLCAiY2x6MzJGYWxsYmFjayIsICJsb2ciLCAiTE4yIiwgIngiLCAibmV4dFRyYW5zaXRpb25MYW5lIiwgIm5leHRSZXRyeUxhbmUiLCAiZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMiLCAibGFuZXMiLCAicGVuZGluZ1N5bmNMYW5lcyIsICJnZXROZXh0TGFuZXMiLCAicm9vdCIsICJ3aXBMYW5lcyIsICJyb290SGFzUGVuZGluZ0NvbW1pdCIsICJwZW5kaW5nTGFuZXMiLCAibmV4dExhbmVzIiwgInN1c3BlbmRlZExhbmVzIiwgInBpbmdlZExhbmVzIiwgIm5vbklkbGVQZW5kaW5nTGFuZXMiLCAiY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyIsICJyZW5kZXJMYW5lcyIsICJjb21wdXRlRXhwaXJhdGlvblRpbWUiLCAibGFuZSIsICJjdXJyZW50VGltZSIsICJjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSIsICJjbGFpbU5leHRSZXRyeUxhbmUiLCAiY3JlYXRlTGFuZU1hcCIsICJpbml0aWFsIiwgImxhbmVNYXAiLCAibWFya1Jvb3RVcGRhdGVkJDEiLCAidXBkYXRlTGFuZSIsICJtYXJrUm9vdEZpbmlzaGVkIiwgImZpbmlzaGVkTGFuZXMiLCAicmVtYWluaW5nTGFuZXMiLCAic3Bhd25lZExhbmUiLCAidXBkYXRlZExhbmVzIiwgInN1c3BlbmRlZFJldHJ5TGFuZXMiLCAicHJldmlvdXNseVBlbmRpbmdMYW5lcyIsICJlbnRhbmdsZW1lbnRzIiwgImV4cGlyYXRpb25UaW1lcyIsICJoaWRkZW5VcGRhdGVzIiwgImluZGV4JDUiLCAiaGlkZGVuVXBkYXRlc0ZvckxhbmUiLCAidXBkYXRlIiwgIm1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lIiwgImVudGFuZ2xlZExhbmVzIiwgInNwYXduZWRMYW5lSW5kZXgiLCAibWFya1Jvb3RFbnRhbmdsZWQiLCAicm9vdEVudGFuZ2xlZExhbmVzIiwgImluZGV4JDYiLCAiZ2V0QnVtcGVkTGFuZUZvckh5ZHJhdGlvbkJ5TGFuZSIsICJsYW5lc1RvRXZlbnRQcmlvcml0eSIsICJyZXNvbHZlVXBkYXRlUHJpb3JpdHkiLCAidXBkYXRlUHJpb3JpdHkiLCAiZ2V0RXZlbnRQcmlvcml0eSIsICJydW5XaXRoUHJpb3JpdHkiLCAicHJpb3JpdHkiLCAiZm4iLCAicHJldmlvdXNQcmlvcml0eSIsICJyYW5kb21LZXkiLCAiaW50ZXJuYWxJbnN0YW5jZUtleSIsICJpbnRlcm5hbFByb3BzS2V5IiwgImludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXkiLCAiaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5IiwgImludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5IiwgImludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5IiwgImludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXkiLCAiaW50ZXJuYWxIb2lzdGFibGVNYXJrZXIiLCAiZGV0YWNoRGVsZXRlZEluc3RhbmNlIiwgImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwgInRhcmdldE5vZGUiLCAidGFyZ2V0SW5zdCIsICJwYXJlbnROb2RlIiwgImdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UiLCAiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsICJnZXROb2RlRnJvbUluc3RhbmNlIiwgImluc3QiLCAiZ2V0UmVzb3VyY2VzRnJvbVJvb3QiLCAicmVzb3VyY2VzIiwgIm1hcmtOb2RlQXNIb2lzdGFibGUiLCAiYWxsTmF0aXZlRXZlbnRzIiwgInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCAicmVnaXN0ZXJUd29QaGFzZUV2ZW50IiwgInJlZ2lzdHJhdGlvbk5hbWUiLCAiZGVwZW5kZW5jaWVzIiwgInJlZ2lzdGVyRGlyZWN0RXZlbnQiLCAiVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgiLCAiaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSIsICJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCAiaXNBdHRyaWJ1dGVOYW1lU2FmZSIsICJhdHRyaWJ1dGVOYW1lIiwgInNldFZhbHVlRm9yQXR0cmlidXRlIiwgIm5hbWUiLCAicHJlZml4JDgiLCAic2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZSIsICJzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUiLCAibmFtZXNwYWNlIiwgInByZWZpeCIsICJzdWZmaXgiLCAiZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUiLCAibWF0Y2giLCAicmVlbnRyeSIsICJkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lIiwgImNvbnN0cnVjdCIsICJwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlIiwgIlJ1bkluUm9vdEZyYW1lIiwgIkZha2UiLCAiY29udHJvbCIsICJ4JDkiLCAieCQxMCIsICJzYW1wbGUiLCAibmFtZVByb3BEZXNjcmlwdG9yIiwgIl9SdW5JblJvb3RGcmFtZSREZXRlciIsICJzYW1wbGVTdGFjayIsICJjb250cm9sU3RhY2siLCAic2FtcGxlTGluZXMiLCAiY29udHJvbExpbmVzIiwgImZyYW1lIiwgImRlc2NyaWJlRmliZXIiLCAiZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kIiwgIndvcmtJblByb2dyZXNzIiwgImluZm8iLCAiZ2V0VG9TdHJpbmdWYWx1ZSIsICJpc0NoZWNrYWJsZSIsICJlbGVtIiwgInRyYWNrVmFsdWVPbk5vZGUiLCAidmFsdWVGaWVsZCIsICJkZXNjcmlwdG9yIiwgImN1cnJlbnRWYWx1ZSIsICJnZXQiLCAic2V0IiwgInRyYWNrIiwgInVwZGF0ZVZhbHVlSWZDaGFuZ2VkIiwgInRyYWNrZXIiLCAibGFzdFZhbHVlIiwgImdldEFjdGl2ZUVsZW1lbnQiLCAiZG9jIiwgImVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCIsICJlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzIiwgImNoIiwgInVwZGF0ZUlucHV0IiwgImVsZW1lbnQiLCAibGFzdERlZmF1bHRWYWx1ZSIsICJjaGVja2VkIiwgImRlZmF1bHRDaGVja2VkIiwgInNldERlZmF1bHRWYWx1ZSIsICJpbml0SW5wdXQiLCAiaXNIeWRyYXRpbmciLCAidXBkYXRlT3B0aW9ucyIsICJtdWx0aXBsZSIsICJwcm9wVmFsdWUiLCAic2V0RGVmYXVsdFNlbGVjdGVkIiwgInVwZGF0ZVRleHRhcmVhIiwgImluaXRUZXh0YXJlYSIsICJjaGlsZHJlbiIsICJzZXRUZXh0Q29udGVudCIsICJ0ZXh0IiwgImZpcnN0Q2hpbGQiLCAidW5pdGxlc3NOdW1iZXJzIiwgInNldFZhbHVlRm9yU3R5bGUiLCAic3R5bGUiLCAic3R5bGVOYW1lIiwgImlzQ3VzdG9tUHJvcGVydHkiLCAic2V0VmFsdWVGb3JTdHlsZXMiLCAic3R5bGVzIiwgInByZXZTdHlsZXMiLCAic3R5bGVOYW1lJDE2IiwgInN0eWxlTmFtZSQxNyIsICJpc0N1c3RvbUVsZW1lbnQiLCAidGFnTmFtZSIsICJhbGlhc2VzIiwgImlzSmF2YVNjcmlwdFByb3RvY29sIiwgInNhbml0aXplVVJMIiwgImN1cnJlbnRSZXBsYXlpbmdFdmVudCIsICJnZXRFdmVudFRhcmdldCIsICJuYXRpdmVFdmVudCIsICJyZXN0b3JlVGFyZ2V0IiwgInJlc3RvcmVRdWV1ZSIsICJyZXN0b3JlU3RhdGVPZlRhcmdldCIsICJ0YXJnZXQiLCAiaW50ZXJuYWxJbnN0YW5jZSIsICJwcm9wcyIsICJvdGhlck5vZGUiLCAib3RoZXJQcm9wcyIsICJpc0luc2lkZUV2ZW50SGFuZGxlciIsICJiYXRjaGVkVXBkYXRlcyQxIiwgImZsdXNoU3luY1dvcmskMSIsICJnZXRMaXN0ZW5lciIsICJzdGF0ZU5vZGUiLCAiY2FuVXNlRE9NIiwgInBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIiwgIm9wdGlvbnMiLCAic3RhcnRUZXh0IiwgImZhbGxiYWNrVGV4dCIsICJnZXREYXRhIiwgInN0YXJ0IiwgInN0YXJ0VmFsdWUiLCAic3RhcnRMZW5ndGgiLCAiZW5kIiwgImVuZFZhbHVlIiwgImVuZExlbmd0aCIsICJtaW5FbmQiLCAiZ2V0RXZlbnRDaGFyQ29kZSIsICJrZXlDb2RlIiwgImZ1bmN0aW9uVGhhdFJldHVybnNUcnVlIiwgImZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSIsICJjcmVhdGVTeW50aGV0aWNFdmVudCIsICJJbnRlcmZhY2UiLCAiU3ludGhldGljQmFzZUV2ZW50IiwgInJlYWN0TmFtZSIsICJyZWFjdEV2ZW50VHlwZSIsICJuYXRpdmVFdmVudFRhcmdldCIsICJwcm9wTmFtZSIsICJldmVudCIsICJFdmVudEludGVyZmFjZSIsICJTeW50aGV0aWNFdmVudCIsICJVSUV2ZW50SW50ZXJmYWNlIiwgIlN5bnRoZXRpY1VJRXZlbnQiLCAibGFzdE1vdmVtZW50WCIsICJsYXN0TW92ZW1lbnRZIiwgImxhc3RNb3VzZUV2ZW50IiwgIk1vdXNlRXZlbnRJbnRlcmZhY2UiLCAiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwgIlN5bnRoZXRpY01vdXNlRXZlbnQiLCAiRHJhZ0V2ZW50SW50ZXJmYWNlIiwgIlN5bnRoZXRpY0RyYWdFdmVudCIsICJGb2N1c0V2ZW50SW50ZXJmYWNlIiwgIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCAiQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UiLCAiU3ludGhldGljQW5pbWF0aW9uRXZlbnQiLCAiQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UiLCAiU3ludGhldGljQ2xpcGJvYXJkRXZlbnQiLCAiQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSIsICJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwgIm5vcm1hbGl6ZUtleSIsICJ0cmFuc2xhdGVUb0tleSIsICJtb2RpZmllcktleVRvUHJvcCIsICJtb2RpZmllclN0YXRlR2V0dGVyIiwgImtleUFyZyIsICJLZXlib2FyZEV2ZW50SW50ZXJmYWNlIiwgImtleSIsICJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwgIlBvaW50ZXJFdmVudEludGVyZmFjZSIsICJTeW50aGV0aWNQb2ludGVyRXZlbnQiLCAiVG91Y2hFdmVudEludGVyZmFjZSIsICJTeW50aGV0aWNUb3VjaEV2ZW50IiwgIlRyYW5zaXRpb25FdmVudEludGVyZmFjZSIsICJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCAiV2hlZWxFdmVudEludGVyZmFjZSIsICJTeW50aGV0aWNXaGVlbEV2ZW50IiwgIlRvZ2dsZUV2ZW50SW50ZXJmYWNlIiwgIlN5bnRoZXRpY1RvZ2dsZUV2ZW50IiwgIkVORF9LRVlDT0RFUyIsICJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwgImRvY3VtZW50TW9kZSIsICJjYW5Vc2VUZXh0SW5wdXRFdmVudCIsICJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsICJTUEFDRUJBUl9DSEFSIiwgImhhc1NwYWNlS2V5cHJlc3MiLCAiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwgImRvbUV2ZW50TmFtZSIsICJnZXREYXRhRnJvbUN1c3RvbUV2ZW50IiwgImlzQ29tcG9zaW5nIiwgImdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMiLCAiZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzIiwgInN1cHBvcnRlZElucHV0VHlwZXMiLCAiaXNUZXh0SW5wdXRFbGVtZW50IiwgIm5vZGVOYW1lIiwgImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsICJkaXNwYXRjaFF1ZXVlIiwgImFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyIsICJhY3RpdmVFbGVtZW50JDEiLCAiYWN0aXZlRWxlbWVudEluc3QkMSIsICJydW5FdmVudEluQmF0Y2giLCAicHJvY2Vzc0Rpc3BhdGNoUXVldWUiLCAiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwgImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsICJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCAiaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTciLCAiZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOCIsICJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MiIsICJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsICJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsICJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCAiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCIsICJnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCIsICJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50IiwgImlzIiwgInkiLCAib2JqZWN0SXMiLCAic2hhbGxvd0VxdWFsIiwgIm9iakEiLCAib2JqQiIsICJrZXlzQSIsICJrZXlzQiIsICJjdXJyZW50S2V5IiwgImdldExlYWZOb2RlIiwgImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCAib2Zmc2V0IiwgIm5vZGVFbmQiLCAiY29udGFpbnNOb2RlIiwgIm91dGVyTm9kZSIsICJpbm5lck5vZGUiLCAiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCAiY29udGFpbmVySW5mbyIsICJoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMiLCAic2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50IiwgImFjdGl2ZUVsZW1lbnQiLCAiYWN0aXZlRWxlbWVudEluc3QiLCAibGFzdFNlbGVjdGlvbiIsICJtb3VzZURvd24iLCAiY29uc3RydWN0U2VsZWN0RXZlbnQiLCAibWFrZVByZWZpeE1hcCIsICJzdHlsZVByb3AiLCAiZXZlbnROYW1lIiwgInByZWZpeGVzIiwgInZlbmRvclByZWZpeGVzIiwgInByZWZpeGVkRXZlbnROYW1lcyIsICJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsICJwcmVmaXhNYXAiLCAiQU5JTUFUSU9OX0VORCIsICJBTklNQVRJT05fSVRFUkFUSU9OIiwgIkFOSU1BVElPTl9TVEFSVCIsICJUUkFOU0lUSU9OX1JVTiIsICJUUkFOU0lUSU9OX1NUQVJUIiwgIlRSQU5TSVRJT05fQ0FOQ0VMIiwgIlRSQU5TSVRJT05fRU5EIiwgInRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzIiwgInNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzIiwgInJlZ2lzdGVyU2ltcGxlRXZlbnQiLCAiQ2FwdHVyZWRTdGFja3MiLCAiY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIiLCAic291cmNlIiwgImV4aXN0aW5nIiwgImNvbmN1cnJlbnRRdWV1ZXMiLCAiY29uY3VycmVudFF1ZXVlc0luZGV4IiwgImNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyIsICJmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzIiwgImVuZEluZGV4IiwgInF1ZXVlIiwgInBlbmRpbmciLCAibWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QiLCAiZW5xdWV1ZVVwZGF0ZSQxIiwgImVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZSIsICJnZXRSb290Rm9yVXBkYXRlZEZpYmVyIiwgImVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZSIsICJzb3VyY2VGaWJlciIsICJpc0hpZGRlbiIsICJwYXJlbnQiLCAibmVzdGVkVXBkYXRlQ291bnQiLCAicm9vdFdpdGhOZXN0ZWRVcGRhdGVzIiwgImVtcHR5Q29udGV4dE9iamVjdCIsICJGaWJlck5vZGUiLCAicGVuZGluZ1Byb3BzIiwgIm1vZGUiLCAiY3JlYXRlRmliZXJJbXBsQ2xhc3MiLCAic2hvdWxkQ29uc3RydWN0IiwgIkNvbXBvbmVudCIsICJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsICJjdXJyZW50IiwgInJlc2V0V29ya0luUHJvZ3Jlc3MiLCAiY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzIiwgIm93bmVyIiwgImZpYmVyVGFnIiwgImlzSG9zdEhvaXN0YWJsZVR5cGUiLCAiY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQiLCAiZWxlbWVudHMiLCAiY3JlYXRlRmliZXJGcm9tVGV4dCIsICJjb250ZW50IiwgImNyZWF0ZUZpYmVyRnJvbVBvcnRhbCIsICJwb3J0YWwiLCAiZm9ya1N0YWNrIiwgImZvcmtTdGFja0luZGV4IiwgInRyZWVGb3JrUHJvdmlkZXIiLCAidHJlZUZvcmtDb3VudCIsICJpZFN0YWNrIiwgImlkU3RhY2tJbmRleCIsICJ0cmVlQ29udGV4dFByb3ZpZGVyIiwgInRyZWVDb250ZXh0SWQiLCAidHJlZUNvbnRleHRPdmVyZmxvdyIsICJwdXNoVHJlZUZvcmsiLCAidG90YWxDaGlsZHJlbiIsICJwdXNoVHJlZUlkIiwgImJhc2VJZFdpdGhMZWFkaW5nQml0IiwgImJhc2VMZW5ndGgiLCAibGVuZ3RoIiwgIm51bWJlck9mT3ZlcmZsb3dCaXRzIiwgInB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQiLCAicG9wVHJlZUNvbnRleHQiLCAiaHlkcmF0aW9uUGFyZW50RmliZXIiLCAibmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsICJoeWRyYXRpb25FcnJvcnMiLCAicm9vdE9yU2luZ2xldG9uQ29udGV4dCIsICJIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiIsICJ0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2giLCAiZXJyb3IiLCAicXVldWVIeWRyYXRpb25FcnJvciIsICJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwgImluc3RhbmNlIiwgImxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQiLCAibWVkaWFFdmVudFR5cGVzIiwgImNoZWNrRm9yVW5tYXRjaGVkVGV4dCIsICJub29wJDEiLCAicG9wVG9OZXh0SG9zdFBhcmVudCIsICJwb3BIeWRyYXRpb25TdGF0ZSIsICJKU0NvbXBpbGVyX3RlbXAiLCAic2hvdWxkU2V0VGV4dENvbnRlbnQiLCAiZ2V0TmV4dEh5ZHJhdGFibGUiLCAiaXNTaW5nbGV0b25TY29wZSIsICJwcmV2aW91c0h5ZHJhdGFibGVPbkVudGVyaW5nU2NvcGVkU2luZ2xldG9uIiwgInJlc2V0SHlkcmF0aW9uU3RhdGUiLCAidXBncmFkZUh5ZHJhdGlvbkVycm9yc1RvUmVjb3ZlcmFibGUiLCAicXVldWVkRXJyb3JzIiwgIndvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzIiwgInZhbHVlQ3Vyc29yIiwgImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEiLCAibGFzdENvbnRleHREZXBlbmRlbmN5IiwgInB1c2hQcm92aWRlciIsICJwcm92aWRlckZpYmVyIiwgIm5leHRWYWx1ZSIsICJwb3BQcm92aWRlciIsICJzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoIiwgInByb3BhZ2F0aW9uUm9vdCIsICJwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyIsICJjb250ZXh0cyIsICJmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUiLCAibGlzdCIsICJuZXh0RmliZXIiLCAiZGVwZW5kZW5jeSIsICJwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyIsICJpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCIsICJjdXJyZW50UGFyZW50IiwgImNoZWNrSWZDb250ZXh0Q2hhbmdlZCIsICJjdXJyZW50RGVwZW5kZW5jaWVzIiwgInByZXBhcmVUb1JlYWRDb250ZXh0IiwgInJlYWRDb250ZXh0IiwgInJlYWRDb250ZXh0Rm9yQ29uc3VtZXIiLCAicmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbiIsICJjb25zdW1lciIsICJBYm9ydENvbnRyb2xsZXJMb2NhbCIsICJsaXN0ZW5lcnMiLCAic2lnbmFsIiwgImxpc3RlbmVyIiwgInNjaGVkdWxlQ2FsbGJhY2skMiIsICJOb3JtYWxQcmlvcml0eSIsICJDYWNoZUNvbnRleHQiLCAiY3JlYXRlQ2FjaGUiLCAicmVsZWFzZUNhY2hlIiwgImNhY2hlIiwgImN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMiLCAiY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCIsICJjdXJyZW50RW50YW5nbGVkTGFuZSIsICJjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUiLCAiZW50YW5nbGVBc3luY0FjdGlvbiIsICJ0cmFuc2l0aW9uIiwgInRoZW5hYmxlIiwgImVudGFuZ2xlZExpc3RlbmVycyIsICJyZXF1ZXN0VHJhbnNpdGlvbkxhbmUiLCAicmVzb2x2ZSIsICJwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlIiwgImNoYWluVGhlbmFibGVWYWx1ZSIsICJyZXN1bHQiLCAidGhlbmFibGVXaXRoT3ZlcnJpZGUiLCAicHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoIiwgInJldHVyblZhbHVlIiwgInJlc3VtZWRDYWNoZSIsICJwZWVrQ2FjaGVGcm9tUG9vbCIsICJjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXIiLCAid29ya0luUHJvZ3Jlc3NSb290IiwgInB1c2hUcmFuc2l0aW9uIiwgIm9mZnNjcmVlbldvcmtJblByb2dyZXNzIiwgInByZXZDYWNoZVBvb2wiLCAiZ2V0U3VzcGVuZGVkQ2FjaGUiLCAiY2FjaGVGcm9tUG9vbCIsICJTdXNwZW5zZUV4Y2VwdGlvbiIsICJTdXNwZW5zZXlDb21taXRFeGNlcHRpb24iLCAiU3VzcGVuc2VBY3Rpb25FeGNlcHRpb24iLCAibm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlIiwgImlzVGhlbmFibGVSZXNvbHZlZCIsICJub29wJDMiLCAidHJhY2tVc2VkVGhlbmFibGUiLCAidGhlbmFibGVTdGF0ZSIsICJjaGVja0lmVXNlV3JhcHBlZEluQXN5bmNDYXRjaCIsICJmdWxmaWxsZWRWYWx1ZSIsICJmdWxmaWxsZWRUaGVuYWJsZSIsICJyZWplY3RlZFRoZW5hYmxlIiwgInN1c3BlbmRlZFRoZW5hYmxlIiwgImdldFN1c3BlbmRlZFRoZW5hYmxlIiwgInJlamVjdGVkUmVhc29uIiwgImhhc0ZvcmNlVXBkYXRlIiwgImluaXRpYWxpemVVcGRhdGVRdWV1ZSIsICJjbG9uZVVwZGF0ZVF1ZXVlIiwgImNyZWF0ZVVwZGF0ZSIsICJlbnF1ZXVlVXBkYXRlIiwgInVwZGF0ZVF1ZXVlIiwgImV4ZWN1dGlvbkNvbnRleHQiLCAiZW50YW5nbGVUcmFuc2l0aW9ucyIsICJxdWV1ZUxhbmVzIiwgImVucXVldWVDYXB0dXJlZFVwZGF0ZSIsICJjYXB0dXJlZFVwZGF0ZSIsICJuZXdGaXJzdCIsICJuZXdMYXN0IiwgImNsb25lIiwgImRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24iLCAic3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiIsICJlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSIsICJwcm9jZXNzVXBkYXRlUXVldWUiLCAid29ya0luUHJvZ3Jlc3MkanNjb21wJDAiLCAiaW5zdGFuY2UkanNjb21wJDAiLCAiZmlyc3RCYXNlVXBkYXRlIiwgImxhc3RCYXNlVXBkYXRlIiwgInBlbmRpbmdRdWV1ZSIsICJsYXN0UGVuZGluZ1VwZGF0ZSIsICJmaXJzdFBlbmRpbmdVcGRhdGUiLCAibmV3U3RhdGUiLCAiaXNIaWRkZW5VcGRhdGUiLCAid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMiLCAid29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIiwgImNhbGxDYWxsYmFjayIsICJjYWxsYmFjayIsICJjb21taXRDYWxsYmFja3MiLCAiY2FsbGJhY2tzIiwgImN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IiLCAicHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yIiwgInB1c2hIaWRkZW5Db250ZXh0IiwgImVudGFuZ2xlZFJlbmRlckxhbmVzIiwgInJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2siLCAicG9wSGlkZGVuQ29udGV4dCIsICJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciIsICJjdXJyZW50SG9vayIsICJ3b3JrSW5Qcm9ncmVzc0hvb2siLCAiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsICJkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MiLCAic2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYiLCAibG9jYWxJZENvdW50ZXIiLCAidGhlbmFibGVJbmRleENvdW50ZXIkMSIsICJ0aGVuYWJsZVN0YXRlJDEiLCAiZ2xvYmFsQ2xpZW50SWRDb3VudGVyIiwgInRocm93SW52YWxpZEhvb2tFcnJvciIsICJhcmVIb29rSW5wdXRzRXF1YWwiLCAibmV4dERlcHMiLCAicHJldkRlcHMiLCAicmVuZGVyV2l0aEhvb2tzIiwgInNlY29uZEFyZyIsICJuZXh0UmVuZGVyTGFuZXMiLCAiSG9va3NEaXNwYXRjaGVyT25Nb3VudCIsICJIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZSIsICJyZW5kZXJXaXRoSG9va3NBZ2FpbiIsICJmaW5pc2hSZW5kZXJpbmdIb29rcyIsICJDb250ZXh0T25seURpc3BhdGNoZXIiLCAiZGlkUmVuZGVyVG9vRmV3SG9va3MiLCAiZGlkUmVjZWl2ZVVwZGF0ZSIsICJudW1iZXJPZlJlUmVuZGVycyIsICJIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyIiwgIlRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQiLCAiZGlzcGF0Y2hlciIsICJtYXliZVRoZW5hYmxlIiwgInVzZVRoZW5hYmxlIiwgImNoZWNrRGlkUmVuZGVySWRIb29rIiwgImRpZFJlbmRlcklkSG9vayIsICJiYWlsb3V0SG9va3MiLCAicmVzZXRIb29rc09uVW53aW5kIiwgIm1vdW50V29ya0luUHJvZ3Jlc3NIb29rIiwgImhvb2siLCAidXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rIiwgIm5leHRDdXJyZW50SG9vayIsICJuZXh0V29ya0luUHJvZ3Jlc3NIb29rIiwgImNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUiLCAidXNlIiwgInVzYWJsZSIsICJ1c2VNZW1vQ2FjaGUiLCAic2l6ZSIsICJtZW1vQ2FjaGUiLCAiYXJyYXkiLCAiYmFzaWNTdGF0ZVJlZHVjZXIiLCAic3RhdGUiLCAiYWN0aW9uIiwgInVwZGF0ZVJlZHVjZXIiLCAicmVkdWNlciIsICJ1cGRhdGVSZWR1Y2VySW1wbCIsICJiYXNlUXVldWUiLCAiYmFzZUZpcnN0IiwgIm5ld0Jhc2VRdWV1ZUZpcnN0IiwgIm5ld0Jhc2VRdWV1ZUxhc3QiLCAiZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQzMiIsICJyZXZlcnRMYW5lIiwgInJlcmVuZGVyUmVkdWNlciIsICJkaXNwYXRjaCIsICJsYXN0UmVuZGVyUGhhc2VVcGRhdGUiLCAidXBkYXRlU3luY0V4dGVybmFsU3RvcmUiLCAic3Vic2NyaWJlIiwgImdldFNuYXBzaG90IiwgImdldFNlcnZlclNuYXBzaG90IiwgImlzSHlkcmF0aW5nJGpzY29tcCQwIiwgInNuYXBzaG90Q2hhbmdlZCIsICJjcmVhdGUiLCAic3Vic2NyaWJlVG9TdG9yZSIsICJ1cGRhdGVFZmZlY3RJbXBsIiwgInB1c2hTaW1wbGVFZmZlY3QiLCAiY3JlYXRlRWZmZWN0SW5zdGFuY2UiLCAidXBkYXRlU3RvcmVJbnN0YW5jZSIsICJwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrIiwgInJlbmRlcmVkU25hcHNob3QiLCAibmV4dFNuYXBzaG90IiwgImNoZWNrSWZTbmFwc2hvdENoYW5nZWQiLCAiZm9yY2VTdG9yZVJlcmVuZGVyIiwgImxhdGVzdEdldFNuYXBzaG90IiwgInNjaGVkdWxlVXBkYXRlT25GaWJlciIsICJtb3VudFN0YXRlSW1wbCIsICJpbml0aWFsU3RhdGUiLCAiaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIiLCAidXBkYXRlT3B0aW1pc3RpY0ltcGwiLCAicGFzc3Rocm91Z2giLCAiZGlzcGF0Y2hBY3Rpb25TdGF0ZSIsICJhY3Rpb25RdWV1ZSIsICJzZXRQZW5kaW5nU3RhdGUiLCAic2V0U3RhdGUiLCAicGF5bG9hZCIsICJpc1JlbmRlclBoYXNlVXBkYXRlIiwgImFjdGlvbk5vZGUiLCAicnVuQWN0aW9uU3RhdGVBY3Rpb24iLCAicHJldlN0YXRlIiwgInByZXZUcmFuc2l0aW9uIiwgImN1cnJlbnRUcmFuc2l0aW9uIiwgIm9uU3RhcnRUcmFuc2l0aW9uRmluaXNoIiwgImhhbmRsZUFjdGlvblJldHVyblZhbHVlIiwgIm9uQWN0aW9uRXJyb3IiLCAiZXJyb3IkMzgiLCAibmV4dFN0YXRlIiwgIm9uQWN0aW9uU3VjY2VzcyIsICJub3RpZnlBY3Rpb25MaXN0ZW5lcnMiLCAibGFzdCIsICJhY3Rpb25TdGF0ZVJlZHVjZXIiLCAib2xkU3RhdGUiLCAibW91bnRBY3Rpb25TdGF0ZSIsICJpbml0aWFsU3RhdGVQcm9wIiwgInNzckZvcm1TdGF0ZSIsICJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAiLCAiaW5Sb290T3JTaW5nbGV0b24iLCAiZGlzcGF0Y2hTZXRTdGF0ZSIsICJkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZSIsICJ1cGRhdGVBY3Rpb25TdGF0ZSIsICJzdGF0ZUhvb2siLCAidXBkYXRlQWN0aW9uU3RhdGVJbXBsIiwgImN1cnJlbnRTdGF0ZUhvb2siLCAiYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QiLCAicmVyZW5kZXJBY3Rpb25TdGF0ZSIsICJjcmVhdGVEZXBzIiwgInVwZGF0ZVJlZiIsICJtb3VudEVmZmVjdEltcGwiLCAiZmliZXJGbGFncyIsICJob29rRmxhZ3MiLCAiZGVwcyIsICJtb3VudEVmZmVjdCIsICJ1cGRhdGVFZmZlY3QiLCAidXBkYXRlSW5zZXJ0aW9uRWZmZWN0IiwgInVwZGF0ZUxheW91dEVmZmVjdCIsICJpbXBlcmF0aXZlSGFuZGxlRWZmZWN0IiwgInJlZiIsICJyZWZDbGVhbnVwIiwgInVwZGF0ZUltcGVyYXRpdmVIYW5kbGUiLCAibW91bnREZWJ1Z1ZhbHVlIiwgInVwZGF0ZUNhbGxiYWNrIiwgInVwZGF0ZU1lbW8iLCAibmV4dENyZWF0ZSIsICJtb3VudERlZmVycmVkVmFsdWVJbXBsIiwgImluaXRpYWxWYWx1ZSIsICJyZXF1ZXN0RGVmZXJyZWRMYW5lIiwgInVwZGF0ZURlZmVycmVkVmFsdWVJbXBsIiwgInByZXZWYWx1ZSIsICJzdGFydFRyYW5zaXRpb24iLCAicGVuZGluZ1N0YXRlIiwgImZpbmlzaGVkU3RhdGUiLCAidGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlIiwgImRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbCIsICJyZXF1ZXN0VXBkYXRlTGFuZSIsICJub29wJDIiLCAic3RhcnRIb3N0VHJhbnNpdGlvbiIsICJmb3JtRmliZXIiLCAiZm9ybURhdGEiLCAiZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwiLCAicmVxdWVzdEZvcm1SZXNldCQxIiwgImV4aXN0aW5nU3RhdGVIb29rIiwgImluaXRpYWxSZXNldFN0YXRlIiwgInJlc2V0U3RhdGVRdWV1ZSIsICJ1c2VIb3N0VHJhbnNpdGlvblN0YXR1cyIsICJ1cGRhdGVJZCIsICJ1cGRhdGVSZWZyZXNoIiwgInJlZnJlc2hDYWNoZSIsICJwcm92aWRlciIsICJyb290JDQxIiwgImRpc3BhdGNoUmVkdWNlckFjdGlvbiIsICJlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUiLCAiZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlIiwgImN1cnJlbnRTdGF0ZSIsICJlYWdlclN0YXRlIiwgInRocm93SWZEdXJpbmdSZW5kZXIiLCAiaW5pdGlhbEFyZyIsICJpbml0IiwgImlkZW50aWZpZXJQcmVmaXgiLCAiaWRXaXRoTGVhZGluZ0JpdCIsICJib29sZWFuT3JUaGVuYWJsZSIsICJ0aGVuYWJsZUluZGV4Q291bnRlciIsICJ1bndyYXBUaGVuYWJsZSIsICJjb2VyY2VSZWYiLCAidGhyb3dPbkludmFsaWRPYmplY3RUeXBlIiwgInJldHVybkZpYmVyIiwgIm5ld0NoaWxkIiwgInJlc29sdmVMYXp5IiwgImxhenlUeXBlIiwgImNyZWF0ZUNoaWxkUmVjb25jaWxlciIsICJzaG91bGRUcmFja1NpZGVFZmZlY3RzIiwgImRlbGV0ZUNoaWxkIiwgImNoaWxkVG9EZWxldGUiLCAiZGVsZXRpb25zIiwgImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwgImN1cnJlbnRGaXJzdENoaWxkIiwgIm1hcFJlbWFpbmluZ0NoaWxkcmVuIiwgImV4aXN0aW5nQ2hpbGRyZW4iLCAidXNlRmliZXIiLCAicGxhY2VDaGlsZCIsICJuZXdGaWJlciIsICJsYXN0UGxhY2VkSW5kZXgiLCAibmV3SW5kZXgiLCAicGxhY2VTaW5nbGVDaGlsZCIsICJ1cGRhdGVUZXh0Tm9kZSIsICJ0ZXh0Q29udGVudCIsICJ1cGRhdGVFbGVtZW50IiwgImVsZW1lbnRUeXBlIiwgInVwZGF0ZUZyYWdtZW50IiwgInVwZGF0ZVBvcnRhbCIsICJmcmFnbWVudCIsICJjcmVhdGVDaGlsZCIsICJ1cGRhdGVTbG90IiwgIm9sZEZpYmVyIiwgInVwZGF0ZUZyb21NYXAiLCAibmV3SWR4IiwgInJlY29uY2lsZUNoaWxkcmVuQXJyYXkiLCAibmV3Q2hpbGRyZW4iLCAicmVzdWx0aW5nRmlyc3RDaGlsZCIsICJwcmV2aW91c05ld0ZpYmVyIiwgIm5leHRPbGRGaWJlciIsICJjaGlsZCIsICJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwgInN0ZXAiLCAicmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsIiwgImZpcnN0Q2hpbGRGaWJlciIsICJyZWNvbmNpbGVDaGlsZEZpYmVycyIsICJtb3VudENoaWxkRmliZXJzIiwgInN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yIiwgInNoZWxsQm91bmRhcnkiLCAicHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyIiwgImhhbmRsZXIiLCAic3VzcGVuc2VTdGFja0N1cnNvciIsICJwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyIiwgInJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayIsICJwb3BTdXNwZW5zZUhhbmRsZXIiLCAiZmluZEZpcnN0U3VzcGVuZGVkIiwgInJvdyIsICJpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayIsICJhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsICJjdG9yIiwgImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsICJuZXh0UHJvcHMiLCAiY2xhc3NDb21wb25lbnRVcGRhdGVyIiwgImNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlIiwgIm9sZFByb3BzIiwgIm5ld1Byb3BzIiwgIm5leHRDb250ZXh0IiwgImNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwgInJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzIiwgImJhc2VQcm9wcyIsICJwcm9wTmFtZSQ3MyIsICJyZXBvcnRHbG9iYWxFcnJvciIsICJkZWZhdWx0T25VbmNhdWdodEVycm9yIiwgImRlZmF1bHRPbkNhdWdodEVycm9yIiwgImRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IiLCAibG9nVW5jYXVnaHRFcnJvciIsICJlcnJvckluZm8iLCAib25VbmNhdWdodEVycm9yIiwgImUkNzQiLCAibG9nQ2F1Z2h0RXJyb3IiLCAiYm91bmRhcnkiLCAib25DYXVnaHRFcnJvciIsICJlJDc1IiwgImNyZWF0ZVJvb3RFcnJvclVwZGF0ZSIsICJjcmVhdGVDbGFzc0Vycm9yVXBkYXRlIiwgImluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlIiwgImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsICJsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCIsICJzdGFjayIsICJ0aHJvd0V4Y2VwdGlvbiIsICJyb290UmVuZGVyTGFuZXMiLCAicmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSIsICJ3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIiwgImF0dGFjaFBpbmdMaXN0ZW5lciIsICJ3cmFwcGVyRXJyb3IiLCAid29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyIsICJTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24iLCAicmVjb25jaWxlQ2hpbGRyZW4iLCAibmV4dENoaWxkcmVuIiwgInVwZGF0ZUZvcndhcmRSZWYiLCAicHJvcHNXaXRob3V0UmVmIiwgImJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsiLCAidXBkYXRlTWVtb0NvbXBvbmVudCIsICJ1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50IiwgImNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0IiwgInByZXZQcm9wcyIsICJ1cGRhdGVGdW5jdGlvbkNvbXBvbmVudCIsICJ1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQiLCAiZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQiLCAibmV4dEJhc2VMYW5lcyIsICJtYXJrUmVmIiwgInJlcGxheUZ1bmN0aW9uQ29tcG9uZW50IiwgInVwZGF0ZUNsYXNzQ29tcG9uZW50IiwgImNvbnRleHRUeXBlIiwgInVucmVzb2x2ZWRPbGRQcm9wcyIsICJvbGRDb250ZXh0IiwgImNvbnRleHRUeXBlJGpzY29tcCQwIiwgIm1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nIiwgIlNVU1BFTkRFRF9NQVJLRVIiLCAibW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlIiwgImdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlIiwgInByaW1hcnlUcmVlRGlkRGVmZXIiLCAid29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUiLCAidXBkYXRlU3VzcGVuc2VDb21wb25lbnQiLCAic2hvd0ZhbGxiYWNrIiwgImRpZFN1c3BlbmQiLCAibmV4dEluc3RhbmNlIiwgIkpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCIsICJjIiwgIm1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlciIsICJtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuIiwgInJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nIiwgImRpZ2VzdCIsICJwcmltYXJ5Q2hpbGRyZW4iLCAib2Zmc2NyZWVuUHJvcHMiLCAic2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyIiwgImluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSIsICJpc0JhY2t3YXJkcyIsICJ0YWlsIiwgImxhc3RDb250ZW50Um93IiwgInRhaWxNb2RlIiwgInJlbmRlclN0YXRlIiwgInVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudCIsICJyZXZlYWxPcmRlciIsICJhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZSIsICJkaWRTdXNwZW5kQmVmb3JlIiwgImJlZ2luV29yayIsICJsYXp5Q29tcG9uZW50IiwgImdldFJlc291cmNlIiwgImdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lciIsICJzZXRJbml0aWFsUHJvcGVydGllcyIsICJyZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UiLCAiY2FuSHlkcmF0ZUluc3RhbmNlIiwgImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCAibWFya1VwZGF0ZSIsICJwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQiLCAicmVzb3VyY2UiLCAicHJlbG9hZFJlc291cmNlIiwgInNjaGVkdWxlUmV0cnlFZmZlY3QiLCAicmV0cnlRdWV1ZSIsICJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMiLCAiY3V0T2ZmVGFpbElmTmVlZGVkIiwgImhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayIsICJsYXN0VGFpbE5vZGUiLCAibGFzdFRhaWxOb2RlJDExMyIsICJidWJibGVQcm9wZXJ0aWVzIiwgImNvbXBsZXRlZFdvcmsiLCAiZGlkQmFpbG91dCIsICJuZXdDaGlsZExhbmVzIiwgInN1YnRyZWVGbGFncyIsICJjaGlsZCQxMTQiLCAiY29tcGxldGVXb3JrIiwgImNhY2hlJDEyNyIsICJsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyIsICJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lIiwgInVud2luZFdvcmsiLCAidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwgImludGVycnVwdGVkV29yayIsICJjb21taXRIb29rRWZmZWN0TGlzdE1vdW50IiwgImZsYWdzIiwgImZpbmlzaGVkV29yayIsICJsYXN0RWZmZWN0IiwgImZpcnN0RWZmZWN0IiwgImNhcHR1cmVDb21taXRQaGFzZUVycm9yIiwgImNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCIsICJuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwIiwgImRlc3Ryb3kiLCAibmVhcmVzdE1vdW50ZWRBbmNlc3RvciIsICJkZXN0cm95XyIsICJjb21taXRDbGFzc0NhbGxiYWNrcyIsICJzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQiLCAic2FmZWx5QXR0YWNoUmVmIiwgImluc3RhbmNlVG9Vc2UiLCAic2FmZWx5RGV0YWNoUmVmIiwgImVycm9yJDE0MyIsICJjb21taXRIb3N0TW91bnQiLCAiY29tbWl0SG9zdFVwZGF0ZSIsICJkb21FbGVtZW50IiwgInVwZGF0ZVByb3BlcnRpZXMiLCAiaXNIb3N0UGFyZW50IiwgImdldEhvc3RTaWJsaW5nIiwgImluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIiLCAiYmVmb3JlIiwgImluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZSIsICJjb21taXRIb3N0U2luZ2xldG9uQWNxdWlzaXRpb24iLCAic2luZ2xldG9uIiwgImF0dHJpYnV0ZXMiLCAib2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIiwgIm9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4iLCAibmVlZHNGb3JtUmVzZXQiLCAiUG9zc2libHlXZWFrU2V0IiwgIm5leHRFZmZlY3QiLCAiY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzIiwgImV2ZW50c0VuYWJsZWQiLCAiX2VuYWJsZWQiLCAic2VsZWN0aW9uIiwgImFuY2hvck9mZnNldCIsICJmb2N1c05vZGUiLCAiaW5kZXhXaXRoaW5BbmNob3IiLCAiaW5kZXhXaXRoaW5Gb2N1cyIsICJuZXh0IiwgInNlbGVjdGlvbkluZm9ybWF0aW9uIiwgInJlc29sdmVkUHJldlByb3BzIiwgImNsZWFyQ29udGFpbmVyU3BhcmluZ2x5IiwgImNvbW1pdExheW91dEVmZmVjdE9uRmliZXIiLCAiZmluaXNoZWRSb290IiwgInJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzIiwgImVycm9yJDE0MiIsICJjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyIsICJyZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5IiwgInJlZ2lzdGVyU3VzcGVuc2VJbnN0YW5jZVJldHJ5IiwgInByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIiwgInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMiLCAiZGV0YWNoRmliZXJBZnRlckVmZmVjdHMiLCAiaG9zdFBhcmVudCIsICJob3N0UGFyZW50SXNDb250YWluZXIiLCAicmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyIsICJjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyIiwgImRlbGV0ZWRGaWJlciIsICJwcmV2SG9zdFBhcmVudCIsICJwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyIiwgInJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZSIsICJjbGVhclN1c3BlbnNlQm91bmRhcnkiLCAicmV0cnlJZkJsb2NrZWRPbiIsICJnZXRSZXRyeUNhY2hlIiwgInJldHJ5Q2FjaGUiLCAiYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyIsICJ3YWtlYWJsZXMiLCAid2FrZWFibGUiLCAicmV0cnkiLCAicmVzb2x2ZVJldHJ5V2FrZWFibGUiLCAicmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyIsICJyb290JGpzY29tcCQwIiwgInBhcmVudEZpYmVyIiwgImNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIiLCAiY3VycmVudEhvaXN0YWJsZVJvb3QiLCAiY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzIiwgImhvaXN0YWJsZVJvb3QiLCAiY3VycmVudFJlc291cmNlIiwgIm1heWJlTm9kZXMiLCAiZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlIiwgIm1vdW50SG9pc3RhYmxlIiwgImFjcXVpcmVSZXNvdXJjZSIsICJ0YWdDYWNoZXMiLCAiZ2V0SG9pc3RhYmxlUm9vdCIsICJyZWN1cnNpdmVseVJlc2V0Rm9ybXMiLCAiZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSIsICJ3YXNIaWRkZW4iLCAicHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiIsICJyZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyIsICJkaXNwbGF5IiwgImhvc3RQYXJlbnRGaWJlciIsICJwYXJlbnQkMTQ0IiwgImJlZm9yZSQxNDUiLCAicGFyZW50JDE0NiIsICJiZWZvcmUkMTQ3IiwgImZpbmlzaGVkUm9vdCRqc2NvbXAkMCIsICJpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzIiwgImhpZGRlbkNhbGxiYWNrcyIsICJjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzIiwgInByZXZpb3VzQ2FjaGUiLCAiY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QiLCAicmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMiLCAiY29tbWl0dGVkTGFuZXMiLCAiY29tbWl0dGVkVHJhbnNpdGlvbnMiLCAiY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlciIsICJfZmluaXNoZWRXb3JrJG1lbW9pemUyIiwgImlkIiwgIm9uUG9zdENvbW1pdCIsICJyZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMiLCAicmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzIiwgImNvbW1pdHRlZExhbmVzJGpzY29tcCQwIiwgImNvbW1pdHRlZFRyYW5zaXRpb25zJGpzY29tcCQwIiwgInN1c3BlbnNleUNvbW1pdEZsYWciLCAicmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0IiwgImFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyIiwgInN1c3BlbmRSZXNvdXJjZSIsICJwcmV2aW91c0hvaXN0YWJsZVJvb3QiLCAiZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MiLCAicHJldmlvdXNGaWJlciIsICJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzIiwgImNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4iLCAiY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyIiwgInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMiLCAiZGVsZXRlZFN1YnRyZWVSb290IiwgInNpYmxpbmciLCAiRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciIsICJyZXNvdXJjZVR5cGUiLCAiY2FjaGVGb3JUeXBlIiwgIlBvc3NpYmx5V2Vha01hcCIsICJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiIsICJ3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlIiwgIndvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyIsICJ3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyIsICJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIiLCAid29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMiLCAid29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMiLCAid29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSIsICJ3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zIiwgInBlbmRpbmdFZmZlY3RzU3RhdHVzIiwgInBlbmRpbmdFZmZlY3RzUm9vdCIsICJwZW5kaW5nRmluaXNoZWRXb3JrIiwgInBlbmRpbmdFZmZlY3RzTGFuZXMiLCAicGVuZGluZ0VmZmVjdHNSZW1haW5pbmdMYW5lcyIsICJwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zIiwgInBlbmRpbmdSZWNvdmVyYWJsZUVycm9ycyIsICJhY3Rpb25TY29wZUxhbmUiLCAic3VzcGVuc2VIYW5kbGVyIiwgInByZXBhcmVGcmVzaFN0YWNrIiwgIm1hcmtSb290U3VzcGVuZGVkIiwgImVuc3VyZVJvb3RJc1NjaGVkdWxlZCIsICJwZXJmb3JtV29ya09uUm9vdCIsICJmb3JjZVN5bmMiLCAic2hvdWxkVGltZVNsaWNlIiwgImV4aXRTdGF0dXMiLCAicmVuZGVyUm9vdENvbmN1cnJlbnQiLCAicmVuZGVyUm9vdFN5bmMiLCAicmVuZGVyV2FzQ29uY3VycmVudCIsICJpc1JlbmRlckNvbnNpc3RlbnRXaXRoRXh0ZXJuYWxTdG9yZXMiLCAid2FzUm9vdERlaHlkcmF0ZWQiLCAic2NoZWR1bGVUaW1lb3V0IiwgImNvbW1pdFJvb3RXaGVuUmVhZHkiLCAicmVjb3ZlcmFibGVFcnJvcnMiLCAidHJhbnNpdGlvbnMiLCAiZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlIiwgImRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyIsICJzdXNwZW5kZWRDb21taXRSZWFzb24iLCAiY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lIiwgImNvbXBsZXRlZFJlbmRlckVuZFRpbWUiLCAic3VzcGVuZGVkU3RhdGUiLCAibm9vcCIsICJ3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5IiwgImNvbW1pdFJvb3QiLCAiY2hlY2siLCAiZGlkQXR0ZW1wdEVudGlyZVRyZWUiLCAiaW5kZXgkNCIsICJmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCIsICJyZXNldFdvcmtJblByb2dyZXNzU3RhY2siLCAidGltZW91dEhhbmRsZSIsICJjYW5jZWxUaW1lb3V0IiwgImFsbEVudGFuZ2xlZExhbmVzIiwgImluZGV4JDIiLCAiaGFuZGxlVGhyb3ciLCAidGhyb3duVmFsdWUiLCAicHVzaERpc3BhdGNoZXIiLCAicHJldkRpc3BhdGNoZXIiLCAicHVzaEFzeW5jRGlzcGF0Y2hlciIsICJwcmV2QXN5bmNEaXNwYXRjaGVyIiwgInNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nIiwgInByZXZFeGVjdXRpb25Db250ZXh0IiwgInVuaXRPZldvcmsiLCAicmVhc29uIiwgInRocm93QW5kVW53aW5kV29ya0xvb3AiLCAid29ya0xvb3BTeW5jIiwgInRocm93blZhbHVlJDE2NyIsICJwZXJmb3JtVW5pdE9mV29yayIsICJyZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrIiwgImhvc3RGaWJlciIsICJjb21wbGV0ZVVuaXRPZldvcmsiLCAid29ya0xvb3BDb25jdXJyZW50QnlTY2hlZHVsZXIiLCAidGhyb3duVmFsdWUkMTY5IiwgInN1c3BlbmRlZFJlYXNvbiIsICJ1bndpbmRVbml0T2ZXb3JrIiwgInNraXBTaWJsaW5ncyIsICJmbHVzaFBlbmRpbmdFZmZlY3RzIiwgInNjaGVkdWxlQ2FsbGJhY2skMSIsICJmbHVzaFBhc3NpdmVFZmZlY3RzIiwgImZsdXNoTXV0YXRpb25FZmZlY3RzIiwgImZsdXNoTGF5b3V0RWZmZWN0cyIsICJmbHVzaFNwYXduZWRXb3JrIiwgInJvb3RNdXRhdGlvbkhhc0VmZmVjdCIsICJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwgImN1ckZvY3VzZWRFbGVtIiwgInByaW9yRm9jdXNlZEVsZW0iLCAicHJpb3JTZWxlY3Rpb25SYW5nZSIsICJ3aW4iLCAic3RhcnQkanNjb21wJDAiLCAiZW5kJGpzY29tcCQwIiwgInN0YXJ0TWFya2VyIiwgImVuZE1hcmtlciIsICJyYW5nZSIsICJyb290SGFzTGF5b3V0RWZmZWN0IiwgInJlbGVhc2VSb290UG9vbGVkQ2FjaGUiLCAib25SZWNvdmVyYWJsZUVycm9yIiwgInJlY292ZXJhYmxlRXJyb3IiLCAid2FzRGVsYXllZENvbW1pdCIsICJyZW5kZXJQcmlvcml0eSIsICJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdCIsICJyb290RmliZXIiLCAicGluZ0NhY2hlIiwgInRocmVhZElEcyIsICJwaW5nU3VzcGVuZGVkUm9vdCIsICJyZXRyeVRpbWVkT3V0Qm91bmRhcnkiLCAiYm91bmRhcnlGaWJlciIsICJyZXRyeUxhbmUiLCAicHJpb3JpdHlMZXZlbCIsICJmaXJzdFNjaGVkdWxlZFJvb3QiLCAibGFzdFNjaGVkdWxlZFJvb3QiLCAiZGlkU2NoZWR1bGVNaWNyb3Rhc2siLCAibWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrIiwgImlzRmx1c2hpbmdXb3JrIiwgImN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lIiwgInNjaGVkdWxlSW1tZWRpYXRlUm9vdFNjaGVkdWxlVGFzayIsICJzeW5jVHJhbnNpdGlvbkxhbmVzIiwgIm9ubHlMZWdhY3kiLCAiZGlkUGVyZm9ybVNvbWVXb3JrIiwgInJvb3QkMTc0IiwgInBlcmZvcm1TeW5jV29ya09uUm9vdCIsICJwcm9jZXNzUm9vdFNjaGVkdWxlSW5JbW1lZGlhdGVUYXNrIiwgInByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzayIsICJzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uIiwgInByZXYiLCAic2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayIsICJpbmRleCQzIiwgImV4cGlyYXRpb25UaW1lIiwgInBlcmZvcm1Xb3JrT25Sb290VmlhU2NoZWR1bGVyVGFzayIsICJkaWRUaW1lb3V0IiwgIm9yaWdpbmFsQ2FsbGJhY2tOb2RlIiwgIndvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwIiwgInNjaGVkdWxlTWljcm90YXNrIiwgImNvZXJjZUZvcm1BY3Rpb25Qcm9wIiwgImFjdGlvblByb3AiLCAiY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyIiwgImZvcm0iLCAic3VibWl0dGVyIiwgInRlbXAiLCAiZXh0cmFjdEV2ZW50cyQxIiwgIm1heWJlVGFyZ2V0SW5zdCIsICJpJGpzY29tcCRpbmxpbmVfMTUyOCIsICJldmVudE5hbWUkanNjb21wJGlubGluZV8xNTI5IiwgImRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE1MzAiLCAiY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE1MzEiLCAibm9uRGVsZWdhdGVkRXZlbnRzIiwgImV2ZW50U3lzdGVtRmxhZ3MiLCAiX2Rpc3BhdGNoUXVldWUkaSIsICJwcmV2aW91c0luc3RhbmNlIiwgImkkanNjb21wJDAiLCAiX2Rpc3BhdGNoTGlzdGVuZXJzJGkiLCAiY3VycmVudFRhcmdldCIsICJ0YXJnZXRFbGVtZW50IiwgImxpc3RlbmVyU2V0S2V5IiwgImFkZFRyYXBwZWRFdmVudExpc3RlbmVyIiwgImxpc3RlblRvTmF0aXZlRXZlbnQiLCAiaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciIsICJsaXN0ZW5pbmdNYXJrZXIiLCAicm9vdENvbnRhaW5lckVsZW1lbnQiLCAib3duZXJEb2N1bWVudCIsICJ0YXJnZXRDb250YWluZXIiLCAibGlzdGVuZXJXcmFwcGVyIiwgImRpc3BhdGNoRGlzY3JldGVFdmVudCIsICJkaXNwYXRjaENvbnRpbnVvdXNFdmVudCIsICJkaXNwYXRjaEV2ZW50IiwgImRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbSIsICJ0YXJnZXRJbnN0JGpzY29tcCQwIiwgImFuY2VzdG9ySW5zdCIsICJub2RlVGFnIiwgImNvbnRhaW5lciIsICJncmFuZFRhZyIsICJTeW50aGV0aWNFdmVudEN0b3IiLCAiaW5DYXB0dXJlUGhhc2UiLCAiYWNjdW11bGF0ZVRhcmdldE9ubHkiLCAicmVhY3RFdmVudE5hbWUiLCAibGFzdEhvc3RDb21wb25lbnQiLCAiX2luc3RhbmNlIiwgImNyZWF0ZURpc3BhdGNoTGlzdGVuZXIiLCAiZ2V0UGFyZW50IiwgImFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQiLCAiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCAiaGFuZGxlRXZlbnRGdW5jIiwgImZhbGxiYWNrRGF0YSIsICJldmVudFR5cGUiLCAidGFyZ2V0RmliZXIiLCAiY2FwdHVyZU5hbWUiLCAiX2luc3RhbmNlMiIsICJjb21tb24iLCAiX2luc3RhbmNlMyIsICJOT1JNQUxJWkVfTkVXTElORVNfUkVHRVgiLCAiTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYIiwgIm5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSIsICJtYXJrdXAiLCAic2VydmVyVGV4dCIsICJjbGllbnRUZXh0IiwgInNldFByb3AiLCAic2V0UHJvcE9uQ3VzdG9tRWxlbWVudCIsICJoYXNTcmMiLCAiaGFzU3JjU2V0IiwgInByb3BLZXkiLCAicHJvcFZhbHVlJDE4OCIsICJsYXN0UHJvcHMiLCAibGFzdFByb3AiLCAicHJvcEtleSQyMDUiLCAicHJvcEtleSQyMjEiLCAicHJvcEtleSQyMjYiLCAicHJvcEtleSQyMzEiLCAicHJvcEtleSQyMzYiLCAibmFtZXNwYWNlVVJJIiwgInBhcmVudE5hbWVzcGFjZSIsICJjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQiLCAibG9jYWxQcm9taXNlIiwgImhhbmRsZUVycm9ySW5OZXh0VGljayIsICJwYXJlbnRJbnN0YW5jZSIsICJzdXNwZW5zZUluc3RhbmNlIiwgInBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb24iLCAiZGVwdGgiLCAibmV4dE5vZGUiLCAibmV4dE5vZGUkanNjb21wJDAiLCAiYW55UHJvcHMiLCAibm9kZVR5cGUiLCAidGFyZ2V0SW5zdGFuY2UiLCAiZGF0YSIsICJyb290Q29udGFpbmVySW5zdGFuY2UiLCAicHJlbG9hZFByb3BzTWFwIiwgInByZWNvbm5lY3RzU2V0IiwgInByZXZpb3VzRGlzcGF0Y2hlciIsICJmbHVzaFN5bmNXb3JrIiwgInJlcXVlc3RGb3JtUmVzZXQiLCAicHJlZmV0Y2hETlMiLCAicHJlY29ubmVjdCIsICJwcmVsb2FkIiwgInByZWxvYWRNb2R1bGUiLCAicHJlaW5pdFNjcmlwdCIsICJwcmVpbml0U3R5bGUiLCAicHJlaW5pdE1vZHVsZVNjcmlwdCIsICJwcmV2aW91c1dhc1JlbmRlcmluZyIsICJ3YXNSZW5kZXJpbmciLCAiZm9ybUluc3QiLCAiZ2xvYmFsRG9jdW1lbnQiLCAicHJlY29ubmVjdEFzIiwgInJlbCIsICJocmVmIiwgImNyb3NzT3JpZ2luIiwgImxpbWl0ZWRFc2NhcGVkSHJlZiIsICJhcyIsICJwcmVsb2FkU2VsZWN0b3IiLCAiZ2V0U3R5bGVLZXkiLCAiZ2V0U2NyaXB0S2V5IiwgImdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkiLCAiZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5IiwgInByZWNlZGVuY2UiLCAiYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0IiwgImxpbmsiLCAicmVqZWN0IiwgImluc2VydFN0eWxlc2hlZXQiLCAic3JjIiwgInNjcmlwdHMiLCAiYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQiLCAiY3VycmVudFByb3BzIiwgInN0eWxlcyQyNDQiLCAicmVzb3VyY2UkMjQ1IiwgInByZWxvYWRTdHlsZXNoZWV0IiwgInN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyIsICJyYXdQcm9wcyIsICJwcmVsb2FkUHJvcHMiLCAic3R5bGVQcm9wcyIsICJpbnN0YW5jZSQyNTAiLCAibGlua0luc3RhbmNlIiwgIm5vZGVzIiwgInByaW9yIiwgInN0eWxlc2hlZXRQcm9wcyIsICJzY3JpcHRQcm9wcyIsICJrZXlBdHRyaWJ1dGUiLCAiY2FjaGVzIiwgIm5vZGVLZXkiLCAiaG9zdENvbnRleHQiLCAib25VbnN1c3BlbmQiLCAiaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMiLCAiY29tbWl0IiwgInN0eWxlc2hlZXRUaW1lciIsICJ1bnN1c3BlbmQiLCAicHJlY2VkZW5jZXNCeVJvb3QiLCAiaW5zZXJ0U3R5bGVzaGVldEludG9Sb290IiwgInByZWNlZGVuY2VzIiwgIkZpYmVyUm9vdE5vZGUiLCAiaHlkcmF0ZSIsICJmb3JtU3RhdGUiLCAiY3JlYXRlRmliZXJSb290IiwgImluaXRpYWxDaGlsZHJlbiIsICJoeWRyYXRpb25DYWxsYmFja3MiLCAiaXNTdHJpY3RNb2RlIiwgInRyYW5zaXRpb25DYWxsYmFja3MiLCAiZ2V0Q29udGV4dEZvclN1YnRyZWUiLCAicGFyZW50Q29tcG9uZW50IiwgInVwZGF0ZUNvbnRhaW5lckltcGwiLCAibWFya1JldHJ5TGFuZUltcGwiLCAibWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQiLCAiYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24iLCAiYmxvY2tlZE9uIiwgImZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQiLCAicmV0dXJuX3RhcmdldEluc3QiLCAiY2xlYXJJZkNvbnRpbnVvdXNFdmVudCIsICJxdWV1ZUlmQ29udGludW91c0V2ZW50IiwgImRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cyIsICJmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCIsICJoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IiwgInF1ZXVlZEZvY3VzIiwgInF1ZXVlZERyYWciLCAicXVldWVkTW91c2UiLCAicXVldWVkUG9pbnRlcnMiLCAicXVldWVkUG9pbnRlckNhcHR1cmVzIiwgInF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cyIsICJhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50IiwgImV4aXN0aW5nUXVldWVkRXZlbnQiLCAicG9pbnRlcklkIiwgImF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldCIsICJxdWV1ZWRUYXJnZXQiLCAiYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudCIsICJxdWV1ZWRFdmVudCIsICJ0YXJnZXRDb250YWluZXJzIiwgIm5leHRCbG9ja2VkT24iLCAibmF0aXZlRXZlbnRDbG9uZSIsICJhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXAiLCAibWFwIiwgInJlcGxheVVuYmxvY2tlZEV2ZW50cyIsICJzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQiLCAidW5ibG9ja2VkIiwgImxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSIsICJzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQiLCAiZm9ybVJlcGxheWluZ1F1ZXVlIiwgInN1Ym1pdHRlck9yQWN0aW9uIiwgInVuYmxvY2siLCAiZm9ybVByb3BzIiwgIlJlYWN0RE9NUm9vdCIsICJpbnRlcm5hbFJvb3QiLCAiUmVhY3RET01IeWRyYXRpb25Sb290IiwgImlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTc4NSIsICJjb21wb25lbnRPckVsZW1lbnQiLCAiaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjI1NiIsICJob29rJGpzY29tcCRpbmxpbmVfMjI1NyIsICJyZXF1aXJlX2NsaWVudCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImNoZWNrRENFIiwgImVyciIsICJpbXBvcnRfcmVhY3QiLCAiaW1wb3J0X2NsaWVudCIsICJpbXBvcnRfcmVhY3QiLCAicm9vdF9kZWZhdWx0IiwgIlJlYWN0IiwgImltcG9ydF9yZWFjdCIsICJwYXRpZW50c19kZWZhdWx0IiwgInBhdGllbnRzIiwgInNldFBhdGllbnRzIiwgInIiLCAiZCIsICJSZWFjdCIsICJwYXRpZW50IiwgImltcG9ydF9yZWFjdCIsICJtZWRpY2F0aW9uc19kZWZhdWx0IiwgIm1lZGljYXRpb25zIiwgInNldE1lZGljYXRpb25zIiwgInIiLCAiUmVhY3QiLCAibSIsICJpbXBvcnRfcmVhY3QiLCAicGF0aWVudF9kZWZhdWx0IiwgInBhdGllbnQiLCAic2V0UGF0aWVudCIsICJpZCIsICJyIiwgImQiLCAiUmVhY3QiLCAiTm90Rm91bmQiLCAiUmVhY3QiLCAicGF0aCIsICJyb290IiwgInBhZ2UiLCAicm9vdF9kZWZhdWx0IiwgInBhdGllbnRfZGVmYXVsdCIsICJwYXRpZW50c19kZWZhdWx0IiwgIm1lZGljYXRpb25zX2RlZmF1bHQiXQp9Cg==
