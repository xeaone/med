import { createRequire } from 'module'; const require = createRequire(import.meta.url);
import l from"path";import d from"fs";var n=()=>({statusCode:200,body:JSON.stringify([{id:"0",firstName:"Alex",lastName:"Elias",medication:"0"}])});var a=()=>({statusCode:200,body:JSON.stringify([{id:"1",title:"Ibuprofen"}])});var c=()=>({statusCode:200,body:JSON.stringify({id:"0",firstName:"Alex",lastName:"Elias",medication:"0"})});var r=async()=>({statusCode:200,headers:{"content-type":"text/html"},body:`
        <html lang="en">
            <head>
                <!-- <base href="/Stage/"> -->
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <meta name="color-scheme" content="light dark" />
                <script type="module" src="./client.js" defer></script>
                <link rel="stylesheet" href="./client.css" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.colors.min.css" />
                <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
            </head>
            <body>
                <div class="container"></div>
            </body>
        </html>
        `}),i,m=async()=>{try{return i=i??await d.promises.readFile(l.resolve("./client.js"),{encoding:"utf8"}),{statusCode:200,headers:{"content-type":"text/javascript"},body:i}}catch(e){return{statusCode:500,body:JSON.stringify(e)}}},o,p=async()=>{try{return o=o??await d.promises.readFile(l.resolve("./client.css"),{encoding:"utf8"}),{statusCode:200,headers:{"content-type":"text/css"},body:o}}catch(e){return{statusCode:500,body:JSON.stringify(e)}}},G=async e=>{try{let t=e.requestContext.http.method,s=e.requestContext.http.path?.replace(/\/(Stage|Pro)\/?/,"/"),y;try{y=e.body?JSON.parse(e.body):null}catch{return{statusCode:400,body:JSON.stringify({message:"body not valid"})}}return t==="GET"&&s==="/api/patient"?c():t==="GET"&&s==="/api/patients"?n():t==="GET"&&s==="/api/medications"?a():t==="GET"&&s==="/client.js"?m():t==="GET"&&s==="/client.css"?p():t==="GET"&&s==="/"||t==="GET"&&s==="/patient"||t==="GET"&&s==="/patients"||t==="GET"&&s==="/medications"?r():{statusCode:404,body:JSON.stringify({message:"Not Found"})}}catch(t){return console.error(t),{statusCode:500,body:JSON.stringify(t)}}};export{G as handler};
//# sourceMappingURL=data:application/json;base64,
