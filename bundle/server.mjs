import { createRequire } from 'module'; const require = createRequire(import.meta.url);
import o from"path";import i from"fs";var c=async()=>({statusCode:200,headers:{"content-type":"text/html"},body:`
        <html lang="en">
            <head>
                <!-- <base href="/Stage/"> -->
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <meta name="color-scheme" content="light dark" />
                <script type="module" src="./client.js" defer></script>
                <link rel="stylesheet" href="./client.css" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.colors.min.css" />
                <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
            </head>
            <body>
                <!-- <main class="container"></main> -->
                <div class="container"></div>
            </body>
        </html>
        `}),r,a=async()=>{try{return r=r??await i.promises.readFile(o.resolve("./client.js"),{encoding:"utf8"}),{statusCode:200,headers:{"content-type":"text/javascript"},body:r}}catch(t){return{statusCode:500,body:JSON.stringify(t)}}},n,l=async()=>{try{return n=n??await i.promises.readFile(o.resolve("./client.css"),{encoding:"utf8"}),{statusCode:200,headers:{"content-type":"text/css"},body:n}}catch(t){return{statusCode:500,body:JSON.stringify(t)}}},h=async t=>{try{let e=t.requestContext.http.method,s=t.requestContext.http.path?.replace(/\/(Stage|Pro)\/?/,"/");return e==="GET"&&s==="/client.js"?a():e==="GET"&&s==="/client.css"?l():e==="GET"&&!s.includes(".")?c():{statusCode:404,body:JSON.stringify({message:"Not Found"})}}catch(e){return{statusCode:500,body:JSON.stringify(e)}}};export{h as handler};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc2VydmVyL3NlcnZlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5UmVzdWx0VjIsIEFQSUdhdGV3YXlQcm94eUV2ZW50VjIsIEhhbmRsZXIgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuY29uc3Qgcm9vdFBhZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAndGV4dC9odG1sJyB9LFxuICAgICAgICBib2R5OiAvKmh0bWwqL2BcbiAgICAgICAgPGh0bWwgbGFuZz1cImVuXCI+XG4gICAgICAgICAgICA8aGVhZD5cbiAgICAgICAgICAgICAgICA8IS0tIDxiYXNlIGhyZWY9XCIvU3RhZ2UvXCI+IC0tPlxuICAgICAgICAgICAgICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MVwiIC8+XG4gICAgICAgICAgICAgICAgPG1ldGEgbmFtZT1cImNvbG9yLXNjaGVtZVwiIGNvbnRlbnQ9XCJsaWdodCBkYXJrXCIgLz5cbiAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL2NsaWVudC5qc1wiIGRlZmVyPjwvc2NyaXB0PlxuICAgICAgICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiLi9jbGllbnQuY3NzXCIgLz5cbiAgICAgICAgICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHBpY29jc3MvcGljb0AyL2Nzcy9waWNvLm1pbi5jc3NcIiAvPlxuICAgICAgICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9AcGljb2Nzcy9waWNvQDIvY3NzL3BpY28uY29sb3JzLm1pbi5jc3NcIiAvPlxuICAgICAgICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NYXRlcmlhbCtTeW1ib2xzK091dGxpbmVkOm9wc3osd2dodCxGSUxMLEdSQURAMjAuLjQ4LDEwMC4uNzAwLDAuLjEsLTUwLi4yMDBcIiAvPlxuICAgICAgICAgICAgPC9oZWFkPlxuICAgICAgICAgICAgPGJvZHk+XG4gICAgICAgICAgICAgICAgPCEtLSA8bWFpbiBjbGFzcz1cImNvbnRhaW5lclwiPjwvbWFpbj4gLS0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPjwvZGl2PlxuICAgICAgICAgICAgPC9ib2R5PlxuICAgICAgICA8L2h0bWw+XG4gICAgICAgIGAsXG4gICAgfTtcbn07XG5cbmxldCBjbGllbnRKc0ZpbGU6IHN0cmluZztcbmNvbnN0IGNsaWVudEpzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNsaWVudEpzRmlsZSA9IGNsaWVudEpzRmlsZSA/PyBhd2FpdCBmcy5wcm9taXNlcy5yZWFkRmlsZShwYXRoLnJlc29sdmUoJy4vY2xpZW50LmpzJyksIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAndGV4dC9qYXZhc2NyaXB0JyB9LCBib2R5OiBjbGllbnRKc0ZpbGUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA1MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGVycm9yKSB9O1xuICAgIH1cbn07XG5cbmxldCBjbGllbnRDc3NGaWxlOiBzdHJpbmc7XG5jb25zdCBjbGllbnRDc3MgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY2xpZW50Q3NzRmlsZSA9IGNsaWVudENzc0ZpbGUgPz8gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUocGF0aC5yZXNvbHZlKCcuL2NsaWVudC5jc3MnKSwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICd0ZXh0L2NzcycgfSwgYm9keTogY2xpZW50Q3NzRmlsZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoZXJyb3IpIH07XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXI6IEhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50VjIpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdFYyPiA9PiB7XG4gICAgdHJ5IHtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSBldmVudC5yZXF1ZXN0Q29udGV4dC5odHRwLm1ldGhvZDtcbiAgICAgICAgY29uc3QgcGF0aG5hbWUgPSBldmVudC5yZXF1ZXN0Q29udGV4dC5odHRwLnBhdGg/LnJlcGxhY2UoL1xcLyhTdGFnZXxQcm8pXFwvPy8sICcvJyk7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQpO1xuXG4gICAgICAgIC8vIGxldCBib2R5O1xuICAgICAgICAvLyB0cnkge1xuICAgICAgICAvLyAgICAgYm9keSA9IEpTT04ucGFyc2UoZXZlbnQuYm9keSB8fCAne30nKTtcbiAgICAgICAgLy8gfSBjYXRjaCB7XG4gICAgICAgIC8vICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ2JvZHkgbm90IHZhbGlkJyB9KSB9O1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gaWYgKG1ldGhvZCA9PT0gJ0dFVCcgJiYgcGF0aG5hbWUgPT09ICcvJykge1xuICAgICAgICAvLyAgICAgcmV0dXJuIHJvb3RQYWdlKCk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBpZiAobWV0aG9kID09PSAnR0VUJyAmJiBwYXRobmFtZSA9PT0gJy9jbGllbnQuanMnKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50SnMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2QgPT09ICdHRVQnICYmIHBhdGhuYW1lID09PSAnL2NsaWVudC5jc3MnKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Q3NzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0aG9kID09PSAnR0VUJyAmJiAhcGF0aG5hbWUuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJvb3RQYWdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDQsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ05vdCBGb3VuZCcgfSkgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoZXJyb3IpIH07XG4gICAgfVxuXG59OyJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxPQUFPQSxNQUFVLE9BQ2pCLE9BQU9DLE1BQVEsS0FFZixJQUFNQyxFQUFXLFVBQ04sQ0FDSCxXQUFZLElBQ1osUUFBUyxDQUFFLGVBQWdCLFdBQVksRUFDdkMsS0FBYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FrQmxCLEdBR0FDLEVBQ0VDLEVBQVcsU0FBWSxDQUN6QixHQUFJLENBQ0EsT0FBQUQsRUFBZUEsR0FBZ0IsTUFBTUYsRUFBRyxTQUFTLFNBQVNELEVBQUssUUFBUSxhQUFhLEVBQUcsQ0FBRSxTQUFVLE1BQU8sQ0FBQyxFQUNwRyxDQUFFLFdBQVksSUFBSyxRQUFTLENBQUUsZUFBZ0IsaUJBQWtCLEVBQUcsS0FBTUcsQ0FBYSxDQUNqRyxPQUFTRSxFQUFPLENBQ1osTUFBTyxDQUFFLFdBQVksSUFBSyxLQUFNLEtBQUssVUFBVUEsQ0FBSyxDQUFFLENBQzFELENBQ0osRUFFSUMsRUFDRUMsRUFBWSxTQUFZLENBQzFCLEdBQUksQ0FDQSxPQUFBRCxFQUFnQkEsR0FBaUIsTUFBTUwsRUFBRyxTQUFTLFNBQVNELEVBQUssUUFBUSxjQUFjLEVBQUcsQ0FBRSxTQUFVLE1BQU8sQ0FBQyxFQUN2RyxDQUFFLFdBQVksSUFBSyxRQUFTLENBQUUsZUFBZ0IsVUFBVyxFQUFHLEtBQU1NLENBQWMsQ0FDM0YsT0FBU0QsRUFBTyxDQUNaLE1BQU8sQ0FBRSxXQUFZLElBQUssS0FBTSxLQUFLLFVBQVVBLENBQUssQ0FBRSxDQUMxRCxDQUNKLEVBRWFHLEVBQW1CLE1BQU9DLEdBQW9FLENBQ3ZHLEdBQUksQ0FFQSxJQUFNQyxFQUFTRCxFQUFNLGVBQWUsS0FBSyxPQUNuQ0UsRUFBV0YsRUFBTSxlQUFlLEtBQUssTUFBTSxRQUFRLG1CQUFvQixHQUFHLEVBZWhGLE9BQUlDLElBQVcsT0FBU0MsSUFBYSxhQUMxQlAsRUFBUyxFQUdoQk0sSUFBVyxPQUFTQyxJQUFhLGNBQzFCSixFQUFVLEVBR2pCRyxJQUFXLE9BQVMsQ0FBQ0MsRUFBUyxTQUFTLEdBQUcsRUFDbkNULEVBQVMsRUFHYixDQUFFLFdBQVksSUFBSyxLQUFNLEtBQUssVUFBVSxDQUFFLFFBQVMsV0FBWSxDQUFDLENBQUUsQ0FFN0UsT0FBU0csRUFBTyxDQUNaLE1BQU8sQ0FBRSxXQUFZLElBQUssS0FBTSxLQUFLLFVBQVVBLENBQUssQ0FBRSxDQUMxRCxDQUVKIiwKICAibmFtZXMiOiBbInBhdGgiLCAiZnMiLCAicm9vdFBhZ2UiLCAiY2xpZW50SnNGaWxlIiwgImNsaWVudEpzIiwgImVycm9yIiwgImNsaWVudENzc0ZpbGUiLCAiY2xpZW50Q3NzIiwgImhhbmRsZXIiLCAiZXZlbnQiLCAibWV0aG9kIiwgInBhdGhuYW1lIl0KfQo=
