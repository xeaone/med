import { createRequire } from 'module'; const require = createRequire(import.meta.url);
import o from"path";import c from"fs";var i=async()=>({statusCode:200,headers:{"content-type":"text/html"},body:`
        <html lang="en">
            <head>
                <base href="/Stage/">
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <meta name="color-scheme" content="light dark" />
                <script type="module" src="./client.js" defer></script>
                <link rel="stylesheet" href="./client.css" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.colors.min.css" />
            </head>
            <body>
                <main class="container"></main>
            </body>
        </html>
        `}),r,a=async()=>{try{return r=r??await c.promises.readFile(o.resolve("./client.js"),{encoding:"utf8"}),{statusCode:200,headers:{"content-type":"text/javascript"},body:r}}catch(t){return{statusCode:500,body:JSON.stringify(t)}}},n,l=async()=>{try{return n=n??await c.promises.readFile(o.resolve("./client.css"),{encoding:"utf8"}),{statusCode:200,headers:{"content-type":"text/css"},body:n}}catch(t){return{statusCode:500,body:JSON.stringify(t)}}},h=async t=>{try{let e=t.requestContext.http.method,s=t.requestContext.http.path?.replace(/\/(Stage|Pro)\/?/,"/");return console.log(t),e==="GET"&&s==="/"?i():e==="GET"&&s==="/client.js"?a():e==="GET"&&s==="/client.css"?l():{statusCode:404,body:JSON.stringify({message:"Not Found"})}}catch(e){return{statusCode:500,body:JSON.stringify(e)}}};export{h as handler};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc2VydmVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlSZXN1bHRWMiwgQVBJR2F0ZXdheVByb3h5UmVzdWx0LCBBUElHYXRld2F5UHJveHlFdmVudFYyLCBIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSc7XG4vLyBpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5jb25zdCByb290UGFnZSA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICd0ZXh0L2h0bWwnIH0sXG4gICAgICAgIGJvZHk6IC8qaHRtbCovYFxuICAgICAgICA8aHRtbCBsYW5nPVwiZW5cIj5cbiAgICAgICAgICAgIDxoZWFkPlxuICAgICAgICAgICAgICAgIDxiYXNlIGhyZWY9XCIvU3RhZ2UvXCI+XG4gICAgICAgICAgICAgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xXCIgLz5cbiAgICAgICAgICAgICAgICA8bWV0YSBuYW1lPVwiY29sb3Itc2NoZW1lXCIgY29udGVudD1cImxpZ2h0IGRhcmtcIiAvPlxuICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIHNyYz1cIi4vY2xpZW50LmpzXCIgZGVmZXI+PC9zY3JpcHQ+XG4gICAgICAgICAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIuL2NsaWVudC5jc3NcIiAvPlxuICAgICAgICAgICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9AcGljb2Nzcy9waWNvQDIvY3NzL3BpY28ubWluLmNzc1wiIC8+XG4gICAgICAgICAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL0BwaWNvY3NzL3BpY29AMi9jc3MvcGljby5jb2xvcnMubWluLmNzc1wiIC8+XG4gICAgICAgICAgICA8L2hlYWQ+XG4gICAgICAgICAgICA8Ym9keT5cbiAgICAgICAgICAgICAgICA8bWFpbiBjbGFzcz1cImNvbnRhaW5lclwiPjwvbWFpbj5cbiAgICAgICAgICAgIDwvYm9keT5cbiAgICAgICAgPC9odG1sPlxuICAgICAgICBgLFxuICAgIH07XG59O1xuXG5sZXQgY2xpZW50SnNGaWxlOiBzdHJpbmc7XG5jb25zdCBjbGllbnRKcyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjbGllbnRKc0ZpbGUgPSBjbGllbnRKc0ZpbGUgPz8gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUocGF0aC5yZXNvbHZlKCcuL2NsaWVudC5qcycpLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMCwgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ3RleHQvamF2YXNjcmlwdCcgfSwgYm9keTogY2xpZW50SnNGaWxlIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNTAwLCBib2R5OiBKU09OLnN0cmluZ2lmeShlcnJvcikgfTtcbiAgICB9XG59O1xuXG5sZXQgY2xpZW50Q3NzRmlsZTogc3RyaW5nO1xuY29uc3QgY2xpZW50Q3NzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNsaWVudENzc0ZpbGUgPSBjbGllbnRDc3NGaWxlID8/IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHBhdGgucmVzb2x2ZSgnLi9jbGllbnQuY3NzJyksIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAndGV4dC9jc3MnIH0sIGJvZHk6IGNsaWVudENzc0ZpbGUgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA1MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGVycm9yKSB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFYyKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHRWMj4gPT4ge1xuICAgIHRyeSB7XG5cbiAgICAgICAgY29uc3QgbWV0aG9kID0gZXZlbnQucmVxdWVzdENvbnRleHQuaHR0cC5tZXRob2Q7XG4gICAgICAgIGNvbnN0IHBhdGhuYW1lID0gZXZlbnQucmVxdWVzdENvbnRleHQuaHR0cC5wYXRoPy5yZXBsYWNlKC9cXC8oU3RhZ2V8UHJvKVxcLz8vLCAnLycpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcblxuICAgICAgICAvLyBsZXQgYm9keTtcbiAgICAgICAgLy8gdHJ5IHtcbiAgICAgICAgLy8gICAgIGJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkgfHwgJ3t9Jyk7XG4gICAgICAgIC8vIH0gY2F0Y2gge1xuICAgICAgICAvLyAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNDAwLCBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6ICdib2R5IG5vdCB2YWxpZCcgfSkgfTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGlmIChtZXRob2QgPT09ICdHRVQnICYmIHBhdGhuYW1lID09PSAnLycpIHtcbiAgICAgICAgICAgIHJldHVybiByb290UGFnZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcgJiYgcGF0aG5hbWUgPT09ICcvY2xpZW50LmpzJykge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudEpzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0aG9kID09PSAnR0VUJyAmJiBwYXRobmFtZSA9PT0gJy9jbGllbnQuY3NzJykge1xuICAgICAgICAgICAgcmV0dXJuIGNsaWVudENzcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNDA0LCBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6ICdOb3QgRm91bmQnIH0pIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiA1MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGVycm9yKSB9O1xuICAgIH1cblxufTsiXSwKICAibWFwcGluZ3MiOiAiO0FBRUEsT0FBT0EsTUFBVSxPQUNqQixPQUFPQyxNQUFRLEtBRWYsSUFBTUMsRUFBVyxVQUNOLENBQ0gsV0FBWSxJQUNaLFFBQVMsQ0FBRSxlQUFnQixXQUFZLEVBQ3ZDLEtBQWM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FnQmxCLEdBR0FDLEVBQ0VDLEVBQVcsU0FBWSxDQUN6QixHQUFJLENBQ0EsT0FBQUQsRUFBZUEsR0FBZ0IsTUFBTUYsRUFBRyxTQUFTLFNBQVNELEVBQUssUUFBUSxhQUFhLEVBQUcsQ0FBRSxTQUFVLE1BQU8sQ0FBQyxFQUNwRyxDQUFFLFdBQVksSUFBSyxRQUFTLENBQUUsZUFBZ0IsaUJBQWtCLEVBQUcsS0FBTUcsQ0FBYSxDQUNqRyxPQUFTRSxFQUFPLENBQ1osTUFBTyxDQUFFLFdBQVksSUFBSyxLQUFNLEtBQUssVUFBVUEsQ0FBSyxDQUFFLENBQzFELENBQ0osRUFFSUMsRUFDRUMsRUFBWSxTQUFZLENBQzFCLEdBQUksQ0FDQSxPQUFBRCxFQUFnQkEsR0FBaUIsTUFBTUwsRUFBRyxTQUFTLFNBQVNELEVBQUssUUFBUSxjQUFjLEVBQUcsQ0FBRSxTQUFVLE1BQU8sQ0FBQyxFQUN2RyxDQUFFLFdBQVksSUFBSyxRQUFTLENBQUUsZUFBZ0IsVUFBVyxFQUFHLEtBQU1NLENBQWMsQ0FDM0YsT0FBU0QsRUFBTyxDQUNaLE1BQU8sQ0FBRSxXQUFZLElBQUssS0FBTSxLQUFLLFVBQVVBLENBQUssQ0FBRSxDQUMxRCxDQUNKLEVBRWFHLEVBQW1CLE1BQU9DLEdBQW9FLENBQ3ZHLEdBQUksQ0FFQSxJQUFNQyxFQUFTRCxFQUFNLGVBQWUsS0FBSyxPQUNuQ0UsRUFBV0YsRUFBTSxlQUFlLEtBQUssTUFBTSxRQUFRLG1CQUFvQixHQUFHLEVBV2hGLE9BVEEsUUFBUSxJQUFJQSxDQUFLLEVBU2JDLElBQVcsT0FBU0MsSUFBYSxJQUMxQlQsRUFBUyxFQUdoQlEsSUFBVyxPQUFTQyxJQUFhLGFBQzFCUCxFQUFTLEVBR2hCTSxJQUFXLE9BQVNDLElBQWEsY0FDMUJKLEVBQVUsRUFHZCxDQUFFLFdBQVksSUFBSyxLQUFNLEtBQUssVUFBVSxDQUFFLFFBQVMsV0FBWSxDQUFDLENBQUUsQ0FFN0UsT0FBU0YsRUFBTyxDQUNaLE1BQU8sQ0FBRSxXQUFZLElBQUssS0FBTSxLQUFLLFVBQVVBLENBQUssQ0FBRSxDQUMxRCxDQUVKIiwKICAibmFtZXMiOiBbInBhdGgiLCAiZnMiLCAicm9vdFBhZ2UiLCAiY2xpZW50SnNGaWxlIiwgImNsaWVudEpzIiwgImVycm9yIiwgImNsaWVudENzc0ZpbGUiLCAiY2xpZW50Q3NzIiwgImhhbmRsZXIiLCAiZXZlbnQiLCAibWV0aG9kIiwgInBhdGhuYW1lIl0KfQo=
